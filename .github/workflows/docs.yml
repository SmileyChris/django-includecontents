name: Deploy Documentation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "docs-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Build and test on pull requests
      - name: Build documentation (PR)
        if: github.event_name == 'pull_request'
        run: mkdocs build --clean --strict

      # Deploy dev docs from main branch
      - name: Deploy dev docs (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mike deploy dev --push --update-aliases

      # Deploy versioned docs from tags
      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: extract_version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          # Extract major.minor version (e.g., 3.1.1 -> 3.1)
          VERSION=$(echo $TAG | sed -E 's/^([0-9]+\.[0-9]+).*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying documentation for version $VERSION"

      - name: Deploy versioned docs (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${{ steps.extract_version.outputs.VERSION }}
          # Check if this is the latest version by comparing with other tags
          LATEST_TAG=$(git tag -l 'v*' | sort -V | tail -1)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          if [ "$CURRENT_TAG" = "$LATEST_TAG" ]; then
            echo "This is the latest version, updating latest alias"
            mike deploy $VERSION latest --push --update-aliases
          else
            echo "Not the latest version, deploying without latest alias"
            mike deploy $VERSION --push --update-aliases
          fi