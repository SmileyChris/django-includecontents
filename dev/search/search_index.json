{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django IncludeContents","text":"<p>A powerful Django package that brings component-like functionality to Django (and Jinja2) templates through enhanced template tags and optional HTML component syntax.</p>"},{"location":"#what-is-django-includecontents","title":"What is Django IncludeContents?","text":"<p>Django IncludeContents provides three powerful features:</p> <ol> <li>Enhanced Template Tags: The <code>{% includecontents %}</code> tag allows you to pass content blocks to included templates, creating reusable components</li> <li>HTML Component Syntax: An optional custom template engine that lets you write components using HTML-like syntax</li> <li>Icon System: Generate optimized SVG sprite sheets from Iconify icons and your local SVG files</li> </ol>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83e\udde9 Component-like Templates: Create reusable template components with isolated contexts</li> <li>\ud83d\udcdd HTML Syntax: Use familiar HTML-like syntax for components (e.g., <code>&lt;include:my-card&gt;</code>)</li> <li>\ud83c\udfad Icon System: SVG sprite sheets from 150,000+ Iconify icons and local files (e.g., <code>&lt;icon:home&gt;</code>)</li> <li>\ud83c\udfaf Props System: Define required and optional props with validation and defaults</li> <li>\ud83c\udfa8 CSS Class Management: Advanced class handling with conditional and extended classes</li> <li>\ud83d\udd12 Security First: Smart HTML escaping protects against XSS while preserving developer intent</li> <li>\ud83d\udd00 Conditional Wrapping: Clean conditional HTML wrapper syntax with <code>{% wrapif %}</code></li> <li>\ud83d\udcc4 Multi-line Tags: Support for multi-line template tags for better readability</li> <li>\u26a1 Developer Experience: Great integration with Prettier, VS Code, and Tailwind CSS</li> </ul>"},{"location":"#quick-examples","title":"Quick Examples","text":""},{"location":"#components-with-html-syntax","title":"Components with HTML Syntax","text":"<pre><code>&lt;!-- Use components like HTML elements --&gt;\n&lt;include:card title=\"Welcome\" variant=\"primary\"&gt;\n    &lt;p&gt;Build reusable components with familiar syntax!&lt;/p&gt;\n&lt;/include:card&gt;\n\n&lt;!-- Icons are just as easy --&gt;\n&lt;icon:home class=\"w-6 h-6\" /&gt;\n&lt;icon:user class=\"avatar\" use.role=\"img\" /&gt;\n</code></pre>"},{"location":"#icon-system","title":"Icon System","text":"<pre><code># settings.py\nINCLUDECONTENTS_ICONS = {\n    'icons': [\n        'mdi:home',         # Material Design Icons\n        'tabler:user',      # Tabler Icons\n        'lucide:star',      # Lucide Icons\n        'icons/logo.svg',   # Your own SVG files\n    ]\n}\n</code></pre> <pre><code>&lt;!-- Icons render as optimized SVG sprites --&gt;\n&lt;button class=\"btn\"&gt;\n    &lt;icon:save use.aria-hidden=\"true\" /&gt;\n    Save Document\n&lt;/button&gt;\n</code></pre>"},{"location":"#traditional-template-tag-syntax","title":"Traditional Template Tag Syntax","text":"<pre><code>{% load includecontents %}\n{% includecontents \"components/card.html\" title=\"Welcome\" %}\n    &lt;p&gt;Build reusable components!&lt;/p&gt;\n{% endincludecontents %}\n</code></pre>"},{"location":"#security-by-design","title":"Security by Design","text":"<pre><code>&lt;!-- \u2705 Hard-coded strings: Trusted, not escaped --&gt;\n&lt;include:alert type=\"info\" message=\"Don't worry - this won't be escaped!\" /&gt;\n\n&lt;!-- \u2705 User content: Automatically escaped for security --&gt;\n&lt;include:comment text=\"{{ user_input }}\" author=\"{{ user.name }}\" /&gt;\n&lt;!-- Protects against XSS attacks while preserving developer intent --&gt;\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to add component-like functionality to your Django templates?</p> <p>Get Started \u2192 Quick Start Guide \u2192</p>"},{"location":"#template-engine-support","title":"Template Engine Support","text":"<p>Django IncludeContents supports both Django templates and Jinja2! Choose the approach that works best for your project:</p> <ul> <li>Django Templates: Full native support with HTML component syntax</li> <li>Jinja2: Complete feature parity via extension system</li> </ul> <p>See our Jinja2 Setup Guide for Jinja2 installation and usage.</p>"},{"location":"#why-django-includecontents","title":"Why Django IncludeContents?","text":""},{"location":"#without-django-includecontents","title":"Without Django IncludeContents","text":"<pre><code>&lt;!-- Repetitive component code --&gt;\n&lt;div class=\"card border rounded p-4\"&gt;\n    &lt;h2 class=\"text-xl font-bold\"&gt;{{ title1 }}&lt;/h2&gt;\n    &lt;div class=\"content\"&gt;{{ content1 }}&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;!-- Messy icon implementation --&gt;\n&lt;img src=\"{% static 'icons/home.svg' %}\" alt=\"Home\" class=\"w-6 h-6\"&gt;\n&lt;!-- or --&gt;\n&lt;i class=\"fas fa-home\"&gt;&lt;/i&gt;  &lt;!-- Font icons = extra CSS weight --&gt;\n</code></pre>"},{"location":"#with-django-includecontents","title":"With Django IncludeContents","text":"<pre><code>&lt;!-- Clean, reusable components --&gt;\n&lt;include:card title=\"{{ title1 }}\"&gt;{{ content1 }}&lt;/include:card&gt;\n\n&lt;!-- Optimized SVG icons --&gt;\n&lt;icon:home class=\"w-6 h-6\" /&gt;\n</code></pre> <p>Benefits: - \u2705 Write less, do more - \u2705 Consistent UI components - \u2705 Optimized SVG sprites (no font icon CSS) - \u2705 Better performance and accessibility - \u2705 Easier to maintain</p>"},{"location":"icons/","title":"Icons","text":"<p>The django-includecontents icons system generates SVG sprite sheets from both Iconify icons and your local SVG files.</p> <p>Template Engine Support</p> <p>The icon system supports both template engines:</p> <ul> <li>Django Templates: Both <code>{% icon \"home\" %}</code> tags and <code>&lt;icon:home /&gt;</code> HTML syntax</li> <li>Jinja2: HTML syntax <code>&lt;icon:home /&gt;</code> via preprocessing (icon template tags coming soon)</li> </ul> <p>Icon sprite generation works identically for both engines.</p>"},{"location":"icons/#how-component-names-work","title":"How Component Names Work","text":"<p>When you configure icons, they're automatically given component names based on simple rules:</p> <ul> <li>Iconify icons: <code>'mdi:home'</code> \u2192 <code>&lt;icon:home&gt;</code> (uses part after colon)</li> <li>Local SVG files: <code>'icons/logo.svg'</code> \u2192 <code>&lt;icon:logo&gt;</code> (uses filename without extension)  </li> <li>Custom names: <code>('brand', 'icons/company.svg')</code> \u2192 <code>&lt;icon:brand&gt;</code> (uses your custom name)</li> </ul>"},{"location":"icons/#quick-start","title":"Quick Start","text":""},{"location":"icons/#1-configuration","title":"1. Configuration","text":"<p>First, add the icon finder to your static files settings:</p> <pre><code># settings.py\nSTATICFILES_FINDERS = [\n    'includecontents.icons.finders.IconSpriteFinder',  # Must be first for icons\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n]\n</code></pre> <p>Finder Order</p> <p>The <code>IconSpriteFinder</code> must be listed first in <code>STATICFILES_FINDERS</code>. This ensures that source SVG files are automatically excluded from other finders, preventing them from being served both individually and as part of the sprite.</p> <p>Then configure your icons:</p> <pre><code># settings.py\nINCLUDECONTENTS_ICONS = {\n    'icons': [\n        # Iconify icons - 'mdi:home' becomes &lt;icon:home&gt;\n        'mdi:home',\n        'tabler:user',\n\n        # Local SVG files - 'icons/logo.svg' becomes &lt;icon:logo&gt;\n        'icons/logo.svg',\n\n        # Custom names - override the automatic naming\n        ('nav', 'tabler:navigation'),        # Use &lt;icon:nav&gt; instead of &lt;icon:navigation&gt;\n        ('brand', 'assets/company-logo.svg'),  # Use &lt;icon:brand&gt; instead of &lt;icon:company-logo&gt;\n    ]\n}\n</code></pre>"},{"location":"icons/#2-usage","title":"2. Usage","text":"<pre><code>&lt;!-- Iconify icons --&gt;\n&lt;icon:home class=\"w-6 h-6\" /&gt;      &lt;!-- Uses 'mdi:home' --&gt;\n&lt;icon:user class=\"avatar\" /&gt;       &lt;!-- Uses 'tabler:user' --&gt;\n\n&lt;!-- Local SVG files --&gt;\n&lt;icon:logo class=\"header-logo\" /&gt;  &lt;!-- Uses 'icons/logo.svg' --&gt;\n\n&lt;!-- Custom names --&gt;\n&lt;icon:nav class=\"navigation\" /&gt;    &lt;!-- Uses 'tabler:navigation' with shorter name --&gt;\n&lt;icon:brand class=\"footer\" /&gt;      &lt;!-- Uses 'assets/company-logo.svg' with shorter name --&gt;\n\n&lt;!-- Advanced attributes --&gt;\n&lt;icon:user role=\"img\" aria-label=\"User profile\" /&gt;\n</code></pre> <p>Custom Template Engine Required</p> <p>The <code>&lt;icon:.../&gt;</code> HTML syntax requires the custom template engine. If you're using Django's standard template engine, use the template tag syntax instead:</p> <pre><code>{% load icons %}\n{% icon \"home\" class=\"w-6 h-6\" %}\n{% icon \"user\" class=\"avatar\" %}\n</code></pre>"},{"location":"icons/#icon-sources","title":"Icon Sources","text":""},{"location":"icons/#iconify-icons","title":"Iconify Icons","text":"<p>Choose from thousands of icons: <code>mdi:home</code>, <code>tabler:calendar</code>, <code>lucide:star</code>, etc. See iconify.design for available icons.</p> <p>Component Naming: - <code>'mdi:home'</code> \u2192 use as <code>&lt;icon:home&gt;</code> - <code>'tabler:calendar'</code> \u2192 use as <code>&lt;icon:calendar&gt;</code> - <code>'lucide:star'</code> \u2192 use as <code>&lt;icon:star&gt;</code></p> <p>The component name is the part after the colon (<code>:</code>).</p>"},{"location":"icons/#local-svg-files","title":"Local SVG Files","text":"<p>Place SVG files in your static directories: - <code>myapp/static/icons/logo.svg</code> \u2192 <code>'icons/logo.svg'</code> \u2192 use as <code>&lt;icon:logo&gt;</code> - <code>static/logos/brand.svg</code> \u2192 <code>'logos/brand.svg'</code> \u2192 use as <code>&lt;icon:brand&gt;</code></p> <p>Files are found using Django's static file system (<code>staticfiles</code>).</p> <p>Automatic SVG Cleaning: Local SVG files are automatically cleaned when added to sprites. The cleaning process: - Removes metadata, comments, and non-essential elements (like Inkscape-specific data) - Strips problematic attributes: <code>width</code>, <code>height</code>, <code>x</code>, <code>y</code>, <code>class</code>, <code>id</code> - Removes namespaced attributes (e.g., <code>inkscape:*</code>, <code>sodipodi:*</code>) - Preserves <code>style</code> attributes that contain CSS variables (e.g., <code>style=\"fill: var(--icon-color)\"</code>) - Removes regular inline styles without CSS variables to prevent conflicts - Keeps all drawing elements (<code>path</code>, <code>circle</code>, <code>rect</code>, <code>g</code>, <code>defs</code>, gradients, filters, etc.)</p> <p>This ensures your icons work correctly in sprite sheets, reduces file size, and enables advanced styling with CSS variables (see Styling with CSS Variables).</p> <p>Component Naming: The component name is the filename without extension: - <code>'icons/logo.svg'</code> \u2192 use as <code>&lt;icon:logo&gt;</code> - <code>'assets/nav-home.svg'</code> \u2192 use as <code>&lt;icon:nav-home&gt;</code></p>"},{"location":"icons/#custom-names","title":"Custom Names","text":"<p>Use tuples to create custom component names when you want something different from the automatic naming:</p> <pre><code>INCLUDECONTENTS_ICONS = {\n    'icons': [\n        ('home', 'mdi:house'),                    # &lt;icon:home&gt; uses mdi:house (instead of &lt;icon:house&gt;)\n        ('logo', 'assets/very-long-company-name.svg'),  # &lt;icon:logo&gt; instead of &lt;icon:very-long-company-name&gt;\n        ('nav', 'tabler:navigation'),             # &lt;icon:nav&gt; uses tabler:navigation (instead of &lt;icon:navigation&gt;)\n    ]\n}\n</code></pre> <p>When to use custom names: - Shorter names: <code>('nav', 'tabler:navigation')</code> \u2192 <code>&lt;icon:nav&gt;</code> instead of <code>&lt;icon:navigation&gt;</code> - Consistent naming: <code>('user', 'mdi:account')</code> \u2192 <code>&lt;icon:user&gt;</code> instead of <code>&lt;icon:account&gt;</code> - Avoid conflicts: When two icons would have the same auto-generated name</p>"},{"location":"icons/#iconify-api-caching-optional","title":"Iconify API Caching (Optional)","text":"<p>To reduce API calls and enable offline development, you can cache Iconify icons locally:</p> <pre><code># settings.py\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nINCLUDECONTENTS_ICONS = {\n    'icons': [...],\n\n    # Cache configuration\n    'api_cache_root': BASE_DIR / 'static' / '.icon_cache',  # Where to write cached icons\n    'api_cache_static_path': '.icon_cache',                 # Where to read cached icons from static files\n}\n</code></pre> <p>This creates a cache structure like: <pre><code>static/.icon_cache/\n\u251c\u2500\u2500 mdi/\n\u2502   \u251c\u2500\u2500 home.json\n\u2502   \u2514\u2500\u2500 account.json\n\u251c\u2500\u2500 tabler/\n\u2502   \u2514\u2500\u2500 user.json\n</code></pre></p> <p>Benefits: - Icons are fetched from Iconify API only once - Subsequent builds use local cached copies - Works offline after initial fetch - Can be committed to version control for reproducible builds</p> <p>Notes: - Cache is optional - leave settings undefined to disable - Only caches Iconify icons, not local SVG files - Each icon cached individually for incremental updates</p>"},{"location":"icons/#configuration-options","title":"Configuration Options","text":"<p>All available configuration options for <code>INCLUDECONTENTS_ICONS</code>:</p> <pre><code># settings.py\nINCLUDECONTENTS_ICONS = {\n    # Required: List of icons\n    'icons': [\n        'mdi:home',\n        'icons/logo.svg',\n        ('custom', 'tabler:star'),\n    ],\n\n    # Optional settings\n    'dev_mode': True,                    # Development features\n    'cache_timeout': 3600,               # Cache timeout (seconds)\n    'api_base': 'https://api.iconify.design',  # Iconify API URL\n\n    # Optional cache settings (see Iconify API Caching section above)\n    'api_cache_root': Path('static/.icon_cache'),      # Filesystem path for writing cached icons\n    'api_cache_static_path': '.icon_cache',            # Static files path for reading cached icons\n}\n</code></pre>"},{"location":"icons/#template-usage","title":"Template Usage","text":""},{"location":"icons/#html-component-syntax-requires-custom-engine","title":"HTML Component Syntax (Requires Custom Engine)","text":"<p>The <code>&lt;icon:.../&gt;</code> syntax requires the custom template engine:</p> <pre><code>&lt;icon:home class=\"nav-icon\" /&gt;\n&lt;icon:user class=\"avatar\" use.fill=\"currentColor\" /&gt;\n</code></pre>"},{"location":"icons/#template-tags-works-with-any-engine","title":"Template Tags (Works with Any Engine)","text":"<p>The template tag syntax works with both standard Django and custom engines:</p> <pre><code>{% load icons %}\n{% icon \"home\" class=\"nav-icon\" %}\n{% icon \"user\" as user_icon %}  &lt;!-- Store in variable instead of rendering --&gt;\n{% icons_inline %}  &lt;!-- Development mode --&gt;\n</code></pre>"},{"location":"icons/#advanced-features","title":"Advanced Features","text":""},{"location":"icons/#conditional-icon-rendering","title":"Conditional Icon Rendering","text":"<p>Use the <code>as variable_name</code> syntax to store icon HTML in a template variable instead of rendering immediately. This allows you to conditionally render icons or test if they exist:</p> <pre><code>{% load icons %}\n\n&lt;!-- Store icon in variable --&gt;\n{% icon \"home\" class=\"nav-icon\" as home_icon %}\n\n&lt;!-- Use conditionally --&gt;\n{% if home_icon %}\n    &lt;button&gt;{{ home_icon }} Go Home&lt;/button&gt;\n{% endif %}\n\n&lt;!-- Or render directly when needed --&gt;\n&lt;div class=\"sidebar\"&gt;{{ home_icon }}&lt;/div&gt;\n</code></pre> <p>Invalid icons behavior: If you request an icon that doesn't exist in your configuration, it will render as an empty string rather than broken HTML.</p> <pre><code>{% icon \"non-existent-icon\" as missing_icon %}\n{% if missing_icon %}\n    This won't show since the icon doesn't exist\n{% else %}\n    &lt;span&gt;Icon not available&lt;/span&gt;\n{% endif %}\n</code></pre>"},{"location":"icons/#attribute-separation","title":"Attribute Separation","text":"<p>Use <code>use.*</code> to control SVG vs USE element attributes:</p> <pre><code>&lt;icon:star \n    class=\"icon-wrapper\" \n    role=\"img\"\n    aria-label=\"Favorite item\"\n    use.fill=\"gold\" \n    use.stroke=\"orange\" /&gt;\n</code></pre> <p>Generates: <pre><code>&lt;svg class=\"icon-wrapper\" role=\"img\" aria-label=\"Favorite item\"&gt;\n  &lt;use fill=\"gold\" stroke=\"orange\" href=\"/static/icons/sprite-abc123.svg#star\"&gt;&lt;/use&gt;\n&lt;/svg&gt;\n</code></pre></p>"},{"location":"icons/#static-file-integration","title":"Static File Integration","text":"<p>Icons are automatically integrated with Django's static file system:</p> <ul> <li>Automatic generation: Sprites created on-demand when requested</li> <li>Seamless integration: Works with <code>collectstatic</code>, <code>findstatic</code>, and development server</li> <li>Cache-friendly: Uses Django's static file versioning and CDN support</li> <li>No build step: No separate management commands needed</li> <li>Strict validation: Build fails fast on any missing icons</li> </ul>"},{"location":"icons/#how-it-works","title":"How It Works","text":"<p>Icons work automatically with Django's static file system: - <code>python manage.py collectstatic</code> (production) - <code>python manage.py findstatic icons/sprite-*.svg</code> (debugging) - Django development server (development)</p> <p>The <code>IconSpriteFinder</code> generates sprites on-demand when requested, integrating seamlessly with Django's static file handling.</p>"},{"location":"icons/#generated-output","title":"Generated Output","text":"<p>When you use <code>&lt;icon:home&gt;</code>, it generates:</p> <pre><code>&lt;svg class=\"your-classes\"&gt;\n  &lt;use href=\"/static/icons/sprite-abc123def.svg#home\"&gt;&lt;/use&gt;\n&lt;/svg&gt;\n</code></pre> <p>Key parts: - <code>/static/icons/sprite-abc123def.svg</code> - Django static file URL to the generated sprite - <code>#home</code> - Fragment identifier pointing to the specific icon symbol in the sprite (uses component name) - The hash (<code>abc123def</code>) changes when your icon configuration changes, enabling cache busting</p>"},{"location":"icons/#best-practices","title":"Best Practices","text":""},{"location":"icons/#file-organization","title":"File Organization","text":"<pre><code>static/\n\u251c\u2500\u2500 icons/\n\u2502   \u251c\u2500\u2500 nav/\n\u2502   \u2502   \u251c\u2500\u2500 home.svg\n\u2502   \u2502   \u2514\u2500\u2500 profile.svg\n\u2502   \u2514\u2500\u2500 ui/\n\u2502       \u251c\u2500\u2500 star.svg\n\u2502       \u2514\u2500\u2500 heart.svg\n\u2514\u2500\u2500 logos/\n    \u251c\u2500\u2500 brand.svg\n    \u2514\u2500\u2500 partner.svg\n</code></pre>"},{"location":"icons/#configuration","title":"Configuration","text":"<pre><code>INCLUDECONTENTS_ICONS = {\n    'icons': [\n        # Navigation icons\n        ('nav-home', 'icons/nav/home.svg'),\n        ('nav-profile', 'icons/nav/profile.svg'),\n\n        # UI icons from Iconify\n        ('ui-star', 'mdi:star'),\n        ('ui-heart', 'mdi:heart'),\n\n        # Brand assets\n        ('logo', 'logos/brand.svg'),\n        ('partner-logo', 'logos/partner.svg'),\n    ]\n}\n</code></pre>"},{"location":"icons/#accessibility","title":"Accessibility","text":"<pre><code>&lt;!-- Decorative icon --&gt;\n&lt;icon:star aria-hidden=\"true\" /&gt;\n\n&lt;!-- Meaningful icon --&gt;\n&lt;icon:home role=\"img\" aria-label=\"Go to homepage\" /&gt;\n\n&lt;!-- Button with icon --&gt;\n&lt;button&gt;\n  &lt;icon:save aria-hidden=\"true\" /&gt;\n  Save Document\n&lt;/button&gt;\n</code></pre>"},{"location":"icons/#troubleshooting","title":"Troubleshooting","text":"<p>Icons not rendering: - Check <code>INCLUDECONTENTS_ICONS</code> configuration - Verify static files are properly configured - Ensure <code>includecontents</code> is in <code>INSTALLED_APPS</code></p> <p>Local SVG files not found: - Check file exists: <code>python manage.py findstatic icons/logo.svg</code> - Verify <code>STATICFILES_DIRS</code> or app static directories - Ensure file path matches configuration</p> <p>Template syntax errors: - Use quotes around icon names in template tags - Check for typos in icon names - Verify custom template engine is configured</p>"},{"location":"building-components/advanced-props/","title":"Advanced Props","text":"<p>Advanced prop features including enum validation, complex prop types, and sophisticated validation patterns.</p>"},{"location":"building-components/advanced-props/#enum-props","title":"Enum Props","text":"<p>Define props with a limited set of allowed values for better validation and developer experience.</p>"},{"location":"building-components/advanced-props/#basic-enum-syntax","title":"Basic Enum Syntax","text":"<pre><code>{# props variant=primary,secondary,danger #}\n&lt;button {% attrs class=\"btn btn-{{ variant }}\" %}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:button variant=\"primary\"&gt;Save&lt;/include:button&gt;\n&lt;include:button variant=\"danger\"&gt;Delete&lt;/include:button&gt;\n</code></pre></p>"},{"location":"building-components/advanced-props/#generated-boolean-variables","title":"Generated Boolean Variables","text":"<p>When an enum prop is set, the component receives both the value and boolean flags:</p> <pre><code>{# props variant=primary,secondary,danger #}\n&lt;button {% attrs \n    class=\"btn\" \n    class:btn-primary=variantPrimary \n    class:btn-secondary=variantSecondary \n    class:btn-danger=variantDanger \n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre> <p>Context variables created: - <code>variant</code> - The prop value (<code>\"primary\"</code>) - <code>variantPrimary</code> - Boolean (<code>True</code> when variant=\"primary\") - <code>variantSecondary</code> - Boolean (<code>False</code> when variant=\"primary\") - <code>variantDanger</code> - Boolean (<code>False</code> when variant=\"primary\")</p>"},{"location":"building-components/advanced-props/#optional-enums","title":"Optional Enums","text":"<p>Start with an empty value to make the enum optional:</p> <pre><code>{# props size=,small,medium,large #}\n&lt;div {% attrs class=\"box\" class:box-small=sizeSmall class:box-medium=sizeMedium class:box-large=sizeLarge %}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;!-- No size specified - uses empty default --&gt;\n&lt;include:box&gt;Default size content&lt;/include:box&gt;\n\n&lt;!-- Explicit size --&gt;\n&lt;include:box size=\"large\"&gt;Large content&lt;/include:box&gt;\n</code></pre></p>"},{"location":"building-components/advanced-props/#kebab-case-enum-values","title":"Kebab-Case Enum Values","text":"<p>Enum values with hyphens are converted to camelCase for boolean variables:</p> <pre><code>{# props theme=light-mode,dark-mode,high-contrast #}\n&lt;div {% attrs \n    class=\"container\" \n    class:light-theme=themeLightMode \n    class:dark-theme=themeDarkMode \n    class:high-contrast=themeHighContrast \n%}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#multiple-enum-values","title":"Multiple Enum Values","text":"<p>You can specify multiple enum values separated by spaces:</p> <pre><code>{# props variant=primary,secondary,accent,icon,large #}\n&lt;button {% attrs \n    class=\"btn\" \n    class:btn-primary=variantPrimary \n    class:btn-secondary=variantSecondary \n    class:btn-accent=variantAccent\n    class:btn-icon=variantIcon\n    class:btn-large=variantLarge\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre> <p>Usage: <pre><code>&lt;!-- Single value --&gt;\n&lt;include:button variant=\"primary\"&gt;Save&lt;/include:button&gt;\n\n&lt;!-- Multiple values --&gt;\n&lt;include:button variant=\"primary icon\"&gt;Save&lt;/include:button&gt;\n&lt;include:button variant=\"secondary large\"&gt;Cancel&lt;/include:button&gt;\n&lt;include:button variant=\"accent icon large\"&gt;Featured&lt;/include:button&gt;\n</code></pre></p> <p>Context variables created for <code>variant=\"primary icon\"</code>: - <code>variant</code> - The full value (<code>\"primary icon\"</code>) - <code>variantPrimary</code> - Boolean (<code>True</code>) - <code>variantIcon</code> - Boolean (<code>True</code>) - <code>variantSecondary</code> - Boolean (<code>False</code>) - <code>variantAccent</code> - Boolean (<code>False</code>) - <code>variantLarge</code> - Boolean (<code>False</code>)</p> <p>This is particularly useful for combining visual modifiers like size, appearance, and behavior flags.</p>"},{"location":"building-components/advanced-props/#complex-props","title":"Complex Props","text":""},{"location":"building-components/advanced-props/#default-value-types","title":"Default Value Types","text":"<p>Props support various default value types:</p> <pre><code>{# props \n    title=\"\",\n    count=0,\n    rating=4.5,\n    enabled=True,\n    disabled=False,\n    callback=None,\n    items=[]\n#}\n</code></pre>"},{"location":"building-components/advanced-props/#dynamic-defaults","title":"Dynamic Defaults","text":"<p>Use template expressions for dynamic defaults:</p> <pre><code>{# props user, show_avatar=True, avatar_size=\"medium\" #}\n{% if user.is_premium %}\n    {% with default_size=\"large\" %}\n        &lt;!-- Use premium default --&gt;\n    {% endwith %}\n{% endif %}\n</code></pre>"},{"location":"building-components/advanced-props/#validation-patterns","title":"Validation Patterns","text":""},{"location":"building-components/advanced-props/#required-prop-validation","title":"Required Prop Validation","text":"<p>Components automatically validate required props:</p> <pre><code>{# props title, author, content #}\n&lt;!-- Will raise TemplateSyntaxError if any required prop is missing --&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#custom-validation","title":"Custom Validation","text":"<p>Add validation logic in your component:</p> <pre><code>{# props count=0 #}\n{% if count &lt; 0 %}\n    &lt;div class=\"error\"&gt;Count cannot be negative&lt;/div&gt;\n{% elif count &gt; 100 %}\n    &lt;div class=\"error\"&gt;Count too large (max 100)&lt;/div&gt;\n{% else %}\n    &lt;div class=\"counter\"&gt;{{ count }}&lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/advanced-props/#type-checking","title":"Type Checking","text":"<p>While Django templates don't enforce strict typing, you can add checks:</p> <pre><code>{# props items=[] #}\n{% if items|length_is:\"0\" %}\n    &lt;p class=\"empty\"&gt;No items to display&lt;/p&gt;\n{% else %}\n    &lt;ul&gt;\n        {% for item in items %}\n            &lt;li&gt;{{ item }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/advanced-props/#advanced-examples","title":"Advanced Examples","text":""},{"location":"building-components/advanced-props/#multi-variant-component","title":"Multi-Variant Component","text":"<pre><code>{# props \n    variant=primary,secondary,success,warning,danger,\n    size=,small,medium,large,\n    outline=False,\n    disabled=False \n#}\n&lt;button {% attrs \n    class=\"btn\"\n    class:btn-primary=variantPrimary\n    class:btn-secondary=variantSecondary\n    class:btn-success=variantSuccess\n    class:btn-warning=variantWarning\n    class:btn-danger=variantDanger\n    class:btn-outline=outline\n    class:btn-sm=sizeSmall\n    class:btn-lg=sizeLarge\n    disabled=disabled\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#complex-form-component","title":"Complex Form Component","text":"<pre><code>{# props \n    name,\n    label=\"\",\n    type=text,email,password,number,tel,url,\n    required=False,\n    placeholder=\"\",\n    help_text=\"\",\n    validation_state=,valid,invalid,warning\n#}\n&lt;div {% attrs \n    class=\"form-group\" \n    class:has-error=validationStateInvalid\n    class:has-warning=validationStateWarning\n    class:has-success=validationStateValid\n%}&gt;\n    {% if label %}\n        &lt;label for=\"{{ name }}\" class=\"form-label\"&gt;\n            {{ label }}\n            {% if required %}&lt;span class=\"required\"&gt;*&lt;/span&gt;{% endif %}\n        &lt;/label&gt;\n    {% endif %}\n\n    &lt;input {% attrs.input\n        type=type\n        name=name\n        id=name\n        placeholder=placeholder\n        required=required\n        class=\"form-control\"\n        class:is-valid=validationStateValid\n        class:is-invalid=validationStateInvalid\n    %}&gt;\n\n    {% if help_text %}\n        &lt;small class=\"form-text\"&gt;{{ help_text }}&lt;/small&gt;\n    {% endif %}\n\n    {% if contents.errors %}\n        &lt;div class=\"invalid-feedback\"&gt;{{ contents.errors }}&lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#theme-aware-component","title":"Theme-Aware Component","text":"<pre><code>{# props \n    theme=auto,light,dark,\n    color=blue,red,green,yellow,purple,\n    intensity=50,100,200,300,400,500,600,700,800,900\n#}\n&lt;div {% attrs \n    class=\"alert\"\n    class:alert-light=themeLight\n    class:alert-dark=themeDark\n    class:alert-auto=themeAuto\n    class:text-{{ color }}-{{ intensity }}=True\n    data-theme=theme\n%}&gt;\n    {% if themeAuto %}\n        &lt;script&gt;\n            // Auto theme detection logic\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                this.classList.add('alert-dark');\n            } else {\n                this.classList.add('alert-light');\n            }\n        &lt;/script&gt;\n    {% endif %}\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#error-handling","title":"Error Handling","text":""},{"location":"building-components/advanced-props/#invalid-enum-values","title":"Invalid Enum Values","text":"<pre><code>{# props variant=primary,secondary,danger #}\n</code></pre> <p>Usage that causes error: <pre><code>&lt;include:button variant=\"invalid\"&gt;Button&lt;/include:button&gt;\n</code></pre></p> <p>Error message: <pre><code>TemplateSyntaxError: Invalid value 'invalid' for enum prop 'variant'. \nMust be one of: primary, secondary, danger\n</code></pre></p>"},{"location":"building-components/advanced-props/#missing-required-props","title":"Missing Required Props","text":"<pre><code>{# props title, content #}\n</code></pre> <p>Usage that causes error: <pre><code>&lt;include:card title=\"Hello\"&gt;Content&lt;/include:card&gt;  &lt;!-- Missing 'content' prop --&gt;\n</code></pre></p> <p>Error message: <pre><code>TemplateSyntaxError: Missing required prop 'content' for component 'card'\n</code></pre></p>"},{"location":"building-components/advanced-props/#best-practices","title":"Best Practices","text":""},{"location":"building-components/advanced-props/#1-use-semantic-enum-values","title":"1. Use Semantic Enum Values","text":"<pre><code>&lt;!-- \u2705 Good: Clear meaning --&gt;\n{# props status=draft,published,archived #}\n\n&lt;!-- \u274c Avoid: Unclear abbreviations --&gt;\n{# props status=d,p,a #}\n</code></pre>"},{"location":"building-components/advanced-props/#2-provide-sensible-defaults","title":"2. Provide Sensible Defaults","text":"<pre><code>&lt;!-- \u2705 Good: Reasonable defaults --&gt;\n{# props variant=primary,secondary, size=medium,small,large, disabled=False #}\n\n&lt;!-- \u274c Avoid: No defaults for optional props --&gt;\n{# props variant=primary,secondary, size=medium,small,large #}\n</code></pre>"},{"location":"building-components/advanced-props/#3-document-complex-props","title":"3. Document Complex Props","text":"<pre><code>{# \nprops:\n  variant (enum): Button style - primary, secondary, danger\n  size (enum, optional): Button size - small, medium (default), large  \n  loading (bool): Show loading spinner\n  href (string, optional): Make button a link\n#}\n</code></pre>"},{"location":"building-components/advanced-props/#4-group-related-enums","title":"4. Group Related Enums","text":"<pre><code>{# props \n    text_size=xs,sm,base,lg,xl,2xl,3xl,\n    text_weight=thin,light,normal,medium,semibold,bold,black,\n    text_color=gray,red,blue,green,yellow,purple\n#}\n</code></pre>"},{"location":"building-components/advanced-props/#5-use-validation-for-critical-props","title":"5. Use Validation for Critical Props","text":"<pre><code>{# props percentage=50 #}\n{% if percentage &lt; 0 or percentage &gt; 100 %}\n    &lt;div class=\"error\"&gt;Percentage must be between 0 and 100&lt;/div&gt;\n{% else %}\n    &lt;div class=\"progress-bar\" style=\"width: {{ percentage }}%\"&gt;&lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/advanced-props/#migration-from-simple-props","title":"Migration from Simple Props","text":""},{"location":"building-components/advanced-props/#before-simple-props","title":"Before (Simple Props)","text":"<pre><code>{# props variant=\"primary\", size=\"medium\" #}\n&lt;button class=\"btn btn-{{ variant }} btn-{{ size }}\"&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#after-enum-props","title":"After (Enum Props)","text":"<pre><code>{# props variant=primary,secondary,danger, size=small,medium,large #}\n&lt;button {% attrs \n    class=\"btn\"\n    class:btn-primary=variantPrimary\n    class:btn-secondary=variantSecondary  \n    class:btn-danger=variantDanger\n    class:btn-small=sizeSmall\n    class:btn-medium=sizeMedium\n    class:btn-large=sizeLarge\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre> <p>Benefits of enum props: - Validation: Invalid values are caught at render time - IDE support: Better autocomplete and error detection - Documentation: Clear list of allowed values - Type safety: Boolean flags prevent typos in conditionals</p>"},{"location":"building-components/advanced-props/#attribute-spreading","title":"Attribute Spreading","text":"<p>The <code>...attrs</code> syntax allows you to forward undefined attributes from a parent component to child components. This is a powerful feature for creating flexible wrapper components that don't need to explicitly define every possible attribute.</p>"},{"location":"building-components/advanced-props/#basic-spreading","title":"Basic Spreading","text":"<pre><code>{# components/wrapper.html #}\n{# props title #}\n&lt;div class=\"wrapper\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;!-- Forward all undefined attrs to the child component --&gt;\n    &lt;include:card ...attrs&gt;\n        {{ contents }}\n    &lt;/include:card&gt;\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:wrapper \n    title=\"My Wrapper\" \n    class=\"custom-card\" \n    id=\"card-123\"\n    data-value=\"456\"\n&gt;\n    Card content\n&lt;/include:wrapper&gt;\n</code></pre></p> <p>In this example, <code>class</code>, <code>id</code>, and <code>data-value</code> are passed through to the <code>card</code> component because they're not defined as props in the wrapper.</p>"},{"location":"building-components/advanced-props/#how-it-works","title":"How It Works","text":"<ol> <li>The parent component receives attributes</li> <li>Defined props are extracted and used by the parent</li> <li>Undefined attributes are collected in the <code>attrs</code> variable</li> <li><code>...attrs</code> spreads these undefined attributes to the child component</li> <li>The child merges spread attrs with its own attrs</li> </ol>"},{"location":"building-components/advanced-props/#spreading-with-props","title":"Spreading with Props","text":"<p>When spreading attrs to a component that defines props, only the undefined attributes are spread:</p> <pre><code>{# components/filtered-wrapper.html #}\n{# props #}\n&lt;div class=\"wrapper\"&gt;\n    &lt;include:user-card name=\"John\" ...attrs&gt;\n        Additional info\n    &lt;/include:user-card&gt;\n&lt;/div&gt;\n\n{# components/user-card.html #}\n{# props name, role=\"user\" #}\n&lt;div {{ attrs }} class=\"user-card\"&gt;\n    &lt;h3&gt;{{ name }}&lt;/h3&gt;\n    &lt;span class=\"role\"&gt;{{ role }}&lt;/span&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:filtered-wrapper \n    name=\"Jane\"\n    role=\"admin\" \n    data-id=\"123\"\n    class=\"highlight\"\n&gt;\n&lt;/include:filtered-wrapper&gt;\n</code></pre></p> <p>Here: - <code>name</code> is explicitly set to \"John\" in the wrapper (overrides \"Jane\") - <code>role=\"admin\"</code> flows through attrs to the child - <code>data-id</code> and <code>class</code> are spread as undefined attributes</p>"},{"location":"building-components/advanced-props/#spreading-attribute-groups","title":"Spreading Attribute Groups","text":"<p>You can spread specific groups of attributes using the dot notation:</p> <pre><code>{# components/form.html #}\n{# props #}\n&lt;form {{ attrs }}&gt;\n    {{ contents }}\n    &lt;include:submit-button ...attrs.button&gt;\n        Submit\n    &lt;/include:submit-button&gt;\n&lt;/form&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:form \n    method=\"POST\" \n    action=\"/submit\"\n    button.type=\"submit\"\n    button.class=\"btn btn-primary\"\n    button.disabled=\"{{ is_processing }}\"\n&gt;\n    &lt;input name=\"email\" type=\"email\"&gt;\n&lt;/include:form&gt;\n</code></pre></p> <p>Only the <code>button.*</code> attributes are spread to the submit button component.</p>"},{"location":"building-components/advanced-props/#precedence-rules","title":"Precedence Rules","text":"<p>Local attributes take precedence over spread attributes:</p> <pre><code>{# components/precedence-wrapper.html #}\n{# props #}\n&lt;div&gt;\n    &lt;!-- Local class overrides any class from spread attrs --&gt;\n    &lt;include:card ...attrs class=\"local-override\"&gt;\n        {{ contents }}\n    &lt;/include:card&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#practical-examples","title":"Practical Examples","text":""},{"location":"building-components/advanced-props/#1-layout-wrapper","title":"1. Layout Wrapper","text":"<pre><code>{# components/section.html #}\n{# props title #}\n&lt;section class=\"content-section\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;include:content-area ...attrs&gt;\n        {{ contents }}\n    &lt;/include:content-area&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#2-conditional-wrapper","title":"2. Conditional Wrapper","text":"<pre><code>{# components/maybe-link.html #}\n{# props href=None #}\n{% if href %}\n    &lt;a href=\"{{ href }}\" ...attrs&gt;{{ contents }}&lt;/a&gt;\n{% else %}\n    &lt;span ...attrs&gt;{{ contents }}&lt;/span&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/advanced-props/#3-form-field-wrapper","title":"3. Form Field Wrapper","text":"<pre><code>{# components/field-wrapper.html #}\n{# props label, name, required=False #}\n&lt;div class=\"field\"&gt;\n    &lt;label for=\"{{ name }}\"&gt;\n        {{ label }}\n        {% if required %}&lt;span class=\"required\"&gt;*&lt;/span&gt;{% endif %}\n    &lt;/label&gt;\n    &lt;include:input name=\"{{ name }}\" ...attrs /&gt;\n    {% if contents.error %}\n        &lt;div class=\"error\"&gt;{{ contents.error }}&lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#4-multi-level-component-architecture","title":"4. Multi-Level Component Architecture","text":"<pre><code>{# components/card-header.html #}\n{# props title #}\n&lt;header {{ attrs }}&gt;\n    &lt;h3&gt;{{ title }}&lt;/h3&gt;\n    {{ contents }}\n&lt;/header&gt;\n\n{# components/card.html #}\n{# props #}\n&lt;article class=\"card\"&gt;\n    &lt;include:card-header ...attrs.header title=\"{{ attrs.title|default:'Untitled' }}\"&gt;\n        {% if contents.actions %}\n            {{ contents.actions }}\n        {% endif %}\n    &lt;/include:card-header&gt;\n    &lt;div class=\"card-body\" {{ attrs.body }}&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/article&gt;\n\n{# Usage #}\n&lt;include:card \n    title=\"User Profile\"\n    header.class=\"bg-primary text-white\"\n    header.id=\"profile-header\"\n    body.class=\"p-4\"\n&gt;\n    &lt;content:actions&gt;\n        &lt;button&gt;Edit&lt;/button&gt;\n    &lt;/content:actions&gt;\n    Profile content here...\n&lt;/include:card&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#best-practices_1","title":"Best Practices","text":"<ol> <li> <p>Use for Wrapper Components: Spreading is most useful for components that wrap other components</p> </li> <li> <p>Document Expected Attrs: Even though attrs are undefined, document common ones:    <pre><code>{# \nWrapper component that forwards all attrs to inner card.\nCommon attrs: class, id, data-*, aria-*\n#}\n{# props title #}\n</code></pre></p> </li> <li> <p>Be Explicit When Needed: Sometimes it's clearer to pass specific attrs:    <pre><code>&lt;!-- Less clear --&gt;\n&lt;include:wrapper ...attrs&gt;\n\n&lt;!-- More clear --&gt;\n&lt;include:wrapper class=\"{{ class }}\" id=\"{{ id }}\"&gt;\n</code></pre></p> </li> <li> <p>Consider Performance: Spreading attrs has minimal overhead, but avoid deeply nested spreading chains</p> </li> <li> <p>Type Safety: Remember that spread attrs bypass prop validation - validate critical attributes when needed</p> </li> </ol>"},{"location":"building-components/advanced-props/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"building-components/advanced-props/#dynamic-spreading","title":"Dynamic Spreading","text":"<pre><code>{# props spread_to=\"card\" #}\n{% if spread_to == \"wrapper\" %}\n    &lt;div ...attrs&gt;\n        &lt;include:card&gt;{{ contents }}&lt;/include:card&gt;\n    &lt;/div&gt;\n{% else %}\n    &lt;div&gt;\n        &lt;include:card ...attrs&gt;{{ contents }}&lt;/include:card&gt;\n    &lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/advanced-props/#component-chain-with-spreading","title":"Component Chain with Spreading","text":"<pre><code>{# components/themed-card.html #}\n{# props theme=\"light\" #}\n&lt;div class=\"theme-{{ theme }}\"&gt;\n    &lt;include:styled-card ...attrs&gt;\n        {{ contents }}\n    &lt;/include:styled-card&gt;\n&lt;/div&gt;\n\n{# components/styled-card.html #}\n{# props bordered=True #}\n&lt;div class=\"styled-wrapper\"&gt;\n    &lt;include:base-card bordered=\"{{ bordered }}\" ...attrs&gt;\n        {{ contents }}\n    &lt;/include:base-card&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/advanced-props/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about CSS Classes for advanced styling</li> <li>Explore Component Patterns for real-world examples</li> <li>Check out the API Reference for complete syntax details</li> </ul>"},{"location":"building-components/best-practices/","title":"Best Practices","text":"<p>Building maintainable, reusable components requires following established patterns and conventions. This guide covers the essential best practices for Django IncludeContents.</p> <p>Jinja2 Users</p> <p>Components always render undefined variables as empty strings, matching Django template behavior. This works consistently regardless of your <code>DEBUG</code> setting or Jinja2's <code>undefined</code> configuration.</p>"},{"location":"building-components/best-practices/#naming-conventions","title":"Naming Conventions","text":""},{"location":"building-components/best-practices/#component-names","title":"Component Names","text":"<p>Use clear, semantic names that describe the component's purpose:</p> <pre><code>&lt;!-- \u2705 Good: Clear purpose --&gt;\n&lt;include:article-summary article=\"{{ article }}\" /&gt;\n&lt;include:user-avatar user=\"{{ user }}\" size=\"small\" /&gt;\n&lt;include:product-image product=\"{{ product }}\" /&gt;\n\n&lt;!-- \u274c Avoid: Generic names --&gt;\n&lt;include:widget data=\"{{ data }}\" /&gt;\n&lt;include:component type=\"user\" /&gt;\n&lt;include:item /&gt;\n</code></pre>"},{"location":"building-components/best-practices/#naming-patterns","title":"Naming Patterns","text":"<p>Follow consistent naming patterns across your application:</p> <pre><code>&lt;!-- \u2705 Good: Consistent pattern --&gt;\n&lt;include:forms:text-field /&gt;\n&lt;include:forms:email-field /&gt;\n&lt;include:forms:password-field /&gt;\n\n&lt;!-- \u274c Inconsistent --&gt;\n&lt;include:forms:text-field /&gt;\n&lt;include:email-input /&gt;\n&lt;include:password-form /&gt;\n</code></pre>"},{"location":"building-components/best-practices/#file-organization","title":"File Organization","text":"<p>Organize components logically using directories:</p> <pre><code>templates/components/\n\u251c\u2500\u2500 forms/                    # Form-related components\n\u2502   \u251c\u2500\u2500 field.html\n\u2502   \u251c\u2500\u2500 button.html\n\u2502   \u2514\u2500\u2500 select.html\n\u251c\u2500\u2500 ui/                       # UI components\n\u2502   \u251c\u2500\u2500 modal.html\n\u2502   \u251c\u2500\u2500 button.html\n\u2502   \u2514\u2500\u2500 icons/\n\u2502       \u251c\u2500\u2500 chevron.html\n\u2502       \u2514\u2500\u2500 close.html\n\u251c\u2500\u2500 layout/                   # Layout components\n\u2502   \u251c\u2500\u2500 header.html\n\u2502   \u251c\u2500\u2500 footer.html\n\u2502   \u2514\u2500\u2500 sidebar.html\n\u2514\u2500\u2500 content/                  # Content components\n    \u251c\u2500\u2500 article-card.html\n    \u251c\u2500\u2500 user-profile.html\n    \u2514\u2500\u2500 comment.html\n</code></pre>"},{"location":"building-components/best-practices/#component-design-principles","title":"Component Design Principles","text":""},{"location":"building-components/best-practices/#single-responsibility","title":"Single Responsibility","text":"<p>Each component should have one clear purpose:</p> <pre><code>&lt;!-- \u2705 Good: Single responsibility --&gt;\n&lt;include:product-image product=\"{{ product }}\" /&gt;\n&lt;include:product-price product=\"{{ product }}\" /&gt;\n&lt;include:product-rating product=\"{{ product }}\" /&gt;\n\n&lt;!-- \u274c Avoid: Too many responsibilities --&gt;\n&lt;include:product-everything product=\"{{ product }}\" /&gt;\n</code></pre>"},{"location":"building-components/best-practices/#composition-over-complexity","title":"Composition Over Complexity","text":"<p>Build complex components by combining simpler ones:</p> <pre><code>&lt;!-- \u2705 Good: Composed from simple components --&gt;\n&lt;include:article-card article=\"{{ article }}\"&gt;\n    &lt;content:header&gt;\n        &lt;include:user-avatar user=\"{{ article.author }}\" size=\"small\" /&gt;\n        &lt;include:publish-date date=\"{{ article.published_at }}\" /&gt;\n    &lt;/content:header&gt;\n\n    &lt;include:article-excerpt content=\"{{ article.content }}\" /&gt;\n\n    &lt;content:footer&gt;\n        &lt;include:tag-list tags=\"{{ article.tags }}\" /&gt;\n        &lt;include:social-share url=\"{{ article.url }}\" /&gt;\n    &lt;/content:footer&gt;\n&lt;/include:article-card&gt;\n</code></pre>"},{"location":"building-components/best-practices/#predictable-interface","title":"Predictable Interface","text":"<p>Define clear props interfaces using comments:</p> <pre><code>{# props \n   user - User object (required)\n   size - Avatar size: small, medium, large (default: medium)\n   show_status - Show online status indicator (default: false)\n   clickable - Make avatar clickable (default: false)\n#}\n\n&lt;div {% attrs \n    class=\"avatar avatar-{{ size }}\"\n    class:avatar-clickable=clickable\n%}&gt;\n    &lt;!-- Component implementation --&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#undefined-variable-handling-jinja2","title":"Undefined Variable Handling (Jinja2)","text":"<p>When using Jinja2, components automatically handle undefined variables consistently, regardless of your Django debug settings:</p> <pre><code>{# props title, description=\"\" #}\n\n&lt;!-- \u2705 Undefined variables render as empty strings in components --&gt;\n&lt;div class=\"card {{ undefined_class }}\"&gt;  &lt;!-- Renders: class=\"card \" --&gt;\n    &lt;h3&gt;{{ title }}&lt;/h3&gt;                  &lt;!-- Works: passed as prop --&gt;\n    &lt;p&gt;{{ description }}&lt;/p&gt;              &lt;!-- Works: has default value --&gt;\n    &lt;span&gt;{{ missing_var }}&lt;/span&gt;        &lt;!-- Safe: renders empty string --&gt;\n&lt;/div&gt;\n</code></pre> <p>Key behaviors for Jinja2:</p> <ul> <li>Undefined variables render as empty strings in components (not literal <code>{{ variable_name }}</code>)</li> <li>Consistent with Django templates: Components behave the same way regardless of template engine</li> <li>Context isolation prevents parent template variables from leaking into components</li> <li>Only explicitly passed props are available in component templates</li> <li>Consistent behavior across development (<code>DEBUG=True</code>) and production (<code>DEBUG=False</code>)</li> </ul> <p>Django Templates</p> <p>Django template users will already experience this behavior since Django templates always render undefined variables as empty strings. This documentation is primarily for Jinja2 users who might expect <code>DebugUndefined</code> behavior in debug mode.</p> <pre><code>&lt;!-- \u274c Avoid: Relying on undefined variables --&gt;\n&lt;div class=\"{{ alignment }}\"&gt;  &lt;!-- Will be empty if not passed --&gt;\n    {{ content }}              &lt;!-- Will be empty if not passed --&gt;\n&lt;/div&gt;\n\n&lt;!-- \u2705 Good: Explicit props with defaults --&gt;\n{# props content, alignment=\"left\" #}\n&lt;div class=\"{{ alignment }}\"&gt;\n    {{ content }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#props-and-data-handling","title":"Props and Data Handling","text":""},{"location":"building-components/best-practices/#explicit-props","title":"Explicit Props","text":"<p>Always pass data explicitly rather than relying on context:</p> <pre><code>&lt;!-- \u2705 Good: Explicit props --&gt;\n&lt;include:user-card user=\"{{ user }}\" show_email=\"true\" /&gt;\n\n&lt;!-- \u274c Avoid: Implicit context dependency --&gt;\n&lt;include:user-card /&gt;  &lt;!-- Assumes 'user' is in context --&gt;\n</code></pre>"},{"location":"building-components/best-practices/#default-values","title":"Default Values","text":"<p>Provide sensible defaults for optional props:</p> <pre><code>{# props title, size=medium, variant=primary, disabled=false #}\n\n&lt;button {% attrs \n    class=\"btn btn-{{ size }} btn-{{ variant }}\"\n    class:btn-disabled=disabled\n    disabled|yesno=\"disabled,\"\n%}&gt;\n    {{ title }}\n&lt;/button&gt;\n</code></pre>"},{"location":"building-components/best-practices/#data-validation","title":"Data Validation","text":"<p>Use enum props for controlled values:</p> <pre><code>{# props\n   size - Button size: small, medium, large\n   variant - Button style: primary, secondary, danger\n#}\n\n{% if size not in \"small,medium,large\" %}\n    {% error \"Invalid size. Must be: small, medium, or large\" %}\n{% endif %}\n</code></pre>"},{"location":"building-components/best-practices/#security-best-practices","title":"Security Best Practices","text":""},{"location":"building-components/best-practices/#understanding-html-escaping","title":"Understanding HTML Escaping","text":"<p>Django IncludeContents follows Django's security model with automatic HTML escaping for user content while preserving developer intent for hard-coded strings.</p>"},{"location":"building-components/best-practices/#hard-coded-strings-safe-by-default","title":"Hard-coded Strings (Safe by Default)","text":"<p>Hard-coded strings in component syntax are NOT escaped because they represent trusted developer content:</p> <pre><code>&lt;!-- \u2705 Hard-coded strings: NOT escaped (trusted content) --&gt;\n&lt;include:button text=\"Don't worry\" title='Say \"hello\"' /&gt;\n&lt;!-- Renders: text=\"Don't worry\" title=\"Say \"hello\"\" --&gt;\n\n&lt;include:alert type=\"info\" message=\"User's account\" /&gt;\n&lt;!-- Renders: message=\"User's account\" --&gt;\n</code></pre> <p>This behavior is consistent across both Django templates and Jinja2.</p>"},{"location":"building-components/best-practices/#template-variables-escaped-for-security","title":"Template Variables (Escaped for Security)","text":"<p>Template variables are automatically escaped to prevent XSS attacks:</p> Django TemplatesJinja2 Templates <pre><code>&lt;!-- \u2705 Variables: ESCAPED (user content protection) --&gt;\n&lt;include:button text=\"{{ user_input }}\" /&gt;\n&lt;!-- If user_input = \"Don't worry\" --&gt;\n&lt;!-- Renders: text=\"Don&amp;#x27;t worry\" --&gt;\n\n&lt;include:message content=\"{{ malicious_script }}\" /&gt;\n&lt;!-- If malicious_script = \"&lt;script&gt;alert('xss')&lt;/script&gt;\" --&gt;\n&lt;!-- Renders: content=\"&amp;lt;script&amp;gt;alert(&amp;#x27;xss&amp;#x27;)&amp;lt;/script&amp;gt;\" --&gt;\n</code></pre> <pre><code>&lt;!-- \u2705 Variables: Handled by Jinja2's autoescape settings --&gt;\n&lt;include:button text=\"{{ user_input }}\" /&gt;\n&lt;!-- Escaping depends on your Jinja2 autoescape configuration --&gt;\n\n&lt;!-- For consistent escaping in Jinja2, use explicit escaping: --&gt;\n&lt;include:message content=\"{{ user_content|e }}\" /&gt;\n</code></pre>"},{"location":"building-components/best-practices/#why-this-design","title":"Why This Design?","text":"<p>This escaping strategy provides:</p> <ol> <li>Security: Protects against XSS attacks from user-provided content</li> <li>Developer Control: Preserves intentional quotes and special characters in code</li> <li>Consistency: Matches Django's conditional escaping behavior</li> <li>Predictability: Clear distinction between trusted and untrusted content</li> </ol>"},{"location":"building-components/best-practices/#safe-content-handling","title":"Safe Content Handling","text":"<p>When you need to include HTML content, use Django's <code>|safe</code> filter carefully:</p> <pre><code>&lt;!-- \u274c Dangerous: Never mark user input as safe --&gt;\n&lt;include:article content=\"{{ user_comment|safe }}\" /&gt;\n\n&lt;!-- \u2705 Safe: Only mark trusted, sanitized content as safe --&gt;\n&lt;include:article content=\"{{ article.body|markdown|safe }}\" /&gt;\n\n&lt;!-- \u2705 Better: Sanitize first, then mark safe --&gt;\n&lt;include:rich-text content=\"{{ user_content|bleach|safe }}\" /&gt;\n</code></pre>"},{"location":"building-components/best-practices/#component-input-validation","title":"Component Input Validation","text":"<p>Always validate component inputs, especially for security-critical attributes:</p> <pre><code>{# props user_role, content #}\n\n&lt;!-- \u2705 Validate security-critical props --&gt;\n{% if user_role not in \"admin,moderator,user\" %}\n    {% error \"Invalid user role\" %}\n{% endif %}\n\n&lt;!-- \u2705 Escape user content in data attributes --&gt;\n&lt;div {% attrs\n    class=\"content\"\n    data-user-role=\"{{ user_role }}\"\n    data-content=\"{{ content }}\"  {# Automatically escaped #}\n%}&gt;\n    {{ content }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#url-and-attribute-security","title":"URL and Attribute Security","text":"<p>Be careful with user-provided URLs and attributes:</p> <pre><code>&lt;!-- \u274c Dangerous: User-controlled URLs --&gt;\n&lt;include:link href=\"{{ user_url }}\" text=\"Click here\" /&gt;\n\n&lt;!-- \u2705 Safe: Validate and sanitize URLs --&gt;\n{% if user_url|is_safe_url %}\n    &lt;include:link href=\"{{ user_url }}\" text=\"Click here\" /&gt;\n{% else %}\n    &lt;include:link href=\"#\" text=\"Invalid link\" /&gt;\n{% endif %}\n\n&lt;!-- \u2705 Safe: Use allowlist for external domains --&gt;\n{% if user_url|url_domain in \"example.com,trusted-site.org\" %}\n    &lt;include:link href=\"{{ user_url }}\" text=\"External link\" /&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/best-practices/#csrf-protection","title":"CSRF Protection","text":"<p>Components automatically have access to CSRF tokens when available:</p> <pre><code>{# Component automatically receives csrf_token from parent context #}\n&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    &lt;include:form-field name=\"username\" value=\"{{ user.username }}\" /&gt;\n    &lt;include:submit-button text=\"Update Profile\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"building-components/best-practices/#content-security-policy-csp","title":"Content Security Policy (CSP)","text":"<p>Components work well with Content Security Policy:</p> <pre><code>&lt;!-- \u2705 Avoid inline JavaScript in components --&gt;\n&lt;include:interactive-button\n    data-action=\"submit\"\n    data-target=\"#form\"\n/&gt;\n\n&lt;!-- Use data attributes and external event handlers instead --&gt;\n&lt;script nonce=\"{{ csp_nonce }}\"&gt;\n    document.addEventListener('click', function(e) {\n        if (e.target.dataset.action === 'submit') {\n            handleSubmit(e.target.dataset.target);\n        }\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"building-components/best-practices/#component-patterns","title":"Component Patterns","text":""},{"location":"building-components/best-practices/#container-components","title":"Container Components","text":"<p>Components that manage layout and structure:</p> <pre><code>{# Container component: templates/components/modal.html #}\n{# props title, size=medium, closable=true #}\n\n&lt;div {% attrs class=\"modal modal-{{ size }}\" %}&gt;\n    &lt;div class=\"modal-content\"&gt;\n        {% if title %}\n            &lt;header class=\"modal-header\"&gt;\n                &lt;h2&gt;{{ title }}&lt;/h2&gt;\n                {% if closable %}\n                    &lt;button class=\"modal-close\"&gt;&amp;times;&lt;/button&gt;\n                {% endif %}\n            &lt;/header&gt;\n        {% endif %}\n\n        &lt;div class=\"modal-body\"&gt;\n            {{ contents }}\n        &lt;/div&gt;\n\n        {% if contents.footer %}\n            &lt;footer class=\"modal-footer\"&gt;\n                {{ contents.footer }}\n            &lt;/footer&gt;\n        {% endif %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#presentational-components","title":"Presentational Components","text":"<p>Pure display components with no side effects:</p> <pre><code>{# Presentational component: templates/components/price-display.html #}\n{# props amount, currency=USD, show_symbol=true #}\n\n&lt;span {% attrs class=\"price\" %}&gt;\n    {% if show_symbol %}\n        &lt;span class=\"currency-symbol\"&gt;\n            {% if currency == \"USD\" %}${% elif currency == \"EUR\" %}\u20ac{% endif %}\n        &lt;/span&gt;\n    {% endif %}\n    &lt;span class=\"amount\"&gt;{{ amount|floatformat:2 }}&lt;/span&gt;\n&lt;/span&gt;\n</code></pre>"},{"location":"building-components/best-practices/#conditional-components","title":"Conditional Components","text":"<p>Components that adapt based on props or context:</p> <pre><code>{# Conditional component: templates/components/user-greeting.html #}\n{# props user, show_avatar=true, show_status=false #}\n\n&lt;div class=\"user-greeting\"&gt;\n    {% if show_avatar %}\n        &lt;include:user-avatar user=\"{{ user }}\" size=\"small\" /&gt;\n    {% endif %}\n\n    &lt;div class=\"greeting-text\"&gt;\n        {% if user.is_authenticated %}\n            &lt;span&gt;Welcome back, {{ user.first_name }}!&lt;/span&gt;\n            {% if show_status and user.last_login %}\n                &lt;small&gt;Last seen {{ user.last_login|timesince }} ago&lt;/small&gt;\n            {% endif %}\n        {% else %}\n            &lt;span&gt;Welcome, Guest!&lt;/span&gt;\n        {% endif %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"building-components/best-practices/#template-caching","title":"Template Caching","text":"<p>Components benefit from Django's template caching:</p> <pre><code># settings.py\nTEMPLATES = [{\n    'BACKEND': 'includecontents.django.Engine',\n    'OPTIONS': {\n        'loaders': [\n            ('django.template.loaders.cached.Loader', [\n                'django.template.loaders.filesystem.Loader',\n                'django.template.loaders.app_directories.Loader',\n            ]),\n        ],\n    },\n}]\n</code></pre>"},{"location":"building-components/best-practices/#avoid-heavy-logic","title":"Avoid Heavy Logic","text":"<p>Keep components lightweight by avoiding heavy computation:</p> <pre><code>&lt;!-- \u2705 Good: Simple display logic --&gt;\n&lt;div class=\"product-price\"&gt;\n    &lt;span class=\"original-price\"&gt;${{ product.original_price }}&lt;/span&gt;\n    &lt;span class=\"sale-price\"&gt;${{ product.sale_price }}&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;!-- \u274c Avoid: Heavy computation in templates --&gt;\n&lt;div class=\"product-analytics\"&gt;\n    &lt;!-- Don't calculate complex metrics in templates --&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#lazy-loading-content","title":"Lazy Loading Content","text":"<p>Use conditional rendering for expensive content:</p> <pre><code>{# props user, load_recent_activity=false #}\n\n&lt;div class=\"user-profile\"&gt;\n    &lt;include:user-avatar user=\"{{ user }}\" /&gt;\n    &lt;h2&gt;{{ user.get_full_name }}&lt;/h2&gt;\n\n    {% if load_recent_activity %}\n        &lt;include:recent-activity user=\"{{ user }}\" /&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#testing-components","title":"Testing Components","text":""},{"location":"building-components/best-practices/#component-testing","title":"Component Testing","text":"<p>Test components in isolation:</p> <pre><code># tests/test_components.py\nfrom django.template.loader import render_to_string\nfrom django.test import TestCase\n\nclass ComponentTests(TestCase):\n    def test_user_avatar_with_image(self):\n        user = User.objects.create(\n            username='testuser',\n            first_name='John',\n            last_name='Doe'\n        )\n\n        result = render_to_string('components/user-avatar.html', {\n            'user': user,\n            'size': 'large',\n            'show_status': True\n        })\n\n        self.assertIn('avatar-large', result)\n        self.assertIn('John Doe', result)\n</code></pre>"},{"location":"building-components/best-practices/#integration-testing","title":"Integration Testing","text":"<p>Test component usage in real templates:</p> <pre><code>def test_article_page_with_components(self):\n    response = self.client.get('/articles/1/')\n    self.assertContains(response, 'class=\"article-card\"')\n    self.assertContains(response, 'class=\"user-avatar\"')\n</code></pre>"},{"location":"building-components/best-practices/#documentation","title":"Documentation","text":""},{"location":"building-components/best-practices/#component-documentation","title":"Component Documentation","text":"<p>Document your components clearly:</p> <pre><code>{# templates/components/notification-banner.html\n\n   A banner component for displaying notifications to users.\n\n   Props:\n   - message (required): The notification message to display\n   - type: Notification type (info, success, warning, error) - default: info\n   - dismissible: Whether the banner can be dismissed - default: true\n   - icon: Show an icon with the message - default: true\n\n   Example usage:\n   &lt;include:notification-banner \n       message=\"Your changes have been saved!\"\n       type=\"success\"\n       dismissible=\"true\" /&gt;\n#}\n\n{# props message, type=info, dismissible=true, icon=true #}\n\n&lt;div {% attrs \n    class=\"notification-banner notification-{{ type }}\"\n    class:dismissible=dismissible\n%}&gt;\n    {% if icon %}\n        &lt;include:notification-icon type=\"{{ type }}\" /&gt;\n    {% endif %}\n\n    &lt;span class=\"message\"&gt;{{ message }}&lt;/span&gt;\n\n    {% if dismissible %}\n        &lt;button class=\"dismiss-btn\"&gt;&amp;times;&lt;/button&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/best-practices/#style-guide","title":"Style Guide","text":"<p>Maintain a component style guide:</p> <pre><code># Component Style Guide\n\n## Button Component\n\n### Variants\n- Primary: `&lt;include:button variant=\"primary\"&gt;Save&lt;/include:button&gt;`\n- Secondary: `&lt;include:button variant=\"secondary\"&gt;Cancel&lt;/include:button&gt;`\n- Danger: `&lt;include:button variant=\"danger\"&gt;Delete&lt;/include:button&gt;`\n\n### Sizes\n- Small: `&lt;include:button size=\"small\"&gt;OK&lt;/include:button&gt;`\n- Medium: `&lt;include:button size=\"medium\"&gt;Submit&lt;/include:button&gt;`\n- Large: `&lt;include:button size=\"large\"&gt;Get Started&lt;/include:button&gt;`\n</code></pre>"},{"location":"building-components/best-practices/#migration-and-refactoring","title":"Migration and Refactoring","text":""},{"location":"building-components/best-practices/#gradual-migration","title":"Gradual Migration","text":"<p>Migrate to components gradually:</p> <ol> <li>Identify patterns: Find repeated template code</li> <li>Extract components: Create components for common patterns</li> <li>Replace incrementally: Update templates one at a time</li> <li>Test thoroughly: Ensure behavior remains consistent</li> </ol>"},{"location":"building-components/best-practices/#refactoring-large-components","title":"Refactoring Large Components","text":"<p>Break down large components:</p> <pre><code>&lt;!-- Before: Large monolithic component --&gt;\n&lt;include:user-dashboard user=\"{{ user }}\" /&gt;\n\n&lt;!-- After: Composed from smaller components --&gt;\n&lt;include:dashboard-layout&gt;\n    &lt;content:header&gt;\n        &lt;include:user-profile user=\"{{ user }}\" /&gt;\n    &lt;/content:header&gt;\n\n    &lt;include:activity-feed user=\"{{ user }}\" /&gt;\n    &lt;include:quick-actions user=\"{{ user }}\" /&gt;\n\n    &lt;content:sidebar&gt;\n        &lt;include:user-stats user=\"{{ user }}\" /&gt;\n        &lt;include:recent-notifications user=\"{{ user }}\" /&gt;\n    &lt;/content:sidebar&gt;\n&lt;/include:dashboard-layout&gt;\n</code></pre>"},{"location":"building-components/best-practices/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"building-components/best-practices/#avoid-these-mistakes","title":"Avoid These Mistakes","text":"<ol> <li>Over-nesting: Don't create components that are too deeply nested</li> <li>God Components: Avoid components that do too many things</li> <li>Tight Coupling: Don't make components depend on specific context</li> <li>Inconsistent Naming: Stick to established naming conventions</li> <li>Missing Documentation: Always document complex components</li> </ol>"},{"location":"building-components/best-practices/#debug-common-issues","title":"Debug Common Issues","text":"<ol> <li>Missing Props: Use <code>{# props #}</code> comments to catch missing attributes</li> <li>Context Issues: Remember that components have isolated context</li> <li>Performance: Profile template rendering if components are slow</li> </ol>"},{"location":"building-components/best-practices/#next-steps","title":"Next Steps","text":"<ul> <li>Learn component patterns for advanced architectures</li> <li>Explore CSS styling for component styling</li> <li>Check the API reference for complete documentation</li> </ul>"},{"location":"building-components/component-patterns/","title":"Component Patterns","text":"<p>Real-world patterns and best practices for building maintainable, reusable components with Django IncludeContents.</p>"},{"location":"building-components/component-patterns/#component-design-patterns","title":"Component Design Patterns","text":""},{"location":"building-components/component-patterns/#dynamic-templates","title":"Dynamic Templates","text":"<p>Components can dynamically choose which template to render based on props:</p> <pre><code>{# props template_type=card,list,grid, item #}\n{% if template_type == \"card\" %}\n    {% includecontents \"components/item-card.html\" item=item %}\n        {{ contents }}\n    {% endincludecontents %}\n{% elif template_type == \"list\" %}\n    {% includecontents \"components/item-list.html\" item=item %}\n        {{ contents }}\n    {% endincludecontents %}\n{% elif template_type == \"grid\" %}\n    {% includecontents \"components/item-grid.html\" item=item %}\n        {{ contents }}\n    {% endincludecontents %}\n{% endif %}\n</code></pre>"},{"location":"building-components/component-patterns/#conditional-components","title":"Conditional Components","text":"<p>Render components only when certain conditions are met:</p> <pre><code>{# props user, show_admin=False #}\n&lt;div class=\"user-profile\"&gt;\n    &lt;include:user-avatar user=\"{{ user }}\" /&gt;\n\n    {% if show_admin and user.is_staff %}\n        &lt;include:admin-panel user=\"{{ user }}\" /&gt;\n    {% endif %}\n\n    {% if user.is_premium %}\n        &lt;include:premium-badge /&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/component-patterns/#component-design-patterns_1","title":"Component Design Patterns","text":""},{"location":"building-components/component-patterns/#container-components","title":"Container Components","text":"<p>Components that provide layout structure and manage child components:</p> <p>templates/components/page-layout.html <pre><code>{# props title, breadcrumbs=[] #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{ title }} - My Site&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;nav&gt;\n            {% if breadcrumbs %}\n                &lt;ol class=\"breadcrumb\"&gt;\n                    {% for crumb in breadcrumbs %}\n                        &lt;li&gt;&lt;a href=\"{{ crumb.url }}\"&gt;{{ crumb.title }}&lt;/a&gt;&lt;/li&gt;\n                    {% endfor %}\n                &lt;/ol&gt;\n            {% endif %}\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;main&gt;\n        {% if contents.header %}\n            &lt;div class=\"page-header\"&gt;\n                {{ contents.header }}\n            &lt;/div&gt;\n        {% endif %}\n\n        &lt;div class=\"page-content\"&gt;\n            {{ contents }}\n        &lt;/div&gt;\n\n        {% if contents.sidebar %}\n            &lt;aside class=\"sidebar\"&gt;\n                {{ contents.sidebar }}\n            &lt;/aside&gt;\n        {% endif %}\n    &lt;/main&gt;\n\n    {% if contents.footer %}\n        &lt;footer&gt;\n            {{ contents.footer }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:page-layout title=\"Dashboard\" breadcrumbs=\"{{ breadcrumbs }}\"&gt;\n    &lt;content:header&gt;\n        &lt;h1&gt;Welcome to Dashboard&lt;/h1&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;Main dashboard content...&lt;/p&gt;\n\n    &lt;content:sidebar&gt;\n        &lt;include:navigation-menu items=\"{{ menu_items }}\" /&gt;\n    &lt;/content:sidebar&gt;\n&lt;/include:page-layout&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#presentational-components","title":"Presentational Components","text":"<p>Pure display components that receive all data via props:</p> <p>templates/components/user-avatar.html <pre><code>{# props user, size=medium,small,large, show_status=False #}\n&lt;div {% attrs \n    class=\"avatar\"\n    class:avatar-small=sizeSmall\n    class:avatar-medium=sizeMedium\n    class:avatar-large=sizeLarge\n%}&gt;\n    {% if user.avatar %}\n        &lt;img src=\"{{ user.avatar.url }}\" alt=\"{{ user.get_full_name }}\"&gt;\n    {% else %}\n        &lt;div class=\"avatar-placeholder\"&gt;\n            {{ user.first_name.0|upper }}{{ user.last_name.0|upper }}\n        &lt;/div&gt;\n    {% endif %}\n\n    {% if show_status and user.is_online %}\n        &lt;span class=\"status-indicator online\"&gt;&lt;/span&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#composite-components","title":"Composite Components","text":"<p>Components that combine multiple smaller components:</p> <p>templates/components/article-card.html <pre><code>{# props article, show_excerpt=True, show_meta=True, show_actions=False #}\n&lt;article {% attrs class=\"card article-card\" %}&gt;\n    {% if article.featured_image %}\n        &lt;div class=\"card-image\"&gt;\n            &lt;img src=\"{{ article.featured_image.url }}\" alt=\"{{ article.title }}\"&gt;\n        &lt;/div&gt;\n    {% endif %}\n\n    &lt;div class=\"card-content\"&gt;\n        &lt;header class=\"article-header\"&gt;\n            &lt;h2&gt;&lt;a href=\"{{ article.get_absolute_url }}\"&gt;{{ article.title }}&lt;/a&gt;&lt;/h2&gt;\n\n            {% if show_meta %}\n                &lt;div class=\"article-meta\"&gt;\n                    &lt;include:user-avatar \n                        user=\"{{ article.author }}\" \n                        size=\"small\" \n                    /&gt;\n                    &lt;span class=\"author\"&gt;{{ article.author.get_full_name }}&lt;/span&gt;\n                    &lt;time datetime=\"{{ article.published_at|date:'c' }}\"&gt;\n                        {{ article.published_at|date:\"M d, Y\" }}\n                    &lt;/time&gt;\n                &lt;/div&gt;\n            {% endif %}\n        &lt;/header&gt;\n\n        {% if show_excerpt and article.excerpt %}\n            &lt;div class=\"article-excerpt\"&gt;\n                {{ article.excerpt|truncatewords:30 }}\n            &lt;/div&gt;\n        {% endif %}\n\n        {% if article.tags.exists %}\n            &lt;div class=\"article-tags\"&gt;\n                {% for tag in article.tags.all %}\n                    &lt;include:tag name=\"{{ tag.name }}\" url=\"{{ tag.get_absolute_url }}\" /&gt;\n                {% endfor %}\n            &lt;/div&gt;\n        {% endif %}\n    &lt;/div&gt;\n\n    {% if show_actions %}\n        &lt;footer class=\"card-actions\"&gt;\n            {{ contents.actions }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/article&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#form-components","title":"Form Components","text":""},{"location":"building-components/component-patterns/#field-components","title":"Field Components","text":"<p>templates/components/forms/text-field.html <pre><code>{# props \n    name, \n    label=\"\", \n    type=text,email,password,tel,url,\n    required=False,\n    placeholder=\"\",\n    help_text=\"\",\n    value=\"\",\n    errors=[]\n#}\n&lt;div {% attrs \n    class=\"form-group\"\n    class:has-error=errors\n%}&gt;\n    {% if label %}\n        &lt;label for=\"{{ name }}\" class=\"form-label\"&gt;\n            {{ label }}\n            {% if required %}&lt;span class=\"required\" aria-label=\"required\"&gt;*&lt;/span&gt;{% endif %}\n        &lt;/label&gt;\n    {% endif %}\n\n    &lt;input {% attrs.input\n        type=type\n        name=name\n        id=name\n        value=value\n        placeholder=placeholder\n        required=required\n        class=\"form-control\"\n        class:is-invalid=errors\n        aria-describedby=\"{{ name }}-help {{ name }}-errors\"\n    %}&gt;\n\n    {% if help_text %}\n        &lt;small id=\"{{ name }}-help\" class=\"form-help\"&gt;{{ help_text }}&lt;/small&gt;\n    {% endif %}\n\n    {% if errors %}\n        &lt;div id=\"{{ name }}-errors\" class=\"invalid-feedback\"&gt;\n            {% for error in errors %}\n                &lt;div&gt;{{ error }}&lt;/div&gt;\n            {% endfor %}\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#form-integration","title":"Form Integration","text":"<p>templates/components/forms/django-field.html <pre><code>{# props field, show_label=True, show_help=True #}\n&lt;include:forms:text-field\n    name=\"{{ field.name }}\"\n    label=\"{% if show_label %}{{ field.label }}{% endif %}\"\n    type=\"{{ field.widget.input_type|default:'text' }}\"\n    required=\"{{ field.field.required }}\"\n    value=\"{{ field.value|default:'' }}\"\n    help_text=\"{% if show_help %}{{ field.help_text }}{% endif %}\"\n    errors=\"{{ field.errors }}\"\n    placeholder=\"{{ field.field.widget.attrs.placeholder|default:'' }}\"\n    {# Pass through any additional attributes #}\n    {% for attr, value in field.field.widget.attrs.items %}\n        {% if attr != 'placeholder' %}{{ attr }}=\"{{ value }}\"{% endif %}\n    {% endfor %}\n/&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#data-display-patterns","title":"Data Display Patterns","text":""},{"location":"building-components/component-patterns/#table-components","title":"Table Components","text":"<p>templates/components/data-table.html <pre><code>{# props items=[], columns=[], actions=[], empty_message=\"No data available\" #}\n&lt;div {% attrs class=\"table-container\" %}&gt;\n    {% if items %}\n        &lt;table class=\"table\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    {% for column in columns %}\n                        &lt;th {% if column.sortable %}class=\"sortable\"{% endif %}&gt;\n                            {{ column.label }}\n                        &lt;/th&gt;\n                    {% endfor %}\n                    {% if actions %}\n                        &lt;th class=\"actions-column\"&gt;Actions&lt;/th&gt;\n                    {% endif %}\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                {% for item in items %}\n                    &lt;tr&gt;\n                        {% for column in columns %}\n                            &lt;td&gt;\n                                {% if column.template %}\n                                    {% include column.template with item=item %}\n                                {% else %}\n                                    {{ item|lookup:column.field|default:\"-\" }}\n                                {% endif %}\n                            &lt;/td&gt;\n                        {% endfor %}\n                        {% if actions %}\n                            &lt;td class=\"actions\"&gt;\n                                {% for action in actions %}\n                                    &lt;include:button\n                                        variant=\"{{ action.variant|default:'secondary' }}\"\n                                        size=\"small\"\n                                        href=\"{{ action.url_pattern|format:item.pk }}\"\n                                    &gt;\n                                        {{ action.label }}\n                                    &lt;/include:button&gt;\n                                {% endfor %}\n                            &lt;/td&gt;\n                        {% endif %}\n                    &lt;/tr&gt;\n                {% endfor %}\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    {% else %}\n        &lt;div class=\"empty-state\"&gt;\n            &lt;p&gt;{{ empty_message }}&lt;/p&gt;\n            {{ contents.empty }}\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#list-components","title":"List Components","text":"<p>templates/components/article-list.html <pre><code>{# props articles, show_featured=True, layout=grid,list #}\n&lt;div {% attrs \n    class=\"article-list\"\n    class:layout-grid=layoutGrid\n    class:layout-list=layoutList\n%}&gt;\n    {% if show_featured %}\n        {% with featured_articles=articles|filter_featured|slice:\":3\" %}\n            {% if featured_articles %}\n                &lt;section class=\"featured-articles\"&gt;\n                    &lt;h2&gt;Featured Articles&lt;/h2&gt;\n                    &lt;div class=\"featured-grid\"&gt;\n                        {% for article in featured_articles %}\n                            &lt;include:article-card \n                                article=\"{{ article }}\"\n                                show_excerpt=\"true\"\n                                show_meta=\"true\"\n                                class=\"featured-card\"\n                            /&gt;\n                        {% endfor %}\n                    &lt;/div&gt;\n                &lt;/section&gt;\n            {% endif %}\n        {% endwith %}\n    {% endif %}\n\n    {% with regular_articles=articles|exclude_featured %}\n        {% if regular_articles %}\n            &lt;section class=\"regular-articles\"&gt;\n                {% if show_featured %}&lt;h2&gt;Latest Articles&lt;/h2&gt;{% endif %}\n                &lt;div class=\"article-grid\"&gt;\n                    {% for article in regular_articles %}\n                        &lt;include:article-card \n                            article=\"{{ article }}\"\n                            show_excerpt=\"true\"\n                            show_meta=\"true\"\n                        /&gt;\n                    {% endfor %}\n                &lt;/div&gt;\n            &lt;/section&gt;\n        {% endif %}\n    {% endwith %}\n\n    {% if not articles %}\n        &lt;div class=\"empty-state\"&gt;\n            {{ contents.empty }}\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#navigation-patterns","title":"Navigation Patterns","text":""},{"location":"building-components/component-patterns/#menu-components","title":"Menu Components","text":"<p>templates/components/navigation/menu.html <pre><code>{# props items=[], orientation=horizontal,vertical, current_url=\"\" #}\n&lt;nav {% attrs \n    class=\"menu\"\n    class:menu-horizontal=orientationHorizontal\n    class:menu-vertical=orientationVertical\n%}&gt;\n    &lt;ul class=\"menu-list\"&gt;\n        {% for item in items %}\n            &lt;li class=\"menu-item\"&gt;\n                {% if item.children %}\n                    &lt;details class=\"submenu\"&gt;\n                        &lt;summary class=\"menu-link\"&gt;\n                            {{ item.title }}\n                            &lt;span class=\"menu-indicator\"&gt;\u25bc&lt;/span&gt;\n                        &lt;/summary&gt;\n                        &lt;include:navigation:menu \n                            items=\"{{ item.children }}\"\n                            orientation=\"vertical\"\n                            current_url=\"{{ current_url }}\"\n                            class=\"submenu-list\"\n                        /&gt;\n                    &lt;/details&gt;\n                {% else %}\n                    &lt;a href=\"{{ item.url }}\" \n                       class=\"menu-link {% if item.url == current_url %}active{% endif %}\"\n                       {% if item.external %}target=\"_blank\" rel=\"noopener\"{% endif %}&gt;\n                        {% if item.icon %}\n                            &lt;include:icon name=\"{{ item.icon }}\" size=\"16\" /&gt;\n                        {% endif %}\n                        {{ item.title }}\n                    &lt;/a&gt;\n                {% endif %}\n            &lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#breadcrumb-components","title":"Breadcrumb Components","text":"<p>templates/components/navigation/breadcrumbs.html <pre><code>{# props items=[], separator=\"/\" #}\n{% if items %}\n    &lt;nav {% attrs class=\"breadcrumb\" %} aria-label=\"Breadcrumb\"&gt;\n        &lt;ol class=\"breadcrumb-list\"&gt;\n            {% for item in items %}\n                &lt;li class=\"breadcrumb-item {% if forloop.last %}current{% endif %}\"&gt;\n                    {% if not forloop.last %}\n                        &lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;\n                        &lt;span class=\"breadcrumb-separator\" aria-hidden=\"true\"&gt;{{ separator }}&lt;/span&gt;\n                    {% else %}\n                        &lt;span aria-current=\"page\"&gt;{{ item.title }}&lt;/span&gt;\n                    {% endif %}\n                &lt;/li&gt;\n            {% endfor %}\n        &lt;/ol&gt;\n    &lt;/nav&gt;\n{% endif %}\n</code></pre></p>"},{"location":"building-components/component-patterns/#modal-and-dialog-patterns","title":"Modal and Dialog Patterns","text":""},{"location":"building-components/component-patterns/#modal-components","title":"Modal Components","text":"<p>templates/components/ui/modal.html <pre><code>{# props id, title=\"\", size=medium,small,large,fullscreen, closable=True #}\n&lt;div {% attrs \n    class=\"modal fade\"\n    class:modal-sm=sizeSmall\n    class:modal-lg=sizeLarge\n    class:modal-xl=sizeFullscreen\n    id=id\n    tabindex=\"-1\"\n    aria-labelledby=\"{{ id }}-title\"\n    aria-hidden=\"true\"\n%}&gt;\n    &lt;div class=\"modal-dialog\"&gt;\n        &lt;div class=\"modal-content\"&gt;\n            {% if title or closable %}\n                &lt;header class=\"modal-header\"&gt;\n                    {% if title %}\n                        &lt;h2 id=\"{{ id }}-title\" class=\"modal-title\"&gt;{{ title }}&lt;/h2&gt;\n                    {% endif %}\n                    {% if closable %}\n                        &lt;button type=\"button\" \n                                class=\"modal-close\" \n                                data-bs-dismiss=\"modal\" \n                                aria-label=\"Close\"&gt;\n                            &lt;span aria-hidden=\"true\"&gt;&amp;times;&lt;/span&gt;\n                        &lt;/button&gt;\n                    {% endif %}\n                &lt;/header&gt;\n            {% endif %}\n\n            &lt;div class=\"modal-body\"&gt;\n                {{ contents }}\n            &lt;/div&gt;\n\n            {% if contents.footer %}\n                &lt;footer class=\"modal-footer\"&gt;\n                    {{ contents.footer }}\n                &lt;/footer&gt;\n            {% endif %}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:ui:modal id=\"confirm-delete\" title=\"Confirm Deletion\" size=\"small\"&gt;\n    &lt;p&gt;Are you sure you want to delete this item? This action cannot be undone.&lt;/p&gt;\n\n    &lt;content:footer&gt;\n        &lt;include:button variant=\"secondary\" data-bs-dismiss=\"modal\"&gt;\n            Cancel\n        &lt;/include:button&gt;\n        &lt;include:button variant=\"danger\" id=\"confirm-delete-btn\"&gt;\n            Delete\n        &lt;/include:button&gt;\n    &lt;/content:footer&gt;\n&lt;/include:ui:modal&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#responsive-patterns","title":"Responsive Patterns","text":""},{"location":"building-components/component-patterns/#responsive-grid","title":"Responsive Grid","text":"<p>templates/components/layout/responsive-grid.html <pre><code>{# props \n    cols_xs=1, cols_sm=2, cols_md=3, cols_lg=4, cols_xl=6,\n    gap=medium,small,large,\n    items=[]\n#}\n&lt;div {% attrs \n    class=\"responsive-grid\"\n    class:gap-small=gapSmall\n    class:gap-medium=gapMedium\n    class:gap-large=gapLarge\n    style=\"--cols-xs: {{ cols_xs }}; --cols-sm: {{ cols_sm }}; --cols-md: {{ cols_md }}; --cols-lg: {{ cols_lg }}; --cols-xl: {{ cols_xl }};\"\n%}&gt;\n    {% if items %}\n        {% for item in items %}\n            &lt;div class=\"grid-item\"&gt;\n                {{ contents.item }}\n            &lt;/div&gt;\n        {% endfor %}\n    {% else %}\n        {{ contents }}\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p> <p>CSS: <pre><code>.responsive-grid {\n    display: grid;\n    grid-template-columns: repeat(var(--cols-xs), 1fr);\n}\n\n@media (min-width: 576px) {\n    .responsive-grid {\n        grid-template-columns: repeat(var(--cols-sm), 1fr);\n    }\n}\n\n@media (min-width: 768px) {\n    .responsive-grid {\n        grid-template-columns: repeat(var(--cols-md), 1fr);\n    }\n}\n\n@media (min-width: 992px) {\n    .responsive-grid {\n        grid-template-columns: repeat(var(--cols-lg), 1fr);\n    }\n}\n\n@media (min-width: 1200px) {\n    .responsive-grid {\n        grid-template-columns: repeat(var(--cols-xl), 1fr);\n    }\n}\n</code></pre></p>"},{"location":"building-components/component-patterns/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"building-components/component-patterns/#error-boundary-components","title":"Error Boundary Components","text":"<p>templates/components/ui/error-boundary.html <pre><code>{# props title=\"Something went wrong\", show_details=False, error=None #}\n&lt;div {% attrs class=\"error-boundary\" %}&gt;\n    &lt;div class=\"error-content\"&gt;\n        &lt;h2 class=\"error-title\"&gt;{{ title }}&lt;/h2&gt;\n\n        {{ contents }}\n\n        {% if show_details and error %}\n            &lt;details class=\"error-details\"&gt;\n                &lt;summary&gt;Technical Details&lt;/summary&gt;\n                &lt;pre&gt;&lt;code&gt;{{ error }}&lt;/code&gt;&lt;/pre&gt;\n            &lt;/details&gt;\n        {% endif %}\n\n        {% if contents.actions %}\n            &lt;div class=\"error-actions\"&gt;\n                {{ contents.actions }}\n            &lt;/div&gt;\n        {% endif %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#conditional-components_1","title":"Conditional Components","text":"<p>templates/components/ui/conditional.html <pre><code>{# props condition, fallback=\"\" #}\n{% if condition %}\n    {{ contents }}\n{% else %}\n    {% if fallback %}\n        {{ fallback }}\n    {% elif contents.fallback %}\n        {{ contents.fallback }}\n    {% endif %}\n{% endif %}\n</code></pre></p> <p>Usage: <pre><code>&lt;include:ui:conditional condition=\"{{ user.is_authenticated }}\"&gt;\n    &lt;p&gt;Welcome back, {{ user.name }}!&lt;/p&gt;\n\n    &lt;content:fallback&gt;\n        &lt;p&gt;&lt;a href=\"{% url 'login' %}\"&gt;Please log in&lt;/a&gt;&lt;/p&gt;\n    &lt;/content:fallback&gt;\n&lt;/include:ui:conditional&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#performance-patterns","title":"Performance Patterns","text":""},{"location":"building-components/component-patterns/#lazy-loading-components","title":"Lazy Loading Components","text":"<p>templates/components/ui/lazy-load.html <pre><code>{# props src=\"\", placeholder=\"Loading...\", threshold=\"0.1\" #}\n&lt;div {% attrs \n    class=\"lazy-container\"\n    data-src=src\n    data-threshold=threshold\n%}&gt;\n    &lt;div class=\"lazy-placeholder\"&gt;\n        {{ placeholder }}\n    &lt;/div&gt;\n    &lt;div class=\"lazy-content\" style=\"display: none;\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\ndocument.addEventListener('DOMContentLoaded', function() {\n    const observer = new IntersectionObserver((entries) =&gt; {\n        entries.forEach(entry =&gt; {\n            if (entry.isIntersecting) {\n                const container = entry.target;\n                const placeholder = container.querySelector('.lazy-placeholder');\n                const content = container.querySelector('.lazy-content');\n\n                placeholder.style.display = 'none';\n                content.style.display = 'block';\n\n                observer.unobserve(container);\n            }\n        });\n    }, { threshold: parseFloat(container.dataset.threshold) });\n\n    document.querySelectorAll('.lazy-container').forEach(container =&gt; {\n        observer.observe(container);\n    });\n});\n&lt;/script&gt;\n</code></pre></p>"},{"location":"building-components/component-patterns/#cached-components","title":"Cached Components","text":"<p>Use Django's template fragment caching:</p> <pre><code>{# props cache_key, cache_timeout=3600 #}\n{% load cache %}\n{% cache cache_timeout cache_key %}\n    {{ contents }}\n{% endcache %}\n</code></pre>"},{"location":"building-components/component-patterns/#testing-patterns","title":"Testing Patterns","text":""},{"location":"building-components/component-patterns/#component-testing","title":"Component Testing","text":"<pre><code>from django.test import TestCase\nfrom django.template import Template, Context\n\nclass ComponentTestCase(TestCase):\n    def render_component(self, template_string, context=None):\n        \"\"\"Helper to render component templates\"\"\"\n        template = Template(template_string)\n        return template.render(Context(context or {}))\n\n    def test_button_component(self):\n        html = self.render_component(\n            '&lt;include:button variant=\"primary\"&gt;Click me&lt;/include:button&gt;'\n        )\n        self.assertIn('btn btn-primary', html)\n        self.assertIn('Click me', html)\n\n    def test_required_props(self):\n        with self.assertRaises(TemplateSyntaxError):\n            self.render_component('&lt;include:card&gt;No title&lt;/include:card&gt;')\n</code></pre>"},{"location":"building-components/component-patterns/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"building-components/component-patterns/#1-component-composition","title":"1. Component Composition","text":"<pre><code>&lt;!-- \u2705 Good: Compose from smaller components --&gt;\n&lt;include:article-card article=\"{{ article }}\"&gt;\n    &lt;content:actions&gt;\n        &lt;include:button variant=\"primary\" href=\"{{ article.edit_url }}\"&gt;\n            Edit\n        &lt;/include:button&gt;\n        &lt;include:button variant=\"danger\" data-confirm=\"true\"&gt;\n            Delete\n        &lt;/include:button&gt;\n    &lt;/content:actions&gt;\n&lt;/include:article-card&gt;\n</code></pre>"},{"location":"building-components/component-patterns/#2-props-validation","title":"2. Props Validation","text":"<pre><code>&lt;!-- \u2705 Good: Clear prop requirements --&gt;\n{# props article, show_actions=False #}\n{% if not article %}\n    &lt;div class=\"error\"&gt;Article is required&lt;/div&gt;\n{% else %}\n    &lt;!-- Component content --&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/component-patterns/#3-consistent-naming","title":"3. Consistent Naming","text":"<pre><code>&lt;!-- \u2705 Good: Consistent naming patterns --&gt;\n&lt;include:forms:text-field /&gt;\n&lt;include:forms:email-field /&gt;\n&lt;include:forms:select-field /&gt;\n\n&lt;!-- \u274c Avoid: Inconsistent naming --&gt;\n&lt;include:text-input /&gt;\n&lt;include:email-field /&gt;\n&lt;include:dropdown /&gt;\n</code></pre>"},{"location":"building-components/component-patterns/#4-documentation","title":"4. Documentation","text":"<p>Document component APIs clearly:</p> <pre><code>{#\nComponent: Article Card\nPurpose: Display article summary with optional actions\nProps:\n  - article (required): Article object with title, excerpt, author\n  - show_excerpt (optional, default=True): Whether to show article excerpt\n  - show_meta (optional, default=True): Whether to show author and date\n  - show_actions (optional, default=False): Whether to show action buttons\nContent blocks:\n  - actions: Action buttons (only shown if show_actions=True)\nExample:\n  &lt;include:article-card article=\"{{ article }}\" show_actions=\"true\"&gt;\n    &lt;content:actions&gt;\n      &lt;include:button href=\"/edit/\"&gt;Edit&lt;/include:button&gt;\n    &lt;/content:actions&gt;\n  &lt;/include:article-card&gt;\n#}\n</code></pre>"},{"location":"building-components/component-patterns/#next-steps","title":"Next Steps","text":"<ul> <li>Review CSS Classes for styling patterns</li> <li>Check Integration Guides for development setup</li> <li>Explore the API Reference for complete syntax details</li> </ul>"},{"location":"building-components/css-and-styling/","title":"CSS Classes","text":"<p>Advanced CSS class management features including conditional classes, class extension, and utilities for building flexible, styled components.</p>"},{"location":"building-components/css-and-styling/#basic-class-handling","title":"Basic Class Handling","text":""},{"location":"building-components/css-and-styling/#default-classes","title":"Default Classes","text":"<p>Set default classes that can be overridden:</p> <pre><code>{# props #}\n&lt;div {% attrs class=\"card border rounded p-4\" %}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:card&gt;Default styling&lt;/include:card&gt;\n&lt;!-- Output: &lt;div class=\"card border rounded p-4\"&gt; --&gt;\n\n&lt;include:card class=\"my-custom-card\"&gt;Custom styling&lt;/include:card&gt;\n&lt;!-- Output: &lt;div class=\"my-custom-card\"&gt; --&gt;\n</code></pre></p>"},{"location":"building-components/css-and-styling/#class-extension","title":"Class Extension","text":""},{"location":"building-components/css-and-styling/#appending-classes","title":"Appending Classes","text":"<p>Use <code>\"&amp; \"</code> prefix to append classes after user-provided classes:</p> <pre><code>{# props #}\n&lt;button {% attrs class=\"&amp; btn btn-default\" %}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:button class=\"my-button\"&gt;Click me&lt;/include:button&gt;\n&lt;!-- Output: &lt;button class=\"my-button btn btn-default\"&gt; --&gt;\n</code></pre></p>"},{"location":"building-components/css-and-styling/#prepending-classes","title":"Prepending Classes","text":"<p>Use <code>\" &amp;\"</code> suffix to prepend classes before user-provided classes:</p> <pre><code>{# props #}\n&lt;div {% attrs class=\"container &amp;\" %}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:wrapper class=\"my-content\"&gt;Content&lt;/include:wrapper&gt;\n&lt;!-- Output: &lt;div class=\"container my-content\"&gt; --&gt;\n</code></pre></p>"},{"location":"building-components/css-and-styling/#combining-extension-methods","title":"Combining Extension Methods","text":"<pre><code>{# props #}\n&lt;article {% attrs class=\"prose &amp;\" class=\"&amp; max-w-none\" %}&gt;\n    {{ contents }}\n&lt;/article&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:article class=\"dark:prose-invert\"&gt;Article content&lt;/include:article&gt;\n&lt;!-- Output: &lt;article class=\"prose dark:prose-invert max-w-none\"&gt; --&gt;\n</code></pre></p>"},{"location":"building-components/css-and-styling/#conditional-classes","title":"Conditional Classes","text":""},{"location":"building-components/css-and-styling/#basic-conditional-classes","title":"Basic Conditional Classes","text":"<p>Use the <code>class:</code> prefix for conditional classes based on component props:</p> <pre><code>{# props active=False, disabled=False #}\n&lt;button {% attrs \n    class=\"btn\"\n    class:btn-active=active\n    class:btn-disabled=disabled\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:button active=\"true\"&gt;Active Button&lt;/include:button&gt;\n&lt;!-- Output: &lt;button class=\"btn btn-active\"&gt; --&gt;\n</code></pre></p>"},{"location":"building-components/css-and-styling/#always-applied-classes","title":"Always-Applied Classes","text":"<p>Omit the condition to always apply a class:</p> <pre><code>{# props #}\n&lt;div {% attrs class=\"base-class\" class:always-applied %}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#complex-conditionals","title":"Complex Conditionals","text":"<p>Use component attributes directly for conditional classes:</p> <pre><code>&lt;include:card \n    title=\"Hello\" \n    class:featured=\"{{ article.is_featured }}\"\n    class:urgent=\"{{ priority == 'high' }}\"\n&gt;\n    Content\n&lt;/include:card&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#tailwind-css-integration","title":"Tailwind CSS Integration","text":""},{"location":"building-components/css-and-styling/#utility-first-approach","title":"Utility-First Approach","text":"<p>Perfect for Tailwind CSS utility classes:</p> <pre><code>{# props variant=primary,secondary,danger, size=sm,md,lg #}\n&lt;button {% attrs\n    class=\"inline-flex items-center justify-center rounded-md font-medium transition-colors\"\n    class:bg-blue-600=variantPrimary\n    class:bg-gray-600=variantSecondary  \n    class:bg-red-600=variantDanger\n    class:px-3=sizeSm\n    class:py-1.5=sizeSm\n    class:text-sm=sizeSm\n    class:px-4=sizeMd\n    class:py-2=sizeMd\n    class:text-base=sizeMd\n    class:px-6=sizeLg\n    class:py-3=sizeLg\n    class:text-lg=sizeLg\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#responsive-classes","title":"Responsive Classes","text":"<pre><code>{# props mobile_hidden=False #}\n&lt;div {% attrs \n    class=\"block\"\n    class:hidden=mobile_hidden\n    class:sm:block=mobile_hidden\n%}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#dark-mode-support","title":"Dark Mode Support","text":"<pre><code>{# props #}\n&lt;div {% attrs \n    class=\"bg-white text-gray-900\"\n    class=\"dark:bg-gray-900 dark:text-gray-100\"\n%}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"building-components/css-and-styling/#state-based-styling","title":"State-Based Styling","text":"<pre><code>{# props state=loading,success,error,idle #}\n&lt;div {% attrs\n    class=\"status-indicator p-4 rounded-lg\"\n    class:bg-blue-100=stateLoading\n    class:text-blue-800=stateLoading\n    class:bg-green-100=stateSuccess\n    class:text-green-800=stateSuccess\n    class:bg-red-100=stateError\n    class:text-red-800=stateError\n    class:bg-gray-100=stateIdle\n    class:text-gray-800=stateIdle\n%}&gt;\n    {% if stateLoading %}\n        &lt;span class=\"spinner\"&gt;&lt;/span&gt; Loading...\n    {% elif stateSuccess %}\n        \u2705 Success!\n    {% elif stateError %}\n        \u274c Error occurred\n    {% else %}\n        \u23f8\ufe0f Ready\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#layout-variants","title":"Layout Variants","text":"<pre><code>{# props layout=horizontal,vertical,grid #}\n&lt;div {% attrs\n    class=\"container\"\n    class:flex=layoutHorizontal\n    class:space-x-4=layoutHorizontal\n    class:flex-col=layoutVertical\n    class:space-y-4=layoutVertical\n    class:grid=layoutGrid\n    class:grid-cols-2=layoutGrid\n    class:gap-4=layoutGrid\n%}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#interactive-states","title":"Interactive States","text":"<pre><code>{# props interactive=True, disabled=False #}\n&lt;div {% attrs\n    class=\"card p-6 rounded-lg border\"\n    class:cursor-pointer=interactive\n    class:hover:shadow-lg=interactive\n    class:hover:border-blue-300=interactive\n    class:focus:outline-none=interactive\n    class:focus:ring-2=interactive\n    class:focus:ring-blue-500=interactive\n    class:opacity-50=disabled\n    class:cursor-not-allowed=disabled\n    tabindex=interactive|yesno:\"0,\"\n%}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#component-specific-patterns","title":"Component-Specific Patterns","text":""},{"location":"building-components/css-and-styling/#form-components","title":"Form Components","text":"<pre><code>{# props validation_state=,valid,invalid,warning #}\n&lt;div {% attrs\n    class=\"form-group mb-4\"\n    class:has-success=validationStateValid\n    class:has-error=validationStateInvalid\n    class:has-warning=validationStateWarning\n%}&gt;\n    &lt;input {% attrs.input\n        class=\"form-control w-full px-3 py-2 border rounded-md\"\n        class:border-green-500=validationStateValid\n        class:border-red-500=validationStateInvalid\n        class:border-yellow-500=validationStateWarning\n        class:focus:ring-green-500=validationStateValid\n        class:focus:ring-red-500=validationStateInvalid\n        class:focus:ring-yellow-500=validationStateWarning\n    %}&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#navigation-components","title":"Navigation Components","text":"<pre><code>{# props active=False, disabled=False #}\n&lt;a {% attrs\n    class=\"nav-link px-3 py-2 rounded-md text-sm font-medium transition-colors\"\n    class:bg-blue-100=active\n    class:text-blue-700=active\n    class:text-gray-600=active|not\n    class:hover:text-gray-900=active|not\n    class:hover:bg-gray-50=active|not\n    class:opacity-50=disabled\n    class:cursor-not-allowed=disabled\n    class:pointer-events-none=disabled\n%}&gt;\n    {{ contents }}\n&lt;/a&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#alert-components","title":"Alert Components","text":"<pre><code>{# props \n    variant=info,success,warning,error,\n    dismissible=False,\n    icon=True \n#}\n&lt;div {% attrs\n    class=\"alert p-4 rounded-lg flex items-start space-x-3\"\n    class:bg-blue-50=variantInfo\n    class:border-blue-200=variantInfo\n    class:text-blue-800=variantInfo\n    class:bg-green-50=variantSuccess\n    class:border-green-200=variantSuccess\n    class:text-green-800=variantSuccess\n    class:bg-yellow-50=variantWarning\n    class:border-yellow-200=variantWarning\n    class:text-yellow-800=variantWarning\n    class:bg-red-50=variantError\n    class:border-red-200=variantError\n    class:text-red-800=variantError\n    class:pr-10=dismissible\n%}&gt;\n    {% if icon %}\n        &lt;span class=\"flex-shrink-0\"&gt;\n            {% if variantInfo %}\u2139\ufe0f{% elif variantSuccess %}\u2705{% elif variantWarning %}\u26a0\ufe0f{% elif variantError %}\u274c{% endif %}\n        &lt;/span&gt;\n    {% endif %}\n\n    &lt;div class=\"flex-1\"&gt;{{ contents }}&lt;/div&gt;\n\n    {% if dismissible %}\n        &lt;button class=\"absolute top-2 right-2 text-gray-400 hover:text-gray-600\"&gt;\n            \u00d7\n        &lt;/button&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#debugging-classes","title":"Debugging Classes","text":""},{"location":"building-components/css-and-styling/#development-helper","title":"Development Helper","text":"<p>Add a debug mode to visualize applied classes:</p> <pre><code>{# props debug=False #}\n&lt;div {% attrs\n    class=\"component\"\n    class:debug-border=debug\n    class:debug-bg=debug\n%}&gt;\n    {% if debug %}\n        &lt;div class=\"debug-info text-xs text-gray-500 mb-2\"&gt;\n            Classes: {{ attrs.class|default:\"none\" }}\n        &lt;/div&gt;\n    {% endif %}\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#class-validation","title":"Class Validation","text":"<pre><code>{# props variant=primary,secondary #}\n{% if not variantPrimary and not variantSecondary %}\n    &lt;div class=\"error\"&gt;Invalid variant specified&lt;/div&gt;\n{% else %}\n    &lt;button {% attrs class=\"btn\" class:btn-primary=variantPrimary class:btn-secondary=variantSecondary %}&gt;\n        {{ contents }}\n    &lt;/button&gt;\n{% endif %}\n</code></pre>"},{"location":"building-components/css-and-styling/#performance-considerations","title":"Performance Considerations","text":""},{"location":"building-components/css-and-styling/#efficient-class-building","title":"Efficient Class Building","text":"<pre><code>&lt;!-- \u2705 Good: Conditional classes only when needed --&gt;\n{# props large=False, success=False #}\n&lt;div {% attrs \n    class=\"base-class\"\n    class:large-variant=large\n    class:success-variant=success\n%}&gt;\n\n&lt;!-- \u274c Avoid: Always evaluating all conditions --&gt;\n&lt;div class=\"base-class {% if large %}large-variant{% endif %} {% if success %}success-variant{% endif %}\"&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#minimize-class-duplication","title":"Minimize Class Duplication","text":"<pre><code>&lt;!-- \u2705 Good: Shared base classes --&gt;\n{# props variant=primary,secondary #}\n&lt;button {% attrs\n    class=\"btn px-4 py-2 rounded transition-colors\"\n    class:bg-blue-600=variantPrimary\n    class:bg-gray-600=variantSecondary\n%}&gt;\n\n&lt;!-- \u274c Avoid: Repeating common classes --&gt;\n&lt;button {% attrs\n    class:btn-primary=variantPrimary\n    class:btn-secondary=variantSecondary\n%}&gt;\n&lt;!-- Where btn-primary includes all the base styles repeatedly --&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#css-framework-integration","title":"CSS Framework Integration","text":""},{"location":"building-components/css-and-styling/#bootstrap-integration","title":"Bootstrap Integration","text":"<pre><code>{# props variant=primary,secondary,success,danger, size=sm,lg #}\n&lt;button {% attrs\n    class=\"btn\"\n    class:btn-primary=variantPrimary\n    class:btn-secondary=variantSecondary\n    class:btn-success=variantSuccess\n    class:btn-danger=variantDanger\n    class:btn-sm=sizeSm\n    class:btn-lg=sizeLg\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#bulma-integration","title":"Bulma Integration","text":"<pre><code>{# props color=primary,info,success,warning,danger, size=small,normal,medium,large #}\n&lt;button {% attrs\n    class=\"button\"\n    class:is-primary=colorPrimary\n    class:is-info=colorInfo\n    class:is-success=colorSuccess\n    class:is-warning=colorWarning\n    class:is-danger=colorDanger\n    class:is-small=sizeSmall\n    class:is-medium=sizeMedium\n    class:is-large=sizeLarge\n%}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#best-practices","title":"Best Practices","text":""},{"location":"building-components/css-and-styling/#1-use-semantic-class-names","title":"1. Use Semantic Class Names","text":"<pre><code>&lt;!-- \u2705 Good: Semantic naming --&gt;\nclass:is-featured=featured\nclass:is-urgent=urgent\nclass:is-completed=completed\n\n&lt;!-- \u274c Avoid: Generic naming --&gt;\nclass:red=urgent\nclass:big=featured\n</code></pre>"},{"location":"building-components/css-and-styling/#2-group-related-classes","title":"2. Group Related Classes","text":"<pre><code>&lt;!-- \u2705 Good: Logical grouping --&gt;\n&lt;div {% attrs\n    class=\"card\"\n    class:card-elevated=elevated\n    class:card-bordered=bordered\n    class:card-compact=compact\n%}&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#3-provide-fallbacks","title":"3. Provide Fallbacks","text":"<pre><code>{# props variant=primary,secondary,danger #}\n&lt;button {% attrs\n    class=\"btn\"\n    class:btn-primary=variantPrimary\n    class:btn-secondary=variantSecondary\n    class:btn-danger=variantDanger\n    class:btn-default=variant|default:\"primary\"\n%}&gt;\n</code></pre>"},{"location":"building-components/css-and-styling/#4-document-class-behavior","title":"4. Document Class Behavior","text":"<pre><code>{#\nComponent: Button\nClasses:\n- Base: btn (always applied)\n- Variants: btn-primary, btn-secondary, btn-danger\n- Sizes: btn-sm, btn-lg (optional)\n- States: btn-loading, btn-disabled (conditional)\n#}\n</code></pre>"},{"location":"building-components/css-and-styling/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Component Patterns for real-world examples</li> <li>Check out Integration Guides for framework-specific setup</li> <li>Review the API Reference for complete class syntax</li> </ul>"},{"location":"getting-started/basic-concepts/","title":"Basic Concepts","text":"<p>Understanding the core concepts of Django IncludeContents will help you make the most of this powerful component system.</p>"},{"location":"getting-started/basic-concepts/#what-are-components","title":"What are Components?","text":"<p>In Django IncludeContents, components are reusable template fragments that can accept content and properties (props). Think of them as custom HTML elements that you can define once and use throughout your templates.</p> <pre><code>&lt;!-- Instead of repeating this pattern: --&gt;\n&lt;div class=\"card border rounded-lg p-6\"&gt;\n    &lt;h2 class=\"text-xl font-bold\"&gt;My Title&lt;/h2&gt;\n    &lt;p&gt;Some content here...&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;!-- Create a component and use it like this: --&gt;\n&lt;include:card title=\"My Title\"&gt;\n    &lt;p&gt;Some content here...&lt;/p&gt;\n&lt;/include:card&gt;\n</code></pre>"},{"location":"getting-started/basic-concepts/#template-engine-support","title":"Template Engine Support","text":"<p>Django IncludeContents works with both Django templates and Jinja2:</p> Feature Django Templates Jinja2 Component System \u2705 Full support \u2705 Full support HTML Syntax \u2705 Custom engine required \u2705 Extension required Template Tags \u2705 Always available \u2705 Extension required Props &amp; Validation \u2705 Full support \u2705 Full support Enum Validation \u2705 Full support \u2705 Full support Named Contents \u2705 Full support \u2705 Full support Icons \u2705 Full support \u2705 Full support Icon HTML Syntax \u2705 Full support \u2705 Full support WrapIf Tag \u2705 Available \u274c Use conditionals instead"},{"location":"getting-started/basic-concepts/#two-ways-to-use-components","title":"Two Ways to Use Components","text":"<p>Django IncludeContents offers two syntaxes for the same functionality:</p>"},{"location":"getting-started/basic-concepts/#html-syntax-recommended","title":"HTML Syntax (Recommended)","text":"Django TemplatesJinja2 <pre><code>&lt;include:card title=\"Welcome\" class=\"highlight\"&gt;\n    &lt;p&gt;This looks and feels like HTML!&lt;/p&gt;\n&lt;/include:card&gt;\n</code></pre> <pre><code>&lt;include:card title=\"Welcome\" class=\"highlight\"&gt;\n    &lt;p&gt;This looks and feels like HTML!&lt;/p&gt;\n&lt;/include:card&gt;\n</code></pre> <p>Benefits: - Familiar HTML-like syntax - Better IDE support and formatting - Cleaner, more readable templates - Self-closing tags for simple components</p>"},{"location":"getting-started/basic-concepts/#template-tag-syntax","title":"Template Tag Syntax","text":"Django TemplatesJinja2 <pre><code>{% load includecontents %}\n{% includecontents \"components/card.html\" title=\"Welcome\" class=\"highlight\" %}\n    &lt;p&gt;Traditional Django template syntax&lt;/p&gt;\n{% endincludecontents %}\n</code></pre> <pre><code>{% includecontents \"components/card.html\" title=\"Welcome\" class=\"highlight\" %}\n    &lt;p&gt;Jinja2 template syntax&lt;/p&gt;\n{% endincludecontents %}\n</code></pre> <p>Benefits: - Works with any template engine - Familiar to template developers - No additional setup beyond the extension</p> <p>Which Should I Use?</p> <p>We recommend the HTML syntax for new projects as it provides a better developer experience. The template tag syntax is perfect for existing projects or when you prefer traditional template syntax.</p>"},{"location":"getting-started/basic-concepts/#component-discovery","title":"Component Discovery","text":"<p>Components are automatically discovered from your <code>templates/components/</code> directory:</p> <pre><code>templates/\n\u2514\u2500\u2500 components/\n    \u251c\u2500\u2500 card.html              \u2192 &lt;include:card&gt;\n    \u251c\u2500\u2500 user-profile.html      \u2192 &lt;include:user-profile&gt;\n    \u251c\u2500\u2500 forms/\n    \u2502   \u251c\u2500\u2500 field.html         \u2192 &lt;include:forms:field&gt;\n    \u2502   \u2514\u2500\u2500 button.html        \u2192 &lt;include:forms:button&gt;\n    \u2514\u2500\u2500 ui/\n        \u2514\u2500\u2500 modal.html         \u2192 &lt;include:ui:modal&gt;\n</code></pre> <p>Key Rules: - File paths map to component names using <code>:</code> as separators - Subdirectories create namespaces (e.g., <code>forms/field.html</code> \u2192 <code>forms:field</code>) - Kebab-case filenames are recommended (e.g., <code>user-profile.html</code>)</p>"},{"location":"getting-started/basic-concepts/#context-isolation","title":"Context Isolation","text":"<p>One of the most important concepts in Django IncludeContents is context isolation.</p>"},{"location":"getting-started/basic-concepts/#what-is-context-isolation","title":"What is Context Isolation?","text":"<p>Unlike Django's standard <code>{% include %}</code> tag, components run in an isolated context. This means:</p> <ul> <li>\u2705 Only explicitly passed props are available in the component</li> <li>\u274c Parent template variables are not automatically inherited</li> <li>\u2705 Django context processors remain available (like <code>request</code>, <code>user</code>, <code>csrf_token</code>)</li> <li>\u2705 Components are predictable and self-contained</li> </ul> <p>Context Processors Exception</p> <p>While parent template variables are isolated, context processor variables are automatically available in all components. This includes Django's built-in processors (<code>request</code>, <code>user</code>, <code>csrf_token</code>, etc.) and any custom context processors you've configured.</p>"},{"location":"getting-started/basic-concepts/#example","title":"Example","text":"<p>Parent template: <pre><code>{% with user_name=\"John\" %}\n    &lt;include:greeting name=\"{{ user_name }}\"&gt;\n        Welcome back!\n    &lt;/include:greeting&gt;\n{% endwith %}\n</code></pre></p> <p>Component (templates/components/greeting.html): <pre><code>&lt;div class=\"greeting\"&gt;\n    &lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;     &lt;!-- \u2705 Available: passed as prop --&gt;\n    &lt;p&gt;{{ contents }}&lt;/p&gt;           &lt;!-- \u2705 Available: component content --&gt;\n    &lt;p&gt;{{ user_name }}&lt;/p&gt;          &lt;!-- \u274c Empty: not passed explicitly --&gt;\n    &lt;p&gt;User: {{ user.username }}&lt;/p&gt; &lt;!-- \u2705 Available: from context processor --&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Result: <pre><code>&lt;div class=\"greeting\"&gt;\n    &lt;h1&gt;Hello, John!&lt;/h1&gt;\n    &lt;p&gt;Welcome back!&lt;/p&gt;\n    &lt;p&gt;&lt;/p&gt;  &lt;!-- Empty because user_name wasn't passed --&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"getting-started/basic-concepts/#why-context-isolation","title":"Why Context Isolation?","text":"<p>Context isolation provides several benefits:</p> <ol> <li>Predictability: Components always behave the same way regardless of where they're used</li> <li>Reusability: No hidden dependencies on parent template variables</li> <li>Maintainability: Clear interface through explicit props</li> <li>Debugging: Easier to understand what data a component needs</li> </ol>"},{"location":"getting-started/basic-concepts/#props-and-content","title":"Props and Content","text":"<p>Components receive data through two mechanisms:</p>"},{"location":"getting-started/basic-concepts/#props-attributes","title":"Props (Attributes)","text":"<p>Props are named values passed to components:</p> <pre><code>&lt;include:card title=\"My Card\" size=\"large\" featured&gt;\n    Content goes here\n&lt;/include:card&gt;\n</code></pre> <p>In the component template, these become variables: <pre><code>&lt;!-- templates/components/card.html --&gt;\n&lt;div class=\"card {{ size }}\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    {% if featured %}&lt;span class=\"badge\"&gt;Featured&lt;/span&gt;{% endif %}\n    &lt;div&gt;{{ contents }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"getting-started/basic-concepts/#content","title":"Content","text":"<p>Content is what goes between the opening and closing component tags:</p> <pre><code>&lt;include:card&gt;\n    This becomes the {{ contents }} variable\n&lt;/include:card&gt;\n</code></pre>"},{"location":"getting-started/basic-concepts/#named-content-blocks","title":"Named Content Blocks","text":"<p>For more complex components, you can use named content blocks:</p> <pre><code>&lt;include:layout-card&gt;\n    &lt;content:header&gt;\n        &lt;h1&gt;Article Title&lt;/h1&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;Main article content...&lt;/p&gt;\n\n    &lt;content:footer&gt;\n        &lt;button&gt;Read More&lt;/button&gt;\n    &lt;/content:footer&gt;\n&lt;/include:layout-card&gt;\n</code></pre>"},{"location":"getting-started/basic-concepts/#key-benefits","title":"Key Benefits","text":""},{"location":"getting-started/basic-concepts/#1-reusability","title":"1. Reusability","text":"<p>Write once, use everywhere. Components eliminate template duplication.</p>"},{"location":"getting-started/basic-concepts/#2-maintainability","title":"2. Maintainability","text":"<p>Change a component's structure in one place, and it updates everywhere it's used.</p>"},{"location":"getting-started/basic-concepts/#3-consistency","title":"3. Consistency","text":"<p>Components ensure consistent styling and behavior across your application.</p>"},{"location":"getting-started/basic-concepts/#4-developer-experience","title":"4. Developer Experience","text":"<p>HTML-like syntax with IDE support makes template development more enjoyable.</p>"},{"location":"getting-started/basic-concepts/#5-testability","title":"5. Testability","text":"<p>Components can be tested in isolation, making your templates more reliable.</p>"},{"location":"getting-started/basic-concepts/#next-steps","title":"Next Steps","text":"<p>Now that you understand the core concepts, you're ready to:</p> <ul> <li>Start using components with the HTML syntax</li> <li>Learn about props and attributes for data passing</li> <li>Explore component patterns for building reusable components</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Django IncludeContents can be installed and configured in multiple ways depending on your needs.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>Django 3.2+</li> <li>Django templates OR Jinja2 templates (both supported!)</li> </ul>"},{"location":"getting-started/installation/#install-the-package","title":"Install the Package","text":"<pre><code>pip install django-includecontents\n</code></pre>"},{"location":"getting-started/installation/#configuration-options","title":"Configuration Options","text":"<p>Choose your template engine and configuration:</p>"},{"location":"getting-started/installation/#option-1-django-templates-with-custom-engine-recommended","title":"Option 1: Django Templates with Custom Engine (Recommended)","text":"<p>This option enables the HTML component syntax (<code>&lt;include:component&gt;</code>) and automatically loads the template tags.</p> <p>Replace the default Django template backend in your <code>settings.py</code>:</p> <pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre> <p>Benefits of the Custom Engine</p> <ul> <li>HTML component syntax: <code>&lt;include:my-card&gt;</code></li> <li>Multi-line template tags</li> <li>Auto-loaded template tags (no need for <code>{% load includecontents %}</code>)</li> <li>All standard Django template functionality preserved</li> </ul>"},{"location":"getting-started/installation/#option-2-traditional-django-setup","title":"Option 2: Traditional Django Setup","text":"<p>If you prefer to use only the template tags without the HTML syntax, add the app to <code>INSTALLED_APPS</code>:</p> <pre><code>INSTALLED_APPS = [\n    # ... your other apps\n    'includecontents',\n]\n</code></pre> <p>Then load the template tags in your templates:</p> <pre><code>{% load includecontents %}\n</code></pre>"},{"location":"getting-started/installation/#option-3-jinja2-templates","title":"Option 3: Jinja2 Templates","text":"<p>For Jinja2 users, register the extension in your Jinja2 environment:</p> <pre><code># settings.py\nfrom jinja2 import Environment\nfrom includecontents.jinja2 import IncludeContentsExtension\n\ndef environment(**options):\n    env = Environment(extensions=[IncludeContentsExtension], **options)\n    return env\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'environment': 'myproject.jinja2.environment',\n        },\n    },\n]\n</code></pre> <p>For detailed Jinja2 setup, see the Jinja2 Setup Guide.</p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test to verify everything is working:</p> With Custom EngineTraditional SetupJinja2 Setup <p>templates/components/hello.html <pre><code>&lt;div&gt;Hello, {{ name }}! {{ contents }}&lt;/div&gt;\n</code></pre></p> <p>In your template <pre><code>&lt;include:hello name=\"World\"&gt;\n    Welcome to Django IncludeContents!\n&lt;/include:hello&gt;\n</code></pre></p> <p>templates/hello.html <pre><code>&lt;div&gt;Hello, {{ name }}! {{ contents }}&lt;/div&gt;\n</code></pre></p> <p>In your template <pre><code>{% load includecontents %}\n{% includecontents \"hello.html\" name=\"World\" %}\n    Welcome to Django IncludeContents!\n{% endincludecontents %}\n</code></pre></p> <p>templates/components/hello.html <pre><code>&lt;div&gt;Hello, {{ name }}! {{ contents }}&lt;/div&gt;\n</code></pre></p> <p>In your template <pre><code>{% includecontents \"hello\" name=\"World\" %}\n    Welcome to Django IncludeContents!\n{% endincludecontents %}\n\n{# HTML syntax also works: #}\n&lt;include:hello name=\"World\"&gt;\n    Welcome to Django IncludeContents!\n&lt;/include:hello&gt;\n</code></pre></p> <p>Both should output: <pre><code>&lt;div&gt;Hello, World! Welcome to Django IncludeContents!&lt;/div&gt;\n</code></pre></p>"},{"location":"getting-started/installation/#icons-setup-optional","title":"Icons Setup (Optional)","text":"<p>If you plan to use the icon system, add the icon finder to your static files configuration:</p> <pre><code># settings.py\nSTATICFILES_FINDERS = [\n    'includecontents.icons.finders.IconSpriteFinder',  # Must be first for icons\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n]\n</code></pre> <p>Order Matters</p> <p>The <code>IconSpriteFinder</code> must be first in the list to prevent source SVG files from being served twice.</p> <p>Then configure your icons:</p> <pre><code># settings.py\nINCLUDECONTENTS_ICONS = {\n    'icons': [\n        'mdi:home',\n        'tabler:user',\n        # ... more icons\n    ]\n}\n</code></pre> <p>Now you can use icons in your templates:</p> <pre><code>&lt;icon:home class=\"w-6 h-6\" /&gt;\n</code></pre> <p>For complete icon documentation, see the Icons Guide.</p>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to the project or run the tests:</p> <pre><code># Clone the repository\ngit clone https://github.com/SmileyChris/django-includecontents.git\ncd django-includecontents\n\n# Install with test dependencies\npip install -e \".[test]\"\n\n# Run tests\npytest\n</code></pre> <p>For complete development setup instructions, see the Development Guide.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Django IncludeContents installed, let's create your first component:</p> <p>Quick Start Guide \u2192</p>"},{"location":"getting-started/jinja2-setup/","title":"Jinja2 Setup","text":"<p>Django IncludeContents provides complete feature parity with Django templates through a custom Jinja2 extension. All modern component features work seamlessly with Jinja2.</p> <p>Full Feature Parity Achieved</p> <p>Jinja2 support includes all features from Django templates:</p> <ul> <li>\u2705 Component system: Full <code>{% includecontents %}</code> tag support</li> <li>\u2705 HTML component syntax: <code>&lt;include:component&gt;</code> with full preprocessing</li> <li>\u2705 JavaScript framework attributes: <code>@click</code>, <code>v-on:</code>, <code>x-on:</code>, <code>:bind</code> syntax</li> <li>\u2705 Nested attribute syntax: <code>inner.class</code>, <code>button.type</code>, <code>inner.@click</code></li> <li>\u2705 Advanced class manipulation: <code>class:not</code>, <code>class=\"&amp; base\"</code>, <code>class=\"additional &amp;\"</code></li> <li>\u2705 HTML content blocks: <code>&lt;content:name&gt;Content&lt;/content:name&gt;</code> syntax</li> <li>\u2705 Props and validation: Required prop validation and defaults</li> <li>\u2705 Enum prop validation: Full validation with helpful error messages</li> <li>\u2705 Named content blocks: Traditional <code>{% contents %}</code> syntax</li> <li>\u2705 Attrs system: Undefined attribute handling with grouping</li> <li>\u2705 Context isolation: Components render in isolated contexts</li> <li>\u2705 Icon system: Full support including HTML syntax <code>&lt;icon:name&gt;</code></li> <li>\u274c WrapIf tag: Not available (use Jinja2 conditionals instead)</li> </ul>"},{"location":"getting-started/jinja2-setup/#installation","title":"Installation","text":""},{"location":"getting-started/jinja2-setup/#1-install-django-includecontents","title":"1. Install Django IncludeContents","text":"<pre><code>pip install django-includecontents\n</code></pre>"},{"location":"getting-started/jinja2-setup/#2-configure-jinja2-backend","title":"2. Configure Jinja2 Backend","text":"<p>Add the Jinja2 backend to your <code>TEMPLATES</code> setting in <code>settings.py</code>:</p> <pre><code># settings.py\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',\n        'DIRS': [\n            BASE_DIR / 'jinja2',  # Your Jinja2 templates directory\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'environment': 'myproject.jinja2.environment',\n            'extensions': [\n                'includecontents.jinja2.IncludeContentsExtension',\n            ],\n        },\n    },\n    # You can also keep Django templates alongside Jinja2\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"getting-started/jinja2-setup/#3-create-jinja2-environment","title":"3. Create Jinja2 Environment","text":"<p>Create a Jinja2 environment configuration file:</p> <p>myproject/jinja2.py <pre><code>from django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.urls import reverse\nfrom jinja2 import Environment\n\n\ndef environment(**options):\n    env = Environment(**options)\n    env.globals.update({\n        'static': staticfiles_storage.url,\n        'url': reverse,\n    })\n    return env\n</code></pre></p> <p>This gives your Jinja2 templates access to Django's <code>static()</code> and <code>url()</code> functions.</p>"},{"location":"getting-started/jinja2-setup/#4-add-to-installed-apps","title":"4. Add to Installed Apps","text":"<p>Make sure <code>includecontents</code> is in your <code>INSTALLED_APPS</code>:</p> <pre><code># settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'includecontents',  # Add this\n    'myapp',\n]\n</code></pre>"},{"location":"getting-started/jinja2-setup/#directory-structure","title":"Directory Structure","text":"<p>Organize your templates with separate directories for Django and Jinja2:</p> <pre><code>myproject/\n\u251c\u2500\u2500 templates/          # Django templates\n\u2502   \u2514\u2500\u2500 components/\n\u2502       \u2514\u2500\u2500 card.html\n\u251c\u2500\u2500 jinja2/            # Jinja2 templates\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2514\u2500\u2500 card.html\n\u2502   \u251c\u2500\u2500 base.html\n\u2502   \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 myproject/\n    \u2514\u2500\u2500 jinja2.py      # Environment config\n</code></pre>"},{"location":"getting-started/jinja2-setup/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/jinja2-setup/#template-tag-syntax","title":"Template Tag Syntax","text":"<p>Use the <code>{% includecontents %}</code> tag in Jinja2 templates:</p> <p>jinja2/components/card.html <pre><code>{# props title, subtitle=\"\" #}\n&lt;div class=\"card\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    {% if subtitle %}\n        &lt;p class=\"subtitle\"&gt;{{ subtitle }}&lt;/p&gt;\n    {% endif %}\n    &lt;div class=\"content\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <p>jinja2/index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Site&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% includecontents \"components/card.html\" title=\"Welcome\" subtitle=\"Getting started\" %}\n        &lt;p&gt;This is your first Jinja2 component!&lt;/p&gt;\n    {% endincludecontents %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#html-component-syntax","title":"HTML Component Syntax","text":"<p>The extension automatically preprocesses HTML component syntax:</p> <p>jinja2/index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Site&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;include:card title=\"Welcome\" subtitle=\"Getting started\"&gt;\n        &lt;p&gt;This is your first Jinja2 component with HTML syntax!&lt;/p&gt;\n    &lt;/include:card&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#named-content-blocks","title":"Named Content Blocks","text":"<p>Support for named content blocks works identically to Django:</p> <p>jinja2/components/layout.html <pre><code>&lt;div class=\"layout\"&gt;\n    &lt;header&gt;\n        {{ contents.header }}\n    &lt;/header&gt;\n    &lt;main&gt;\n        {{ contents }}\n    &lt;/main&gt;\n    {% if contents.footer %}\n        &lt;footer&gt;\n            {{ contents.footer }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:layout&gt;\n    &lt;content:header&gt;\n        &lt;h1&gt;Page Title&lt;/h1&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;Main page content here.&lt;/p&gt;\n\n    &lt;content:footer&gt;\n        &lt;p&gt;&amp;copy; 2024 My Company&lt;/p&gt;\n    &lt;/content:footer&gt;\n&lt;/include:layout&gt;\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#modern-javascript-framework-integration","title":"Modern JavaScript Framework Integration","text":"<p>The Jinja2 extension now supports all modern JavaScript framework attributes:</p>"},{"location":"getting-started/jinja2-setup/#vuejs-integration","title":"Vue.js Integration","text":"<pre><code>&lt;!-- Vue.js event handlers --&gt;\n&lt;include:button @click=\"handleClick()\" @keyup.enter=\"submitForm()\"&gt;\n    Click me\n&lt;/include:button&gt;\n\n&lt;!-- Vue.js directives --&gt;\n&lt;include:card\n    v-on:submit=\"onSubmit\"\n    v-model=\"inputValue\"\n    v-bind:class=\"{ 'active': isActive }\"\n&gt;\n    Card content\n&lt;/include:card&gt;\n\n&lt;!-- Vue.js bind shorthand --&gt;\n&lt;include:component :class=\"dynamicClasses\" :disabled=\"isDisabled\"&gt;\n    Dynamic component\n&lt;/include:component&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#alpinejs-integration","title":"Alpine.js Integration","text":"<pre><code>&lt;!-- Alpine.js event handlers --&gt;\n&lt;include:button x-on:click=\"open = !open\" x-data=\"{ open: false }\"&gt;\n    Toggle\n&lt;/include:button&gt;\n\n&lt;!-- Alpine.js directives --&gt;\n&lt;include:modal x-show=\"showModal\" x-transition&gt;\n    Modal content\n&lt;/include:modal&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#nested-attributes","title":"Nested Attributes","text":"<pre><code>&lt;!-- Pass attributes to nested elements --&gt;\n&lt;include:form-with-button\n    inner.class=\"form-control\"\n    button.type=\"submit\"\n    button.@click=\"handleSubmit()\"\n&gt;\n    Form content\n&lt;/include:form-with-button&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#advanced-class-manipulation","title":"Advanced Class Manipulation","text":"<pre><code>&lt;!-- Conditional classes --&gt;\n&lt;include:card class:not=\"disabled ? 'active'\" variant=\"primary\"&gt;\n    Conditional styling\n&lt;/include:card&gt;\n\n&lt;!-- Class append/prepend --&gt;\n&lt;include:button class=\"&amp; btn-primary\" size=\"large\"&gt;\n    Base classes with extensions\n&lt;/include:button&gt;\n\n&lt;include:alert class=\"custom-alert &amp;\" type=\"warning\"&gt;\n    Custom classes with base\n&lt;/include:alert&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#props-and-attributes","title":"Props and Attributes","text":"<p>The full props system works in Jinja2, including enum validation:</p> <p>jinja2/components/button.html <pre><code>{# props variant=primary,secondary,danger size=small,medium,large disabled=false #}\n&lt;button\n    class=\"btn btn-{{ variant }} btn-{{ size }}\"\n    {% if disabled %}disabled{% endif %}\n    {{ attrs }}\n&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:button\n    variant=\"success\"\n    size=\"large\"\n    onclick=\"alert('Clicked!')\"\n    data-id=\"123\"\n&gt;\n    Save Changes\n&lt;/include:button&gt;\n</code></pre></p> <p>Enum Validation: If you use an invalid enum value, you'll get a helpful error message:</p> <pre><code>&lt;!-- This will raise a TemplateRuntimeError --&gt;\n&lt;include:button variant=\"invalid\"&gt;Button&lt;/include:button&gt;\n</code></pre> <p>Error message: <pre><code>Invalid value \"invalid\" for attribute \"variant\" in component 'components/button.html'.\nAllowed values: 'primary', 'secondary', 'danger'. Did you mean \"primary\"?\nExample: &lt;include:button variant=\"primary\"&gt;\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#icon-system","title":"Icon System","text":"<p>Icons work seamlessly with Jinja2. First configure icons in settings:</p> <pre><code># settings.py\nSTATICFILES_FINDERS = [\n    'includecontents.icons.finders.IconSpriteFinder',  # Must be first\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n]\n\nINCLUDECONTENTS_ICONS = {\n    'icons': [\n        'mdi:home',\n        'mdi:user',\n        'tabler:star',\n        'icons/logo.svg',  # Local SVG files\n    ]\n}\n</code></pre> <p>Then use icons in Jinja2 templates:</p> <pre><code>&lt;!-- HTML syntax (works automatically) --&gt;\n&lt;icon:home class=\"nav-icon\" /&gt;\n&lt;icon:user class=\"avatar\" /&gt;\n\n&lt;!-- Template function syntax (also available) --&gt;\n{{ icon('home', class='nav-icon') }}\n{{ icon('user', class='avatar') }}\n\n&lt;!-- Mixed usage --&gt;\n&lt;icon:star class=\"rating-icon\" /&gt;\n&lt;div&gt;Rating: {{ icon('star', class='small') }}&lt;/div&gt;\n</code></pre> <p>Icon Function</p> <p>The <code>icon()</code> function is automatically available in Jinja2 templates when using the IncludeContentsExtension. No manual environment setup required.</p>"},{"location":"getting-started/jinja2-setup/#context-and-variables","title":"Context and Variables","text":""},{"location":"getting-started/jinja2-setup/#django-context-processors","title":"Django Context Processors","text":"<p>Context Processors Discouraged</p> <p>Django's documentation discourages using context processors with Jinja2. Since Jinja2 can call functions directly (unlike Django templates), it's better to add functions to the global environment instead.</p> <p>Recommended approach:</p> <p>myproject/jinja2.py <pre><code>from django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.urls import reverse\nfrom jinja2 import Environment\n\n\ndef environment(**options):\n    env = Environment(**options)\n    env.globals.update({\n        'static': staticfiles_storage.url,\n        'url': reverse,\n        # Add functions here instead of using context processors\n    })\n    return env\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#csrf-token-handling","title":"CSRF Token Handling","text":"<p>Automatic CSRF Protection</p> <p>Django's Jinja2 backend automatically provides CSRF token variables in all templates when rendered with a request context. No manual configuration needed!</p> <p>Django automatically adds these variables to your Jinja2 template context:</p> <ul> <li><code>{{ csrf_token }}</code> - The CSRF token value</li> <li><code>{{ csrf_input }}</code> - Complete hidden input field (recommended)</li> </ul> <p>In your components:</p> <pre><code>{# components/form.html #}\n&lt;form method=\"post\" action=\"{{ action }}\"&gt;\n    {{ csrf_input }}  &lt;!-- Automatic CSRF protection --&gt;\n    {{ contents }}\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Usage:</p> <pre><code>&lt;include:form action=\"/contact/\"&gt;\n    &lt;input name=\"email\" placeholder=\"Email\" required&gt;\n    &lt;textarea name=\"message\" placeholder=\"Message\" required&gt;&lt;/textarea&gt;\n&lt;/include:form&gt;\n</code></pre> <p>Component Context Isolation:</p> <p>CSRF tokens are automatically preserved in components even with context isolation enabled:</p> <pre><code>{# components/secure-form.html #}\n{# props title #}\n&lt;div class=\"form-wrapper\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;form method=\"post\"&gt;\n        {{ csrf_input }}  &lt;!-- Always available --&gt;\n        {{ contents }}\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre> <p>The IncludeContents extension automatically preserves these essential Django variables:</p> <ul> <li><code>request</code> - Current HTTP request</li> <li><code>csrf_token</code> - CSRF token value</li> <li><code>csrf_input</code> - CSRF input field</li> <li><code>user</code> - Current authenticated user</li> <li><code>perms</code> - User permissions</li> <li><code>messages</code> - Django messages framework</li> <li><code>LANGUAGES</code> &amp; <code>LANGUAGE_CODE</code> - Internationalization</li> </ul>"},{"location":"getting-started/jinja2-setup/#passing-variables-to-components","title":"Passing Variables to Components","text":"<p>Variables are passed the same way as Django:</p> <pre><code>&lt;!-- From view context --&gt;\n&lt;include:user-card user=\"{{ user }}\" /&gt;\n\n&lt;!-- Template variables --&gt;\n{% set current_user = request.user %}\n&lt;include:user-card user=\"{{ current_user }}\" /&gt;\n\n&lt;!-- With filters --&gt;\n&lt;include:product-list products=\"{{ products|list }}\" /&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#differences-from-django-templates","title":"Differences from Django Templates","text":""},{"location":"getting-started/jinja2-setup/#syntax-differences","title":"Syntax Differences","text":"Feature Django Jinja2 Comments <code>{# comment #}</code> <code>{# comment #}</code> Variables <code>{{ variable }}</code> <code>{{ variable }}</code> Tags <code>{% tag %}</code> <code>{% tag %}</code> Loops <code>{% for %}...{% endfor %}</code> <code>{% for %}...{% endfor %}</code> Conditionals <code>{% if %}...{% endif %}</code> <code>{% if %}...{% endif %}</code> Template loading <code>{% load tag_library %}</code> Extensions in settings"},{"location":"getting-started/jinja2-setup/#jinja2-advantages","title":"Jinja2 Advantages","text":"<pre><code>&lt;!-- Inline expressions --&gt;\n&lt;include:card title=\"{{ 'Welcome ' + user.name }}\" /&gt;\n\n&lt;!-- List/dict literals --&gt;\n&lt;include:data items=\"{{ [1, 2, 3] }}\" config=\"{{ {'theme': 'dark'} }}\" /&gt;\n\n&lt;!-- Method calls --&gt;\n&lt;include:user-info name=\"{{ user.get_full_name() }}\" /&gt;\n\n&lt;!-- Advanced filters --&gt;\n&lt;include:article content=\"{{ article.body|markdown|safe }}\" /&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#template-tag-syntax-limitations","title":"Template Tag Syntax Limitations","text":"<p>Advanced Attributes Require HTML Syntax</p> <p>The traditional <code>{% includecontents %}</code> tag syntax in Jinja2 has significant limitations due to Jinja2's parser restrictions. Modern web development attributes only work with HTML component syntax.</p>"},{"location":"getting-started/jinja2-setup/#limited-traditional-tag-syntax","title":"\u274c Limited: Traditional Tag Syntax","text":"<pre><code>&lt;!-- These WILL FAIL with parser errors --&gt;\n{% includecontents \"button\" @click=\"handler()\" %}{% endincludecontents %}\n{% includecontents \"card\" data-id=\"123\" %}{% endincludecontents %}\n{% includecontents \"form\" v-on:submit=\"onSubmit\" %}{% endincludecontents %}\n{% includecontents \"modal\" x-show=\"open\" %}{% endincludecontents %}\n{% includecontents \"component\" inner.class=\"test\" %}{% endincludecontents %}\n{% includecontents \"button\" class:active=\"true\" %}{% endincludecontents %}\n\n&lt;!-- Only basic Python identifiers work --&gt;\n{% includecontents \"card\" title=\"Hello\" variant=\"primary\" %}{% endincludecontents %}\n</code></pre> <p>Error: <code>expected token 'name', got '-'</code> or <code>unexpected char '@'</code></p>"},{"location":"getting-started/jinja2-setup/#recommended-html-component-syntax","title":"\u2705 Recommended: HTML Component Syntax","text":"<pre><code>&lt;!-- All modern attributes work perfectly --&gt;\n&lt;include:button @click=\"handler()\"&gt;Click me&lt;/include:button&gt;\n&lt;include:card data-id=\"123\"&gt;Content&lt;/include:card&gt;\n&lt;include:form v-on:submit=\"onSubmit\"&gt;Form&lt;/include:form&gt;\n&lt;include:modal x-show=\"open\"&gt;Modal&lt;/include:modal&gt;\n&lt;include:component inner.class=\"test\"&gt;Component&lt;/include:component&gt;\n&lt;include:button class:active=\"true\"&gt;Toggle&lt;/include:button&gt;\n</code></pre>"},{"location":"getting-started/jinja2-setup/#alternative-dictionary-syntax","title":"Alternative: Dictionary Syntax","text":"<p>For advanced attributes with traditional syntax, use dictionary unpacking:</p> <pre><code>{% includecontents \"button\" {\"@click\": \"handler()\", \"data-id\": \"123\"} %}\n    Click me\n{% endincludecontents %}\n</code></pre> <p>Recommendation: Use HTML component syntax (<code>&lt;include:&gt;</code>) for all modern web development features. Reserve traditional syntax for simple attributes only.</p>"},{"location":"getting-started/jinja2-setup/#wrapif-alternative","title":"WrapIf Alternative","text":"<p>Since <code>{% wrapif %}</code> isn't available in Jinja2, use conditional macros:</p> <pre><code>&lt;!-- Jinja2 macro approach --&gt;\n{% macro wrap_if(condition, tag, attrs='', class='') %}\n  {% if condition %}\n    &lt;{{ tag }}{% if attrs %} {{ attrs }}{% endif %}{% if class %} class=\"{{ class }}\"{% endif %}&gt;\n  {% endif %}\n  {{ caller() }}\n  {% if condition %}&lt;/{{ tag }}&gt;{% endif %}\n{% endmacro %}\n\n&lt;!-- Usage --&gt;\n{% call wrap_if(user.is_authenticated, 'div', class='authenticated') %}\n    Welcome back, {{ user.name }}!\n{% endcall %}\n</code></pre>"},{"location":"getting-started/jinja2-setup/#testing-your-setup","title":"Testing Your Setup","text":"<p>Create a simple test to verify everything works:</p> <p>jinja2/test.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Test Components&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Component Test&lt;/h1&gt;\n\n    &lt;!-- Test template tag syntax --&gt;\n    {% includecontents \"components/card.html\" title=\"Template Tag\" %}\n        &lt;p&gt;This uses template tag syntax.&lt;/p&gt;\n    {% endincludecontents %}\n\n    &lt;!-- Test HTML syntax --&gt;\n    &lt;include:card title=\"HTML Syntax\"&gt;\n        &lt;p&gt;This uses HTML component syntax.&lt;/p&gt;\n    &lt;/include:card&gt;\n\n    &lt;!-- Test named contents --&gt;\n    &lt;include:card title=\"Named Contents\"&gt;\n        &lt;p&gt;Main content&lt;/p&gt;\n        &lt;content:footer&gt;\n            &lt;small&gt;Footer content&lt;/small&gt;\n        &lt;/content:footer&gt;\n    &lt;/include:card&gt;\n\n    &lt;!-- Test JavaScript framework attributes --&gt;\n    &lt;include:button @click=\"alert('Clicked!')\" v-on:mouseover=\"showTooltip()\"&gt;\n        Vue.js Button\n    &lt;/include:button&gt;\n\n    &lt;!-- Test Alpine.js attributes --&gt;\n    &lt;include:toggle x-on:click=\"open = !open\" x-data=\"{ open: false }\"&gt;\n        Alpine.js Toggle\n    &lt;/include:toggle&gt;\n\n    &lt;!-- Test nested attributes --&gt;\n    &lt;include:form inner.class=\"form-control\" button.type=\"submit\"&gt;\n        Form with nested attributes\n    &lt;/include:form&gt;\n\n    &lt;!-- Test advanced class manipulation --&gt;\n    &lt;include:alert class=\"custom-alert &amp;\" class:not=\"dismissed ? 'visible'\"&gt;\n        Alert with class manipulation\n    &lt;/include:alert&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>views.py <pre><code>from django.shortcuts import render\n\ndef test_components(request):\n    return render(request, 'test.html', {\n        'user': request.user,\n    })\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/jinja2-setup/#common-issues","title":"Common Issues","text":"<p>Extension not loading: <pre><code># Check that extension is properly configured\nTEMPLATES = [{\n    'BACKEND': 'django.template.backends.jinja2.Jinja2',\n    'OPTIONS': {\n        'extensions': [\n            'includecontents.jinja2.IncludeContentsExtension',  # Must be exact\n        ],\n    },\n}]\n</code></pre></p> <p>HTML syntax not working: <pre><code># Ensure you're using Jinja2 backend, not Django backend\n# HTML syntax requires preprocessing which only works with Jinja2\n</code></pre></p> <p>Components not found: <pre><code># Check template directory structure\njinja2/\n\u2514\u2500\u2500 components/\n    \u2514\u2500\u2500 card.html  # Should be here\n</code></pre></p> <p>Context variables missing: <pre><code># Configure environment properly in jinja2.py\ndef environment(**options):\n    env = Environment(**options)\n    env.globals.update({\n        'static': staticfiles_storage.url,\n        'url': reverse,\n        # Add other global functions here\n    })\n    return env\n</code></pre></p>"},{"location":"getting-started/jinja2-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about HTML Component Syntax for modern component development</li> <li>Explore Props &amp; Attrs for component attribute handling</li> <li>Check out Component Patterns for real-world examples</li> <li>See Icons for the complete icon system guide</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with Django IncludeContents in 5 minutes! This guide assumes you have Django IncludeContents installed with the custom template engine.</p> <p>Template Engine Support</p> <p>This guide uses HTML component syntax (<code>&lt;include:component&gt;</code>). This syntax works with:</p> <ul> <li>Django: Custom template engine required</li> <li>Jinja2: Works automatically with the extension</li> </ul> <p>For template tag syntax (<code>{% includecontents %}</code>), see template tag examples.</p>"},{"location":"getting-started/quickstart/#create-your-first-component","title":"Create Your First Component","text":""},{"location":"getting-started/quickstart/#1-create-a-component-template","title":"1. Create a Component Template","text":"<p>Create a <code>components</code> directory in your templates folder and add your first component:</p> <p>templates/components/welcome-card.html <pre><code>{# props title, subtitle=\"\" #}\n&lt;div class=\"card border rounded-lg p-6 shadow-sm\"&gt;\n    &lt;h2 class=\"text-2xl font-bold text-gray-900\"&gt;{{ title }}&lt;/h2&gt;\n    {% if subtitle %}\n        &lt;p class=\"text-gray-600 mt-2\"&gt;{{ subtitle }}&lt;/p&gt;\n    {% endif %}\n    &lt;div class=\"mt-4\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"getting-started/quickstart/#2-use-the-component","title":"2. Use the Component","text":"<p>In any template, use your component with HTML-like syntax:</p> <p>templates/home.html <pre><code>&lt;include:welcome-card title=\"Welcome!\" subtitle=\"Getting started is easy\"&gt;\n    &lt;p&gt;This is your first Django IncludeContents component!&lt;/p&gt;\n    &lt;p&gt;You can include any HTML content here.&lt;/p&gt;\n&lt;/include:welcome-card&gt;\n</code></pre></p>"},{"location":"getting-started/quickstart/#3-see-the-result","title":"3. See the Result","text":"<p>The component renders as:</p> <pre><code>&lt;div class=\"card border rounded-lg p-6 shadow-sm\"&gt;\n    &lt;h2 class=\"text-2xl font-bold text-gray-900\"&gt;Welcome!&lt;/h2&gt;\n    &lt;p class=\"text-gray-600 mt-2\"&gt;Getting started is easy&lt;/p&gt;\n    &lt;div class=\"mt-4\"&gt;\n        &lt;p&gt;This is your first Django IncludeContents component!&lt;/p&gt;\n        &lt;p&gt;You can include any HTML content here.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"getting-started/quickstart/#understanding-the-example","title":"Understanding the Example","text":"<p>Let's break down what happened:</p> <ol> <li>Component Definition: <code>{# props title, subtitle=\"\" #}</code> defines that this component requires a <code>title</code> and has an optional <code>subtitle</code></li> <li>HTML Syntax: <code>&lt;include:welcome-card&gt;</code> tells Django to render the <code>components/welcome-card.html</code> template</li> <li>Props: <code>title=\"Welcome!\"</code> and <code>subtitle=\"Getting started is easy\"</code> are passed as template variables</li> <li>Content: Everything between the opening and closing tags becomes the <code>{{ contents }}</code> variable</li> </ol>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#using-variables-from-context","title":"Using Variables from Context","text":"<pre><code>&lt;include:welcome-card title=\"{{ user.name }}\" subtitle=\"Welcome back!\"&gt;\n    &lt;p&gt;You have {{ notifications.count }} new notifications.&lt;/p&gt;\n&lt;/include:welcome-card&gt;\n</code></pre>"},{"location":"getting-started/quickstart/#conditional-rendering","title":"Conditional Rendering","text":"<pre><code>{% if user.is_authenticated %}\n    &lt;include:welcome-card title=\"Welcome back, {{ user.name }}!\"&gt;\n        &lt;p&gt;Ready to continue where you left off?&lt;/p&gt;\n    &lt;/include:welcome-card&gt;\n{% else %}\n    &lt;include:welcome-card title=\"Welcome, Guest!\"&gt;\n        &lt;p&gt;&lt;a href=\"{% url 'login' %}\"&gt;Sign in&lt;/a&gt; to get started.&lt;/p&gt;\n    &lt;/include:welcome-card&gt;\n{% endif %}\n</code></pre>"},{"location":"getting-started/quickstart/#named-content-blocks","title":"Named Content Blocks","text":"<p>For more complex components, use named content blocks:</p> <p>templates/components/layout-card.html <pre><code>&lt;div class=\"card\"&gt;\n    &lt;header class=\"card-header\"&gt;\n        {{ contents.header }}\n    &lt;/header&gt;\n    &lt;main class=\"card-body\"&gt;\n        {{ contents }}\n    &lt;/main&gt;\n    {% if contents.footer %}\n        &lt;footer class=\"card-footer\"&gt;\n            {{ contents.footer }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:layout-card&gt;\n    &lt;content:header&gt;\n        &lt;h1&gt;My Title&lt;/h1&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;This is the main content area.&lt;/p&gt;\n\n    &lt;content:footer&gt;\n        &lt;button&gt;Action&lt;/button&gt;\n    &lt;/content:footer&gt;\n&lt;/include:layout-card&gt;\n</code></pre></p>"},{"location":"getting-started/quickstart/#without-the-custom-engine","title":"Without the Custom Engine","text":"<p>If you're using the traditional setup (without the custom template engine), the syntax is slightly different:</p> <pre><code>{% load includecontents %}\n\n{% includecontents \"components/welcome-card.html\" title=\"Welcome!\" subtitle=\"Getting started is easy\" %}\n    &lt;p&gt;This is your first Django IncludeContents component!&lt;/p&gt;\n    &lt;p&gt;You can include any HTML content here.&lt;/p&gt;\n{% endincludecontents %}\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first component, explore more features:</p> <ul> <li>Template Tag Usage: Learn about the <code>{% includecontents %}</code> tag</li> <li>HTML Components: Dive deeper into component syntax</li> <li>Props &amp; Attrs: Master the props system</li> <li>Wrapif Tag: Learn conditional wrapping</li> </ul> <p>Ready to build more complex components? Check out the Component Patterns guide!</p>"},{"location":"icons/styling-with-css-variables/","title":"Advanced Icon Styling","text":"<p>This guide covers advanced techniques for styling icons, particularly using CSS variables to create dynamic, themeable icons that work across the shadow DOM boundary.</p>"},{"location":"icons/styling-with-css-variables/#css-variables-in-icon-sprites","title":"CSS Variables in Icon Sprites","text":"<p>When SVG icons are combined into sprites and used via <code>&lt;use&gt;</code> elements, normal CSS styling faces limitations due to the shadow DOM boundary. However, CSS variables can cross this boundary, enabling powerful styling capabilities.</p> <p>The icon system preserves <code>style</code> attributes that contain CSS variables (e.g., <code>var(--name)</code>), while removing regular inline styles to prevent conflicts.</p>"},{"location":"icons/styling-with-css-variables/#basic-theme-switching","title":"Basic Theme Switching","text":"<p>Create icons that automatically adapt to light/dark modes:</p> <pre><code>&lt;!-- Original icon SVG with CSS variables --&gt;\n&lt;svg&gt;\n  &lt;path style=\"fill: var(--icon-primary)\" d=\"...\" /&gt;\n  &lt;circle style=\"stroke: var(--icon-accent)\" cx=\"...\" /&gt;\n&lt;/svg&gt;\n</code></pre> <pre><code>/* Define theme colors */\n:root {\n  --icon-primary: #1f2937;\n  --icon-accent: #3b82f6;\n}\n\n.dark {\n  --icon-primary: #f3f4f6;\n  --icon-accent: #60a5fa;\n}\n</code></pre> <pre><code>&lt;!-- Icon automatically uses current theme --&gt;\n&lt;icon:myicon /&gt;\n</code></pre>"},{"location":"icons/styling-with-css-variables/#interactive-hover-effects","title":"Interactive Hover Effects","text":"<p>Transform specific parts of icons on hover by combining CSS variables with transforms:</p> <pre><code>&lt;!-- Icon SVG with transform and transition --&gt;\n&lt;svg&gt;\n  &lt;g style=\"transform: var(--icon-transform, none); \n            transform-origin: center;\n            transition: var(--icon-transition, none);\"&gt;\n    &lt;path style=\"fill: var(--icon-color, currentColor)\" d=\"...\" /&gt;\n  &lt;/g&gt;\n&lt;/svg&gt;\n</code></pre> <pre><code>/* Hover animation */\n.interactive-icon {\n  --icon-color: #6b7280;\n  --icon-transform: scale(1);\n  --icon-transition: all 0.2s ease;\n}\n\n.interactive-icon:hover {\n  --icon-color: #3b82f6;\n  --icon-transform: scale(1.1) rotate(5deg);\n}\n</code></pre>"},{"location":"icons/styling-with-css-variables/#multi-part-icon-animation","title":"Multi-Part Icon Animation","text":"<p>Animate different parts of an icon independently:</p> <pre><code>&lt;!-- Icon with multiple animated parts --&gt;\n&lt;svg&gt;\n  &lt;circle style=\"fill: var(--icon-bg, #fff);\n                 transform: var(--icon-bg-scale, scale(1));\n                 transform-origin: center;\n                 transition: var(--icon-bg-transition, none);\" r=\"20\" /&gt;\n  &lt;path style=\"fill: var(--icon-fg, #000);\n               transform: var(--icon-fg-rotate, rotate(0));\n               transform-origin: center;\n               transition: var(--icon-fg-transition, none);\" d=\"...\" /&gt;\n&lt;/svg&gt;\n</code></pre> <pre><code>.animated-icon {\n  --icon-bg: #f3f4f6;\n  --icon-fg: #6b7280;\n  --icon-bg-scale: scale(1);\n  --icon-fg-rotate: rotate(0);\n  --icon-bg-transition: transform 0.3s ease;\n  --icon-fg-transition: transform 0.3s ease, fill 0.2s ease;\n}\n\n.animated-icon:hover {\n  --icon-bg: #dbeafe;\n  --icon-fg: #2563eb;\n  --icon-bg-scale: scale(1.2);\n  --icon-fg-rotate: rotate(180deg);\n}\n</code></pre>"},{"location":"icons/styling-with-css-variables/#state-based-styling","title":"State-Based Styling","text":"<p>Change icon appearance based on application state:</p> <pre><code>&lt;!-- Icon with state-based colors --&gt;\n&lt;svg&gt;\n  &lt;path style=\"fill: var(--status-color)\" d=\"...\" /&gt;\n&lt;/svg&gt;\n</code></pre> <pre><code>.status-icon {\n  --status-color: #6b7280; /* default/idle */\n}\n\n.status-icon.success {\n  --status-color: #10b981;\n}\n\n.status-icon.warning {\n  --status-color: #f59e0b;\n}\n\n.status-icon.error {\n  --status-color: #ef4444;\n}\n</code></pre> <pre><code>&lt;!-- Usage in templates --&gt;\n&lt;icon:status class=\"status-icon {{ status_class }}\" /&gt;\n</code></pre>"},{"location":"icons/styling-with-css-variables/#brand-customization","title":"Brand Customization","text":"<p>Define brand colors once and apply across all icons:</p> <pre><code>:root {\n  /* Brand palette */\n  --brand-primary: #7c3aed;\n  --brand-secondary: #06b6d4;\n  --brand-accent: #f59e0b;\n\n  /* Map to icon variables */\n  --icon-primary: var(--brand-primary);\n  --icon-secondary: var(--brand-secondary);\n}\n\n/* Client-specific overrides */\n.client-acme {\n  --brand-primary: #dc2626;\n  --brand-secondary: #0891b2;\n}\n</code></pre>"},{"location":"icons/styling-with-css-variables/#best-practices","title":"Best Practices","text":""},{"location":"icons/styling-with-css-variables/#1-namespace-your-variables","title":"1. Namespace Your Variables","text":"<p>Use consistent prefixes to avoid conflicts:</p> <pre><code>/* Good */\n--icon-primary-color: #3b82f6;\n--icon-hover-transform: scale(1.1);\n\n/* Avoid */\n--color: #3b82f6;\n--transform: scale(1.1);\n</code></pre>"},{"location":"icons/styling-with-css-variables/#2-provide-fallback-values","title":"2. Provide Fallback Values","text":"<p>Always include fallbacks in your SVG styles:</p> <pre><code>&lt;!-- Good --&gt;\n&lt;path style=\"fill: var(--icon-color, currentColor)\" /&gt;\n\n&lt;!-- Avoid --&gt;\n&lt;path style=\"fill: var(--icon-color)\" /&gt;\n</code></pre>"},{"location":"icons/styling-with-css-variables/#3-keep-transitions-in-svg","title":"3. Keep Transitions in SVG","text":"<p>For best compatibility, define transitions within the SVG itself:</p> <pre><code>&lt;!-- Transitions in the SVG --&gt;\n&lt;g style=\"transition: var(--icon-transition, transform 0.2s ease);\"&gt;\n</code></pre>"},{"location":"icons/styling-with-css-variables/#4-document-your-variables","title":"4. Document Your Variables","text":"<p>Create a reference for your icon variables:</p> <pre><code>/* Icon System Variables\n * --icon-primary: Main icon color\n * --icon-accent: Accent/highlight color\n * --icon-muted: Disabled state color\n * --icon-transform: Transform for hover/active states\n * --icon-transition: Animation timing\n */\n</code></pre>"},{"location":"icons/styling-with-css-variables/#limitations","title":"Limitations","text":"<ul> <li>Only <code>style</code> attributes with CSS variables are preserved</li> <li>Regular inline styles are removed during sprite generation</li> <li>Not all SVG attributes can be controlled via CSS variables</li> <li>Browser support varies for complex SVG/CSS interactions</li> </ul>"},{"location":"icons/styling-with-css-variables/#examples","title":"Examples","text":""},{"location":"icons/styling-with-css-variables/#loading-spinner-with-variable-speed","title":"Loading Spinner with Variable Speed","text":"<pre><code>&lt;svg&gt;\n  &lt;circle style=\"animation: spin var(--spinner-speed, 1s) linear infinite;\n                 stroke: var(--spinner-color, currentColor);\" \n          r=\"10\" fill=\"none\" stroke-width=\"2\" /&gt;\n&lt;/svg&gt;\n\n&lt;style&gt;\n  @keyframes spin {\n    to { transform: rotate(360deg); }\n  }\n\n  .spinner-fast { --spinner-speed: 0.5s; }\n  .spinner-slow { --spinner-speed: 2s; }\n&lt;/style&gt;\n</code></pre>"},{"location":"icons/styling-with-css-variables/#progress-indicator","title":"Progress Indicator","text":"<pre><code>&lt;svg&gt;\n  &lt;rect style=\"width: var(--progress, 0%); \n               fill: var(--progress-color, #3b82f6);\n               transition: width 0.3s ease;\" \n        height=\"4\" /&gt;\n&lt;/svg&gt;\n\n&lt;style&gt;\n  .progress-25 { --progress: 25%; }\n  .progress-50 { --progress: 50%; }\n  .progress-75 { --progress: 75%; }\n  .progress-complete { \n    --progress: 100%; \n    --progress-color: #10b981;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"reference/api-reference/","title":"API Reference","text":"<p>Complete reference for all Django IncludeContents template tags, template engine features, and configuration options.</p>"},{"location":"reference/api-reference/#template-tags","title":"Template Tags","text":""},{"location":"reference/api-reference/#includecontents","title":"<code>{% includecontents %}</code>","text":"<p>Include a template with content blocks.</p> <p>Syntax: <pre><code>{% includecontents template_name [context_vars] %}\n    [content]\n    [{% contents block_name %}content{% endcontents %}]\n{% endincludecontents %}\n</code></pre></p> <p>Parameters: - <code>template_name</code>: String or variable containing the template path - <code>context_vars</code>: Optional keyword arguments to pass to the template</p> <p>Example: <pre><code>{% includecontents \"components/card.html\" title=\"Hello\" count=5 %}\n    Main content\n    {% contents footer %}Footer content{% endcontents %}\n{% endincludecontents %}\n</code></pre></p>"},{"location":"reference/api-reference/#contents","title":"<code>{% contents %}</code>","text":"<p>Define named content blocks within <code>{% includecontents %}</code>.</p> <p>Syntax: <pre><code>{% contents block_name %}content{% endcontents %}\n</code></pre></p> <p>Parameters: - <code>block_name</code>: Name of the content block (available as <code>contents.block_name</code>)</p>"},{"location":"reference/api-reference/#wrapif","title":"<code>{% wrapif %}</code>","text":"<p>Conditionally wrap content with HTML elements.</p> <p>Syntax: <pre><code>{% wrapif condition %}\n    &lt;wrapper&gt;\n        {% contents %}content{% endcontents %}\n    &lt;/wrapper&gt;\n{% endwrapif %}\n</code></pre></p> <p>Shorthand syntax: <pre><code>{% wrapif condition then \"tag\" attr=value %}\n    content\n{% endwrapif %}\n</code></pre></p> <p>Parameters: - <code>condition</code>: Boolean expression to evaluate - <code>tag</code>: HTML tag name (in shorthand syntax) - <code>attr=value</code>: HTML attributes (in shorthand syntax)</p> <p>Conditional variants: - <code>{% wrapelif condition %}</code> - Else-if condition - <code>{% wrapelse %}</code> - Else block</p>"},{"location":"reference/api-reference/#attrs","title":"<code>{% attrs %}</code>","text":"<p>Render component attributes with defaults and class handling.</p> <p>Syntax: <pre><code>{% attrs [attr=default_value] [class=\"classes\"] [class:condition_class=condition] %}\n</code></pre></p> <p>Features: - Default values: <code>{% attrs class=\"default\" %}</code> - Class extension: <code>{% attrs class=\"&amp; additional\" %}</code> (append) - Class prepending: <code>{% attrs class=\"base &amp;\" %}</code> (prepend) - Conditional classes: <code>{% attrs class:active=is_active %}</code> - Grouped attributes: <code>{% attrs.group attr=value %}</code></p>"},{"location":"reference/api-reference/#icon","title":"<code>{% icon %}</code>","text":"<p>Render an icon from the configured icon sprite.</p> <p>Syntax: <pre><code>{% icon icon_name [attr=value] [use.attr=value] [as variable_name] %}\n</code></pre></p> <p>Parameters: - <code>icon_name</code>: Name of the icon (string or variable) - <code>attr=value</code>: Attributes for the SVG element - <code>use.attr=value</code>: Attributes for the USE element (prefixed with <code>use.</code>) - <code>as variable_name</code>: Store the SVG in a context variable instead of rendering</p> <p>Example: <pre><code>{% load icons %}\n{% icon \"home\" class=\"w-6 h-6\" %}\n{% icon \"user\" class=\"avatar\" use.role=\"img\" use.aria-label=\"Profile\" %}\n\n{# Store in variable for conditional rendering #}\n{% icon \"optional-icon\" class=\"w-4 h-4\" as my_icon %}\n{% if my_icon %}{{ my_icon }}{% endif %}\n</code></pre></p> <p>Generated output: <pre><code>&lt;svg class=\"w-6 h-6\"&gt;&lt;use href=\"#home\"&gt;&lt;/use&gt;&lt;/svg&gt;\n&lt;svg class=\"avatar\"&gt;&lt;use role=\"img\" aria-label=\"Profile\" href=\"#user\"&gt;&lt;/use&gt;&lt;/svg&gt;\n</code></pre></p> <p>Behavior: - Invalid/non-existent icons render nothing (empty string) - With <code>as variable</code>: invalid icons store empty string in the variable</p>"},{"location":"reference/api-reference/#icons_inline","title":"<code>{% icons_inline %}</code>","text":"<p>Output the entire SVG sprite sheet inline in the page.</p> <p>Syntax: <pre><code>{% icons_inline %}\n</code></pre></p> <p>Usage: - Use in development mode for immediate icon updates - Place before closing <code>&lt;/body&gt;</code> tag for best performance - Not needed in production when sprites are served as static files</p> <p>Example: <pre><code>{% load icons %}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;!-- Page content --&gt;\n    {% icons_inline %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#icon_sprite_url","title":"<code>{% icon_sprite_url %}</code>","text":"<p>Get the URL to the generated sprite file.</p> <p>Syntax: <pre><code>{% icon_sprite_url %}\n</code></pre></p> <p>Usage: - Returns the URL in production mode when sprites are on disk - Returns empty string in development mode - Useful for preloading or custom sprite loading</p> <p>Example: <pre><code>{% icon_sprite_url as sprite_url %}\n{% if sprite_url %}\n    &lt;link rel=\"preload\" href=\"{{ sprite_url }}\" as=\"image\" type=\"image/svg+xml\"&gt;\n{% endif %}\n</code></pre></p>"},{"location":"reference/api-reference/#template-filters","title":"Template Filters","text":""},{"location":"reference/api-reference/#not","title":"<code>|not</code>","text":"<p>Negate boolean values, useful for conditional classes.</p> <p>Syntax: <pre><code>{{ value|not }}\n</code></pre></p> <p>Example: <pre><code>&lt;include:button class:disabled=\"{{ enabled|not }}\"&gt;\n    Click me\n&lt;/include:button&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#html-component-syntax","title":"HTML Component Syntax","text":""},{"location":"reference/api-reference/#component-tags","title":"Component Tags","text":"<p>Syntax: <pre><code>&lt;include:component-name [attributes]&gt;\n    [content]\n    [&lt;content:block-name&gt;content&lt;/content:block-name&gt;]\n&lt;/include:component-name&gt;\n</code></pre></p> <p>Self-closing: <pre><code>&lt;include:component-name [attributes] /&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#component-discovery","title":"Component Discovery","text":"<p>Components are discovered from <code>templates/components/</code> directory:</p> File Path Component Tag <code>components/card.html</code> <code>&lt;include:card&gt;</code> <code>components/forms/field.html</code> <code>&lt;include:forms:field&gt;</code> <code>components/ui/button.html</code> <code>&lt;include:ui:button&gt;</code>"},{"location":"reference/api-reference/#icon-tags","title":"Icon Tags","text":"<p>Syntax: <pre><code>&lt;icon:icon-name [attributes] [use.attributes] /&gt;\n</code></pre></p> <p>Parameters: - <code>icon-name</code>: Name of the configured icon - <code>attributes</code>: Attributes for the SVG element - <code>use.attributes</code>: Attributes for the USE element (prefixed with <code>use.</code>)</p> <p>Examples: <pre><code>&lt;!-- Basic icon --&gt;\n&lt;icon:home class=\"w-6 h-6\" /&gt;\n\n&lt;!-- With accessibility attributes --&gt;\n&lt;icon:user class=\"avatar\" use.role=\"img\" use.aria-label=\"User profile\" /&gt;\n\n&lt;!-- With dynamic classes --&gt;\n&lt;icon:star class=\"icon\" class:filled=\"{{ is_favorite }}\" /&gt;\n</code></pre></p> <p>Generated output: <pre><code>&lt;svg class=\"w-6 h-6\"&gt;&lt;use href=\"#mdi-home\"&gt;&lt;/use&gt;&lt;/svg&gt;\n&lt;svg class=\"avatar\"&gt;&lt;use role=\"img\" aria-label=\"User profile\" href=\"#tabler-user\"&gt;&lt;/use&gt;&lt;/svg&gt;\n&lt;svg class=\"icon filled\"&gt;&lt;use href=\"#lucide-star\"&gt;&lt;/use&gt;&lt;/svg&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#attribute-syntax","title":"Attribute Syntax","text":"<p>String attributes: <pre><code>&lt;include:card title=\"Hello\" class=\"my-card\" /&gt;\n</code></pre></p> <p>Variable attributes: <pre><code>&lt;include:card title=\"{{ title }}\" user=\"{{ user }}\" /&gt;\n</code></pre></p> <p>Shorthand attributes: <pre><code>&lt;include:card {title} {user} /&gt;\n&lt;!-- Equivalent to: title=\"{{ title }}\" user=\"{{ user }}\" --&gt;\n</code></pre></p> <p>Template expressions: <pre><code>&lt;include:card \n    title=\"{% if user %}Welcome {{ user.name }}{% else %}Welcome{% endif %}\"\n    href=\"{% url 'profile' user.pk %}\"\n    class=\"card {% if featured %}featured{% endif %}\"\n/&gt;\n</code></pre></p> <p>Conditional classes: <pre><code>&lt;include:button class:active=\"{{ is_active }}\" class:disabled=\"{{ is_disabled }}\"&gt;\n    Click me\n&lt;/include:button&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#content-blocks","title":"Content Blocks","text":"<p>HTML content syntax: <pre><code>&lt;include:card&gt;\n    Main content\n    &lt;content:header&gt;Header content&lt;/content:header&gt;\n    &lt;content:footer&gt;Footer content&lt;/content:footer&gt;\n&lt;/include:card&gt;\n</code></pre></p> <p>Mixed syntax: <pre><code>&lt;include:card&gt;\n    Main content\n    &lt;content:header&gt;HTML syntax header&lt;/content:header&gt;\n    {% contents footer %}Traditional syntax footer{% endcontents %}\n&lt;/include:card&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#component-props-system","title":"Component Props System","text":""},{"location":"reference/api-reference/#props-definition","title":"Props Definition","text":"<p>Define component props in template comments:</p> <p>Syntax: <pre><code>{# props prop1, prop2=default, prop3=value #}\n</code></pre></p> <p>Types of props: - Required: <code>title</code> (no default value) - Optional with default: <code>visible=True</code>, <code>count=0</code>, <code>text=\"default\"</code> - Optional without default: <code>description=\"\"</code>, <code>callback=None</code></p> <p>Example: <pre><code>{# props title, subtitle=\"\", priority=\"normal\", show_meta=True #}\n&lt;div class=\"article priority-{{ priority }}\"&gt;\n    &lt;h1&gt;{{ title }}&lt;/h1&gt;\n    {% if subtitle %}&lt;h2&gt;{{ subtitle }}&lt;/h2&gt;{% endif %}\n    &lt;div&gt;{{ contents }}&lt;/div&gt;\n    {% if show_meta %}\n        &lt;footer&gt;Priority: {{ priority }}&lt;/footer&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#enum-props","title":"Enum Props","text":"<p>Define props with allowed values:</p> <p>Syntax: <pre><code>{# props variant=primary,secondary,danger #}\n</code></pre></p> <p>Optional enums (start with empty value): <pre><code>{# props size=,small,medium,large #}\n</code></pre></p> <p>Usage: <pre><code>&lt;!-- Single value --&gt;\n&lt;include:button variant=\"primary\"&gt;Click me&lt;/include:button&gt;\n\n&lt;!-- Multiple values (space-separated) --&gt;\n&lt;include:button variant=\"primary large\"&gt;Big Primary Button&lt;/include:button&gt;\n</code></pre></p> <p>Generated variables for single value (<code>variant=\"primary\"</code>): - <code>variant</code> - The prop value (<code>\"primary\"</code>) - <code>variantPrimary</code> - Boolean (<code>True</code>) - <code>variantSecondary</code> - Boolean (<code>False</code>)</p> <p>Generated variables for multiple values (<code>variant=\"primary large\"</code>): - <code>variant</code> - The full value (<code>\"primary large\"</code>) - <code>variantPrimary</code> - Boolean (<code>True</code>) - <code>variantLarge</code> - Boolean (<code>True</code>) - Other boolean flags remain <code>False</code></p>"},{"location":"reference/api-reference/#attrs-variable","title":"Attrs Variable","text":"<p>Undefined attributes are collected in <code>attrs</code>:</p> <p>Access methods: - <code>{{ attrs }}</code> - Render all attributes as HTML - <code>{{ attrs.attrName }}</code> - Access individual attribute (camelCase) - <code>{% attrs %}</code> - Render with defaults and class handling - <code>{% attrs.group %}</code> - Render grouped attributes</p> <p>Kebab-case conversion: <pre><code>&lt;!-- Usage --&gt;\n&lt;include:card data-user-id=\"123\" my-custom-attr=\"value\" /&gt;\n\n&lt;!-- In component --&gt;\n{# props #}\n&lt;div data-id=\"{{ attrs.dataUserId }}\" custom=\"{{ attrs.myCustomAttr }}\"&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"reference/api-reference/#template-engine-features","title":"Template Engine Features","text":""},{"location":"reference/api-reference/#multi-line-template-tags","title":"Multi-line Template Tags","text":"<p>The custom template engine supports multi-line template tags:</p> <pre><code>{% if \n    user.is_authenticated \n    and user.is_staff \n    and user.has_perm('myapp.view_admin')\n%}\n    Admin content\n{% endif %}\n\n{% includecontents \"complex-component.html\"\n    title=\"Long Title Here\"\n    description=\"A very long description that spans multiple lines\"\n    data=complex_data_structure\n%}\n    Content\n{% endincludecontents %}\n</code></pre>"},{"location":"reference/api-reference/#auto-loaded-template-tags","title":"Auto-loaded Template Tags","text":"<p>When using the custom template engine, these tags are automatically available: - <code>includecontents</code> - <code>contents</code> - <code>wrapif</code>, <code>wrapelif</code>, <code>wrapelse</code> - <code>attrs</code> - <code>not</code> filter - <code>icon</code>, <code>icons_inline</code>, <code>icon_sprite_url</code> (icon tags)</p> <p>No need to use <code>{% load includecontents %}</code> or <code>{% load icons %}</code>.</p>"},{"location":"reference/api-reference/#configuration","title":"Configuration","text":""},{"location":"reference/api-reference/#template-engine-settings","title":"Template Engine Settings","text":"<p>Replace Django's default template backend:</p> <pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"reference/api-reference/#traditional-setup","title":"Traditional Setup","text":"<p>Without the custom engine, add to <code>INSTALLED_APPS</code>:</p> <pre><code>INSTALLED_APPS = [\n    # ... other apps\n    'includecontents',\n]\n</code></pre> <p>Then load tags in templates: <pre><code>{% load includecontents %}\n</code></pre></p>"},{"location":"reference/api-reference/#icons-configuration","title":"Icons Configuration","text":"<p>Configure the icons system in your settings:</p> <pre><code>INCLUDECONTENTS_ICONS = {\n    # Required: List of icons to include\n    'icons': [\n        'mdi:home',                      # Iconify icons\n        'tabler:user',\n        ('custom-name', 'mdi:house'),    # Custom names with tuples\n        'icons/logo.svg',                # Local SVG files from static files\n        ('brand', 'logos/company.svg'),\n    ],\n\n    # Optional: Development mode (default: DEBUG)\n    'dev_mode': True,\n\n    # Optional: Cache timeout in seconds (default: 3600)\n    'cache_timeout': 3600,\n\n    # Optional: Iconify API base URL (default: 'https://api.iconify.design')\n    'api_base': 'https://api.iconify.design',\n}\n</code></pre> <p>Icon sources: - Iconify icons: Use prefix notation like <code>mdi:home</code>, <code>tabler:calendar</code> - Local SVG files: Place in static directories, reference by path (must end with <code>.svg</code>) - Custom names: Use tuples for custom component names</p>"},{"location":"reference/api-reference/#context-variables","title":"Context Variables","text":""},{"location":"reference/api-reference/#available-in-components","title":"Available in Components","text":"<p>Components have access to these automatic context variables:</p> <ul> <li><code>contents</code> - Main content block</li> <li><code>contents.block_name</code> - Named content blocks  </li> <li><code>attrs</code> - Undefined attributes object</li> <li>Any explicitly passed props/attributes</li> </ul> <p>Context processor variables are automatically available: - <code>request</code> - HTTP request object (from <code>context_processors.request</code>) - <code>user</code> - Current user (from <code>context_processors.auth</code>) - <code>csrf_token</code> - CSRF token (from Django's CSRF middleware) - Any custom context processor variables</p>"},{"location":"reference/api-reference/#context-isolation","title":"Context Isolation","text":"<p>Components run in isolated context: - Parent template variables are NOT inherited - Only explicitly passed variables are available - Exception: Context processor variables are always available - Ensures predictable, reusable components</p>"},{"location":"reference/api-reference/#error-handling","title":"Error Handling","text":""},{"location":"reference/api-reference/#common-errors","title":"Common Errors","text":"<p>TemplateDoesNotExist: <pre><code>Template 'components/nonexistent.html' does not exist\n</code></pre></p> <p>TemplateSyntaxError (missing required prop): <pre><code>Missing required prop 'title' for component 'card'\n</code></pre></p> <p>TemplateSyntaxError (invalid enum value): <pre><code>Invalid value 'invalid' for enum prop 'variant'. Must be one of: primary, secondary, danger\n</code></pre></p> <p>TemplateSyntaxError (malformed component): <pre><code>Invalid component syntax: unclosed tag 'include:card'\n</code></pre></p>"},{"location":"reference/api-reference/#debug-tips","title":"Debug Tips","text":"<ol> <li>Check component file exists in <code>templates/components/</code></li> <li>Verify required props are provided</li> <li>Check enum values match defined options</li> <li>Validate HTML syntax in component usage</li> <li>Use Django's template debugging for detailed error info</li> </ol>"},{"location":"reference/api-reference/#performance-notes","title":"Performance Notes","text":"<ul> <li>Template caching: Components benefit from Django's template caching</li> <li>Context isolation: Minimal overhead for creating isolated contexts</li> <li>Attribute parsing: Parsed once during template compilation</li> <li>Content rendering: Similar performance to standard <code>{% include %}</code> tags</li> </ul>"},{"location":"reference/api-reference/#compatibility","title":"Compatibility","text":"<ul> <li>Django: 3.2+ (LTS), 4.0+, 4.1+, 4.2+ (LTS), 5.0+</li> <li>Python: 3.8+, 3.9+, 3.10+, 3.11+, 3.12+</li> <li>Template engines: Django templates AND Jinja2 templates</li> </ul>"},{"location":"reference/api-reference/#template-engine-support","title":"Template Engine Support","text":"Feature Django Templates Jinja2 Notes <code>{% includecontents %}</code> tag \u2705 Full support \u2705 Full support Core template tag functionality HTML component syntax (<code>&lt;include:component&gt;</code>) \u2705 Full support \u2705 Full support Via preprocessing in Jinja2 Props system \u2705 Full support \u2705 Full support Shared props validation system Named content blocks \u2705 Full support \u2705 Full support <code>{% contents name %}</code> syntax Context isolation \u2705 Full support \u2705 Full support Configurable in Jinja2 Attrs object \u2705 Full support \u2705 Full support Undefined attribute collection Multi-line tags \u2705 Full support \u2705 Native support Built into Jinja2 <p>Dual Template Engine Support</p> <p>Django IncludeContents supports both Django templates and Jinja2 with feature parity! Choose the template engine that best fits your project.</p> <p>Setup guides: - Django Templates - Jinja2 Templates</p> <p>The custom template engine is fully compatible with Django's standard template features and can be used as a drop-in replacement for <code>django.template.backends.django.DjangoTemplates</code>.</p>"},{"location":"reference/development/","title":"Development Guide","text":"<p>This guide is for developers who want to contribute to Django IncludeContents or understand its internals.</p>"},{"location":"reference/development/#quick-start-for-contributors","title":"Quick Start for Contributors","text":""},{"location":"reference/development/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/SmileyChris/django-includecontents.git\ncd django-includecontents\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code># Install package with test dependencies\npip install -e \".[test]\"\n\n# Or install all dependencies (including deployment tools)\npip install -e \".[test,deploy]\"\n</code></pre></p> </li> <li> <p>Run tests to verify setup: <pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=includecontents\n</code></pre></p> </li> </ol>"},{"location":"reference/development/#development-workflow","title":"Development Workflow","text":""},{"location":"reference/development/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the project's coding standards</p> </li> <li> <p>Write tests for new functionality</p> </li> <li> <p>Run the test suite: <pre><code># Run all tests\npytest\n\n# Run a specific test file\npytest tests/test_tag.py\n\n# Run a specific test\npytest tests/test_tag.py::test_basic -v\n</code></pre></p> </li> <li> <p>Check code formatting (if applicable):    <pre><code># Format Django/Jinja templates (requires npm)\nnpm install\nnpx prettier --write \"**/{templates,jinja2}/**/*.html\"\n</code></pre></p> </li> </ol>"},{"location":"reference/development/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write tests for all new features</li> <li>Ensure existing tests pass</li> <li>Test both template tag and HTML component syntaxes</li> <li>Include edge cases and error conditions</li> </ul> <p>Test Structure: <pre><code>tests/\n\u251c\u2500\u2500 settings.py          # Test Django settings\n\u251c\u2500\u2500 templates/           # Test templates\n\u2502   \u2514\u2500\u2500 components/      # Test component templates\n\u251c\u2500\u2500 test_tag.py          # Template tag functionality\n\u251c\u2500\u2500 test_component.py    # HTML component syntax\n\u251c\u2500\u2500 test_csrf.py         # CSRF token propagation\n\u2514\u2500\u2500 test_multiline.py    # Multi-line tag support\n</code></pre></p>"},{"location":"reference/development/#creating-documentation","title":"Creating Documentation","text":""},{"location":"reference/development/#running-documentation-locally","title":"Running Documentation Locally","text":"<ol> <li> <p>Install documentation dependencies: <pre><code>pip install -e \".[docs]\"\n</code></pre></p> </li> <li> <p>Serve documentation locally: <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Build documentation: <pre><code>mkdocs build\n</code></pre></p> </li> </ol>"},{"location":"reference/development/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Update relevant documentation for any user-facing changes</li> <li>Include code examples in documentation</li> <li>Test documentation examples to ensure they work</li> <li>Follow the existing documentation structure</li> </ul>"},{"location":"reference/development/#changelog-management","title":"Changelog Management","text":"<p>This project uses towncrier for changelog management.</p>"},{"location":"reference/development/#adding-changelog-entries","title":"Adding Changelog Entries","text":"<p>Create news fragments for your changes in the <code>changes/</code> directory:</p> <pre><code># Create a news fragment for a new feature\n# Format: changes/+description.feature.md\necho \"Description of the feature\" &gt; changes/+my-feature.feature.md\n\n# Other fragment types:\n# changes/+fix-name.bugfix.md     # Bug fixes\n# changes/+docs.doc.md            # Documentation improvements\n# changes/+remove-name.removal.md # Removals\n# changes/+misc-name.misc.md      # Miscellaneous\n</code></pre>"},{"location":"reference/development/#fragment-naming-conventions","title":"Fragment Naming Conventions","text":"<ul> <li>For new features: <code>+descriptive-name.feature.md</code> </li> <li>For GitHub issue fixes: <code>123.bugfix.md</code> (where 123 is the issue number)</li> <li>For other bug fixes: <code>+fix-description.bugfix.md</code></li> <li>For documentation: <code>+docs-description.doc.md</code></li> <li>For removals: <code>+remove-description.removal.md</code></li> <li>For miscellaneous: <code>+misc-description.misc.md</code></li> </ul>"},{"location":"reference/development/#examples","title":"Examples","text":"<pre><code># New feature (use + prefix with description):\necho \"Add support for Django template tags in component attributes\" &gt; changes/+template-tags-in-attributes.feature.md\n\n# GitHub issue fix (use issue number):\necho \"Fix component rendering with special characters\" &gt; changes/42.bugfix.md\n\n# Other bug fix (use + prefix):\necho \"Fix memory leak in template caching\" &gt; changes/+fix-memory-leak.bugfix.md\n</code></pre> <p>Important: Never edit <code>CHANGES.md</code> directly - it's generated automatically by towncrier during releases.</p>"},{"location":"reference/development/#architecture-overview","title":"Architecture Overview","text":""},{"location":"reference/development/#package-structure","title":"Package Structure","text":"<pre><code>includecontents/\n\u251c\u2500\u2500 __init__.py                     # Package initialization\n\u251c\u2500\u2500 templatetags/\n\u2502   \u2514\u2500\u2500 includecontents.py         # Core template tag implementation\n\u251c\u2500\u2500 django/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py                     # Custom template engine base\n\u2502   \u251c\u2500\u2500 engine.py                   # Custom Django template engine\n\u2502   \u2514\u2500\u2500 loaders.py                  # Template loaders\n\u2514\u2500\u2500 next_version.py                 # Version management\n</code></pre>"},{"location":"reference/development/#key-components","title":"Key Components","text":""},{"location":"reference/development/#1-template-tag-templatetagsincludecontentspy","title":"1. Template Tag (<code>templatetags/includecontents.py</code>)","text":"<ul> <li>Core <code>{% includecontents %}</code> tag implementation</li> <li>Context isolation logic</li> <li>Content block processing</li> <li>Props validation</li> </ul>"},{"location":"reference/development/#2-custom-template-engine-django","title":"2. Custom Template Engine (<code>django/</code>)","text":"<ul> <li>HTML component syntax parsing (<code>base.py</code>)</li> <li>Template engine integration (<code>engine.py</code>)</li> <li>Custom template loaders (<code>loaders.py</code>)</li> </ul>"},{"location":"reference/development/#3-testing-framework-tests","title":"3. Testing Framework (<code>tests/</code>)","text":"<ul> <li>Comprehensive test suite</li> <li>Test templates and components</li> <li>Integration and unit tests</li> </ul>"},{"location":"reference/development/#design-principles","title":"Design Principles","text":"<ol> <li>Context Isolation: Components run in isolated contexts for predictability</li> <li>Backward Compatibility: Template tag syntax always supported</li> <li>HTML-like Syntax: Modern component syntax feels familiar</li> <li>Django Integration: Works seamlessly with Django's template system</li> </ol>"},{"location":"reference/development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"reference/development/#code-standards","title":"Code Standards","text":"<ul> <li>Follow Django coding conventions</li> <li>Write comprehensive tests</li> <li>Document new features</li> <li>Maintain backward compatibility</li> </ul>"},{"location":"reference/development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes with tests</li> <li>Create changelog fragment</li> <li>Submit pull request</li> </ol>"},{"location":"reference/development/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>Discussions: Questions and community help</li> <li>Documentation: Complete feature documentation</li> </ul>"},{"location":"reference/development/#troubleshooting-development-issues","title":"Troubleshooting Development Issues","text":""},{"location":"reference/development/#common-setup-issues","title":"Common Setup Issues","text":"<p>Tests not running: <pre><code># Ensure you're in the project directory\ncd django-includecontents\n\n# Install in development mode\npip install -e \".[test]\"\n\n# Run tests with verbose output\npytest -v\n</code></pre></p> <p>Documentation not building: <pre><code># Install docs dependencies\npip install -e \".[docs]\"\n\n# Check for missing dependencies\nmkdocs build --verbose\n</code></pre></p>"},{"location":"reference/development/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Use <code>uv run</code> for consistent environments</li> <li>Enable Django template debugging</li> <li>Run specific test files for faster feedback</li> <li>Use print statements in template tags for debugging</li> </ol>"},{"location":"reference/development/#release-process","title":"Release Process","text":"<p>The release process for Django IncludeContents uses manual GitHub Actions workflows for complete control over releases.</p>"},{"location":"reference/development/#creating-a-release","title":"Creating a Release","text":"<p>1. Ensure there are changelog fragments for changes (see Changelog Management above)</p> <p>2. Run the Release workflow:</p> <ul> <li>Go to the GitHub repository Actions tab</li> <li>Select \"Release new version\" workflow</li> <li>Click \"Run workflow\"</li> <li>Choose the version bump type: <code>patch</code>, <code>minor</code>, or <code>major</code></li> </ul> <p>The release workflow will automatically:</p> <ol> <li>Calculate the next version number</li> <li>Generate changelog from fragments using towncrier</li> <li>Commit the updated CHANGES.md</li> <li>Create and push a git tag</li> <li>Create a GitHub release with release notes</li> </ol> <p>3. Deploy to PyPI:</p> <ul> <li>Go to the GitHub repository Actions tab</li> <li>Select \"Publish to PyPI\" workflow</li> <li>Click \"Run workflow\"</li> <li>Confirm the deployment</li> </ul>"},{"location":"reference/development/#deploy-manually-alternative","title":"Deploy Manually (Alternative)","text":"<p>If you need to deploy without using the GitHub Actions workflow:</p> <p>1. Install dependencies: <pre><code>python -m pip install -e .[deploy]\npython -m pip install towncrier\n</code></pre></p> <p>2. Get next version number: <pre><code># Replace 'patch' with 'minor' or 'major' as needed\nexport VERSION=$(python -m includecontents.next_version patch)\necho \"Next version: $VERSION\"\n</code></pre></p> <p>3. Generate release notes: <pre><code>towncrier build --draft --version $VERSION\n</code></pre></p> <p>4. Build full changelog: <pre><code>towncrier build --yes --name \"Version\" --version $VERSION\n</code></pre></p> <p>5. Commit changelog and create tag: <pre><code>git config user.name \"Your Name\"\ngit config user.email \"your.email@example.com\"\ngit commit -am \"Update CHANGES for $VERSION\"\ngit tag \"v$VERSION\" --file=/tmp/changes.txt --cleanup=whitespace\ngit push --follow-tags\n</code></pre></p> <p>6. Create GitHub release: <pre><code>gh release create \"v$VERSION\" --title \"$VERSION\" --notes-from-tag --verify-tag\n</code></pre></p> <p>7. Deploy to PyPI: <pre><code># Ensure you're on the release version\npython -m includecontents.next_version\n# Publish to PyPI\npdm publish\n</code></pre></p> <p>Manual Deployment</p> <p>Manual deployment bypasses the automated checks and should only be used in exceptional circumstances. The GitHub Actions workflow is the preferred method.</p>"},{"location":"reference/development/#release-checklist","title":"Release Checklist","text":"<ul> <li>[ ] All tests pass</li> <li>[ ] Documentation is updated</li> <li>[ ] Changelog fragment created in <code>changes/</code> directory</li> <li>[ ] \"Release new version\" workflow completed successfully</li> <li>[ ] GitHub release created with correct version and notes</li> <li>[ ] \"Publish to PyPI\" workflow completed successfully</li> <li>[ ] Package available on PyPI</li> <li>[ ] Release announcement (if applicable)</li> </ul>"},{"location":"reference/development/#changelog","title":"Changelog","text":"<p>This page shows the complete changelog for Django IncludeContents.</p> <p>The full changelog is maintained in CHANGES.md and is automatically generated using towncrier.</p>"},{"location":"reference/development/#latest-changes","title":"Latest Changes","text":""},{"location":"reference/development/#change-log","title":"Change Log","text":"<p>This log shows interesting changes that happen for each release of <code>django-includecontents</code>.</p>"},{"location":"reference/development/#version-40-2025-09-29","title":"Version 4.0 (2025-09-29)","text":""},{"location":"reference/development/#features","title":"Features","text":"<ul> <li>Add comprehensive Jinja2 template engine support with full Django template parity for HTML component syntax, including JavaScript framework attributes (@click, v-model, x-data), nested attributes, HTML content blocks, CSRF token handling, consistent escaping behavior, and proper undefined variable rendering</li> </ul>"},{"location":"reference/development/#version-312-2025-08-14","title":"Version 3.1.2 (2025-08-14)","text":""},{"location":"reference/development/#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix WrapIfNode to properly handle node traversal for Django's template debugging tools. The node now correctly implements get_nodes_by_type() to traverse all dynamic content blocks within wrapif tags.</li> </ul>"},{"location":"reference/development/#version-311-2025-08-06","title":"Version 3.1.1 (2025-08-06)","text":""},{"location":"reference/development/#features_1","title":"Features","text":"<ul> <li>Improved icon error reporting to show all missing or invalid icons at once, making it easier for developers to fix configuration issues in a single pass</li> </ul>"},{"location":"reference/development/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Fixed compatibility issue with Django 5.2 where invalid icons could cause a TypeError in static file serving instead of returning a proper 404 error</li> </ul>"},{"location":"reference/development/#version-31-2025-08-06","title":"Version 3.1 (2025-08-06)","text":""},{"location":"reference/development/#features_2","title":"Features","text":"<ul> <li>Add file-based caching system for Iconify API responses to improve performance and enable offline development. Icons fetched from the Iconify API can now be cached locally and reused in subsequent builds, configured via <code>api_cache_root</code> and <code>api_cache_static_path</code> settings.</li> <li>Icon sprites now preserve <code>style</code> attributes containing CSS variables (e.g., <code>style=\"fill: var(--icon-color)\"</code>), enabling advanced theming and interactive hover effects that work across the shadow DOM boundary. See the new Styling with CSS Variables documentation for examples.</li> </ul>"},{"location":"reference/development/#version-301-2025-08-06","title":"Version 3.0.1 (2025-08-06)","text":""},{"location":"reference/development/#features_3","title":"Features","text":"<ul> <li>Icon sprite build failures now fail loudly with clear error messages instead of silently returning empty SVGs. This makes configuration errors, missing files, and API failures immediately visible during development and deployment.</li> </ul>"},{"location":"reference/development/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Fixed icon symbol IDs to use component names (e.g., \"home\") instead of full identifiers (e.g., \"mdi-home\"). Icons are now consistently referenced by their component names in both templates and generated sprites.</li> </ul>"},{"location":"reference/development/#deprecations-and-removals","title":"Deprecations and Removals","text":"<ul> <li>Removed all storage backend classes and configuration. The icon system now uses only in-memory caching with Django's static files system for production serving. This is a breaking change - remove <code>storage</code> and <code>storage_options</code> from your <code>INCLUDECONTENTS_ICONS</code> settings.</li> </ul>"},{"location":"reference/development/#misc","title":"Misc","text":"<ul> <li>Simplified icon system architecture by removing 1,360+ lines of code. Sprites are now cached in memory during development and served from STATIC_ROOT in production via standard Django static files, eliminating the need for complex storage configuration.</li> </ul>"},{"location":"reference/development/#version-30-2025-08-06","title":"Version 3.0 (2025-08-06)","text":""},{"location":"reference/development/#features_4","title":"Features","text":"<ul> <li>Add icon system with automatic SVG sprite generation. Features <code>{% icon %}</code> template tag and <code>&lt;icon:name&gt;</code> HTML syntax support.</li> </ul>"},{"location":"reference/development/#version-252-2025-08-04","title":"Version 2.5.2 (2025-08-04)","text":""},{"location":"reference/development/#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Fix context processor variables not being available in nested HTML components</li> </ul>"},{"location":"reference/development/#version-251-2025-08-01","title":"Version 2.5.1 (2025-08-01)","text":""},{"location":"reference/development/#bugfixes_4","title":"Bugfixes","text":"<ul> <li>Fix JavaScript event modifiers like @click.stop not being passed to child components</li> </ul>"},{"location":"reference/development/#version-25-2025-07-25","title":"Version 2.5 (2025-07-25)","text":""},{"location":"reference/development/#features_5","title":"Features","text":"<ul> <li>Add <code>...attrs</code> spread syntax to forward undefined attributes from parent to child components</li> </ul>"},{"location":"reference/development/#version-241-2025-07-24","title":"Version 2.4.1 (2025-07-24)","text":""},{"location":"reference/development/#bugfixes_5","title":"Bugfixes","text":"<ul> <li>Fix object passing in component attributes to preserve actual objects instead of string representations when using pure variable syntax like <code>deck=\"{{ deck }}\"</code>.</li> </ul>"},{"location":"reference/development/#version-24-2025-07-24","title":"Version 2.4 (2025-07-24)","text":""},{"location":"reference/development/#features_6","title":"Features","text":"<ul> <li>Add support for JavaScript framework event attributes like <code>@click</code>, <code>v-on:</code>, <code>x-on:</code>, and <code>:</code> (binding shorthand) in component attributes</li> <li>Add support for mixed content in component attributes, allowing combinations of static text and Django template syntax (e.g., <code>class=\"btn {{ variant }}\"</code>, <code>href=\"/products/{{ id }}/\"</code>, and even template tags like <code>class=\"{% if active %}active{% endif %}\"</code>).</li> </ul>"},{"location":"reference/development/#version-23-2025-07-23","title":"Version 2.3 (2025-07-23)","text":""},{"location":"reference/development/#features_7","title":"Features","text":"<ul> <li>HTML-based components now have access to all context variables provided by context processors, not just the request object and CSRF token</li> </ul> <p>This ensures consistent behavior between HTML components and regular Django templates.</p>"},{"location":"reference/development/#version-22-2025-07-22","title":"Version 2.2 (2025-07-22)","text":""},{"location":"reference/development/#features_8","title":"Features","text":"<ul> <li>Support multiple space-separated values in enum props (e.g., <code>variant=\"primary icon\"</code>) to enable combining visual modifiers.</li> </ul>"},{"location":"reference/development/#bugfixes_6","title":"Bugfixes","text":"<ul> <li>Fix parsing of multiline closing tags (e.g., <code>&lt;/include:item\\n&gt;</code>) in HTML component syntax.</li> </ul>"},{"location":"reference/development/#version-211-2025-07-02","title":"Version 2.1.1 (2025-07-02)","text":""},{"location":"reference/development/#bugfixes_7","title":"Bugfixes","text":"<ul> <li>Fixed self-closing component tags within nested components incorrectly incrementing the nesting level, causing \"Unclosed tag\" errors.</li> </ul>"},{"location":"reference/development/#version-21-2025-07-02","title":"Version 2.1 (2025-07-02)","text":""},{"location":"reference/development/#features_9","title":"Features","text":"<ul> <li>Add Django template tag support in component attributes. Component attributes now fully support Django template syntax including <code>{% url %}</code>, <code>{{ variables }}</code>, <code>{% if %}</code> conditionals, and all other template tags.</li> </ul> <pre><code>&lt;include:ui-button \n  variant=\"primary\" \n  href=\"{% url 'settings' %}\" \n  class=\"btn {% if large %}btn-lg{% endif %}\"\n&gt;\n  Save Settings\n&lt;/include:ui-button&gt;\n</code></pre>"},{"location":"reference/development/#bugfixes_8","title":"Bugfixes","text":"<ul> <li>Fix duplicate content block names error when nesting components with same named content blocks</li> </ul>"},{"location":"reference/development/#version-20-2025-07-01","title":"Version 2.0 (2025-07-01)","text":""},{"location":"reference/development/#features_10","title":"Features","text":"<ul> <li>Add HTML-style <code>&lt;content:name&gt;</code> syntax for named content blocks in components. This provides a more HTML-consistent alternative to <code>{% contents %}</code> tags while maintaining full backwards compatibility.</li> <li>Add class prepend syntax for component attrs.</li> </ul> <p>Classes can now be prepended with <code>{% attrs class=\"card &amp;\" %}</code> syntax.</p> <ul> <li>Append <code>\" &amp;\"</code> to prepend component classes before user-provided classes</li> <li>Complements existing <code>\"&amp; \"</code> syntax which appends after user classes</li> <li>Useful when CSS specificity or utility class ordering matters</li> <li>Add enum validation for component props.</li> </ul> <p>Props can now be defined with allowed values: <code>{# props variant=primary,secondary,accent #}</code></p> <ul> <li>Validates prop values against the allowed list</li> <li>Sets both the prop value and a camelCased boolean (e.g., <code>variant=\"primary\"</code> and <code>variantPrimary=True</code>)</li> <li>Optional enums start with empty: <code>size=,small,medium,large</code></li> <li>Hyphens are camelCased: <code>dark-mode</code> \u2192 <code>variantDarkMode</code></li> <li>Add {% wrapif %} template tag for conditional wrapping.</li> </ul> <p>The new <code>{% wrapif %}</code> tag provides a clean way to conditionally wrap content with HTML elements:</p> <ul> <li>Shorthand syntax: <code>{% wrapif condition then \"tag\" attr=value %}content{% endwrapif %}</code></li> <li>Full template syntax: Supports <code>{% contents %}</code> blocks for complex wrappers</li> <li>Multiple conditions: <code>{% wrapelif %}</code> and <code>{% wrapelse %}</code> for if/elif/else patterns</li> <li>Complex conditions: Inherits all Django template operators (and, or, not, comparisons, in)</li> <li>Multiple named contents: Support for multiple content blocks in full syntax</li> <li>Attribute handling: Proper escaping and boolean attribute support</li> </ul> <p>This reduces template boilerplate and improves readability when conditionally wrapping content. - Added <code>|not</code> template filter for negating boolean values in conditional class attributes</p>"},{"location":"reference/development/#version-121-2024-11-19","title":"Version 1.2.1 (2024-11-19)","text":""},{"location":"reference/development/#bugfixes_9","title":"Bugfixes","text":"<ul> <li>Make csrf_token work from within components</li> </ul>"},{"location":"reference/development/#version-12-2024-11-12","title":"Version 1.2 (2024-11-12)","text":""},{"location":"reference/development/#features_11","title":"Features","text":"<ul> <li>Added support for Django-style template variables in component attributes: <code>title=\"{{ myTitle }}\"</code>. The old style <code>title={myTitle}</code> is still supported but will be deprecated in a future version.</li> </ul>"},{"location":"reference/development/#bugfixes_10","title":"Bugfixes","text":"<ul> <li>Short-hand syntax props weren't being taken into account by the required attrs check.</li> </ul>"},{"location":"reference/development/#version-111-2024-07-25","title":"Version 1.1.1 (2024-07-25)","text":""},{"location":"reference/development/#bugfixes_11","title":"Bugfixes","text":"<ul> <li>Fix a bug where the component context wasn't being set correctly, especially noticeable inside of a loop. (5)</li> </ul>"},{"location":"reference/development/#version-11-2024-06-03","title":"Version 1.1 (2024-06-03)","text":""},{"location":"reference/development/#bugfixes_12","title":"Bugfixes","text":"<ul> <li>Allow attributes with dashes which don't have values. For example, <code>&lt;include:foo x-data /&gt;</code>. (1)</li> </ul>"},{"location":"reference/development/#version-10-2024-05-16","title":"Version 1.0 (2024-05-16)","text":""},{"location":"reference/development/#features_12","title":"Features","text":"<ul> <li>Update the template engine location so that it will be picked up as the standard Django engine when replaced.</li> </ul>"},{"location":"reference/development/#improved-documentation","title":"Improved Documentation","text":"<ul> <li>Fix some grammar.</li> <li>Add a note about how to workaround Prettier stripping AlpineJS' <code>x-data</code> quotes.</li> </ul>"},{"location":"reference/development/#deprecations-and-removals_1","title":"Deprecations and Removals","text":"<ul> <li>Since the template engine location has changed, any users of pre 1.0 versions will need to update their Django settings to point to the new location:</li> </ul> <pre><code>TEMPLATES = [\n    {\n        \"BACKEND\": \"includecontents.django.DjangoTemplates\",\n        ...\n    },\n]\n</code></pre>"},{"location":"reference/development/#version-08-2024-05-09","title":"Version 0.8 (2024-05-09)","text":""},{"location":"reference/development/#features_13","title":"Features","text":"<ul> <li>Add shorthand attribute syntax (<code>&lt;include:foo {title}&gt;</code>).</li> </ul>"},{"location":"reference/development/#bugfixes_13","title":"Bugfixes","text":"<ul> <li>Fix component context isolation.</li> </ul>"},{"location":"reference/development/#version-07-2024-05-01","title":"Version 0.7 (2024-05-01)","text":""},{"location":"reference/development/#features_14","title":"Features","text":"<ul> <li>Allow self-closing tags. For example, <code>&lt;include:foo /&gt;</code>.</li> <li>Handle &gt; inside <code>&lt;include:</code> tags.</li> <li>Allow kebab-case attributes. For example, <code>&lt;include:foo x-data=\"bar\" /&gt;</code>.</li> </ul>"},{"location":"reference/development/#improved-documentation_1","title":"Improved Documentation","text":"<ul> <li>Add a note about <code>pretier-plugin-jinja-template</code>.</li> <li>Readme improvements.</li> </ul>"},{"location":"reference/migration-guide/","title":"Migration Guide","text":"<p>This guide helps you migrate between different versions of Django IncludeContents and convert from template tag syntax to HTML component syntax.</p>"},{"location":"reference/migration-guide/#template-tags-to-html-components","title":"Template Tags to HTML Components","text":"<p>The most common migration is from template tag syntax to the modern HTML component syntax.</p>"},{"location":"reference/migration-guide/#basic-migration","title":"Basic Migration","text":"<p>Before (Template Tags): <pre><code>{% load includecontents %}\n{% includecontents \"components/card.html\" title=\"Hello World\" %}\n    &lt;p&gt;This is the card content.&lt;/p&gt;\n{% endincludecontents %}\n</code></pre></p> <p>After (HTML Components): <pre><code>&lt;include:card title=\"Hello World\"&gt;\n    &lt;p&gt;This is the card content.&lt;/p&gt;\n&lt;/include:card&gt;\n</code></pre></p>"},{"location":"reference/migration-guide/#named-content-blocks","title":"Named Content Blocks","text":"<p>Before (Template Tags): <pre><code>{% load includecontents %}\n{% includecontents \"components/layout.html\" title=\"My Page\" %}\n    &lt;p&gt;Main content goes here.&lt;/p&gt;\n\n    {% contents sidebar %}\n        &lt;nav&gt;Navigation links&lt;/nav&gt;\n    {% endcontents %}\n\n    {% contents footer %}\n        &lt;p&gt;Footer content&lt;/p&gt;\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre></p> <p>After (HTML Components): <pre><code>&lt;include:layout title=\"My Page\"&gt;\n    &lt;p&gt;Main content goes here.&lt;/p&gt;\n\n    &lt;content:sidebar&gt;\n        &lt;nav&gt;Navigation links&lt;/nav&gt;\n    &lt;/content:sidebar&gt;\n\n    &lt;content:footer&gt;\n        &lt;p&gt;Footer content&lt;/p&gt;\n    &lt;/content:footer&gt;\n&lt;/include:layout&gt;\n</code></pre></p>"},{"location":"reference/migration-guide/#variable-attributes","title":"Variable Attributes","text":"<p>Before (Template Tags): <pre><code>{% includecontents \"components/button.html\" text=button_text type=form_type disabled=is_disabled %}\n    Additional content\n{% endincludecontents %}\n</code></pre></p> <p>After (HTML Components): <pre><code>&lt;include:button text=\"{{ button_text }}\" type=\"{{ form_type }}\" disabled=\"{{ is_disabled }}\"&gt;\n    Additional content\n&lt;/include:button&gt;\n</code></pre></p>"},{"location":"reference/migration-guide/#complex-expressions","title":"Complex Expressions","text":"<p>Before (Template Tags): <pre><code>{% includecontents \"components/user-card.html\" user=user show_email=user.is_staff|yesno:\"true,false\" %}\n    Welcome message content\n{% endincludecontents %}\n</code></pre></p> <p>After (HTML Components): <pre><code>&lt;include:user-card user=\"{{ user }}\" show-email=\"{{ user.is_staff|yesno:'true,false' }}\"&gt;\n    Welcome message content\n&lt;/include:user-card&gt;\n</code></pre></p>"},{"location":"reference/migration-guide/#setup-migration","title":"Setup Migration","text":""},{"location":"reference/migration-guide/#enable-html-component-syntax","title":"Enable HTML Component Syntax","text":"<p>To migrate from template tags to HTML components, you need to configure the custom template engine:</p> <p>1. Update your Django settings:</p> <pre><code># settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.Engine',  # Changed from DjangoTemplates\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre> <p>2. Remove template tag loading:</p> <p>Since HTML components work automatically, you can remove <code>{% load includecontents %}</code> from templates that use HTML syntax.</p> <p>Before: <pre><code>{% load includecontents %}\n&lt;include:card title=\"Hello\"&gt;Content&lt;/include:card&gt;\n</code></pre></p> <p>After: <pre><code>&lt;include:card title=\"Hello\"&gt;Content&lt;/include:card&gt;\n</code></pre></p>"},{"location":"reference/migration-guide/#mixed-environment","title":"Mixed Environment","text":"<p>You can use both syntaxes during migration:</p> <pre><code>&lt;!-- New HTML syntax --&gt;\n&lt;include:card title=\"Modern Card\"&gt;\n    &lt;!-- Old template tag syntax still works --&gt;\n    {% load includecontents %}\n    {% includecontents \"components/old-component.html\" %}\n        Legacy content\n    {% endincludecontents %}\n&lt;/include:card&gt;\n</code></pre>"},{"location":"reference/migration-guide/#component-file-migration","title":"Component File Migration","text":""},{"location":"reference/migration-guide/#directory-organization","title":"Directory Organization","text":"<p>Organize your components for better maintainability:</p> <p>Before: <pre><code>templates/\n\u251c\u2500\u2500 card.html\n\u251c\u2500\u2500 user_profile.html\n\u251c\u2500\u2500 button.html\n\u2514\u2500\u2500 form_field.html\n</code></pre></p> <p>After: <pre><code>templates/\n\u2514\u2500\u2500 components/\n    \u251c\u2500\u2500 card.html\n    \u251c\u2500\u2500 user-profile.html          # Kebab-case naming\n    \u251c\u2500\u2500 forms/\n    \u2502   \u251c\u2500\u2500 button.html\n    \u2502   \u2514\u2500\u2500 field.html\n    \u2514\u2500\u2500 ui/\n        \u2514\u2500\u2500 modal.html\n</code></pre></p>"},{"location":"reference/migration-guide/#file-naming-conventions","title":"File Naming Conventions","text":"<p>Update file names to follow conventions:</p> <p>Before: - <code>user_profile.html</code> \u2192 After: <code>user-profile.html</code> - <code>FormField.html</code> \u2192 After: <code>form-field.html</code> - <code>BUTTON.html</code> \u2192 After: <code>button.html</code></p>"},{"location":"reference/migration-guide/#component-props","title":"Component Props","text":"<p>Add props documentation to your components:</p> <p>Before: <pre><code>&lt;!-- templates/components/card.html --&gt;\n&lt;div class=\"card {{ class }}\"&gt;\n    &lt;h3&gt;{{ title }}&lt;/h3&gt;\n    &lt;div&gt;{{ contents }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <p>After: <pre><code>&lt;!-- templates/components/card.html --&gt;\n{# props title, class=\"\" #}\n&lt;div {% attrs class=\"card\" %}&gt;\n    &lt;h3&gt;{{ title }}&lt;/h3&gt;\n    &lt;div&gt;{{ contents }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"reference/migration-guide/#automated-migration-tools","title":"Automated Migration Tools","text":""},{"location":"reference/migration-guide/#find-and-replace-patterns","title":"Find and Replace Patterns","text":"<p>Use these regex patterns to help automate migration:</p> <p>1. Basic includecontents tags: <pre><code># Find:\n{% includecontents \"components/([^\"]+)\\.html\"([^%]*) %}\n(.*?)\n{% endincludecontents %}\n\n# Replace with:\n&lt;include:$1$2&gt;\n$3\n&lt;/include:$1&gt;\n</code></pre></p> <p>2. Load statements: <pre><code># Find:\n{% load includecontents %}\\n\n\n# Replace with:\n(empty - remove the line)\n</code></pre></p>"},{"location":"reference/migration-guide/#migration-script","title":"Migration Script","text":"<p>Here's a Python script to help with basic migration:</p> <pre><code>#!/usr/bin/env python3\nimport re\nimport os\nfrom pathlib import Path\n\ndef migrate_template_file(file_path):\n    \"\"\"Migrate a single template file from template tags to HTML syntax.\"\"\"\n    with open(file_path, 'r') as f:\n        content = f.read()\n\n    # Remove load statements\n    content = re.sub(r'{%\\s*load\\s+includecontents\\s*%}\\n?', '', content)\n\n    # Convert basic includecontents\n    pattern = r'{%\\s*includecontents\\s+\"components/([^\"]+)\\.html\"([^%]*?)\\s*%}(.*?){%\\s*endincludecontents\\s*%}'\n\n    def replace_tag(match):\n        component_name = match.group(1)\n        attributes = match.group(2).strip()\n        content_block = match.group(3)\n\n        return f'&lt;include:{component_name}{attributes}&gt;{content_block}&lt;/include:{component_name}&gt;'\n\n    content = re.sub(pattern, replace_tag, content, flags=re.DOTALL)\n\n    # Write back\n    with open(file_path, 'w') as f:\n        f.write(content)\n\ndef migrate_templates(template_dir):\n    \"\"\"Migrate all templates in a directory.\"\"\"\n    for template_file in Path(template_dir).rglob('*.html'):\n        print(f\"Migrating {template_file}\")\n        migrate_template_file(template_file)\n\nif __name__ == '__main__':\n    migrate_templates('templates/')\n</code></pre>"},{"location":"reference/migration-guide/#version-migrations","title":"Version Migrations","text":""},{"location":"reference/migration-guide/#upgrading-from-1x-to-2x","title":"Upgrading from 1.x to 2.x","text":"<p>Key Changes: - HTML component syntax introduced - Custom template engine available - Improved props system with validation - New <code>{% attrs %}</code> template tag</p> <p>Migration Steps:</p> <ol> <li> <p>Update package: <pre><code>pip install --upgrade django-includecontents\n</code></pre></p> </li> <li> <p>Optional: Enable HTML syntax: <pre><code># settings.py - Optional upgrade\nTEMPLATES = [{\n    'BACKEND': 'includecontents.django.Engine',\n    # ... other settings\n}]\n</code></pre></p> </li> <li> <p>Update components to use new features: <pre><code>&lt;!-- Before --&gt;\n&lt;div class=\"card {{ class }}\"&gt;\n\n&lt;!-- After --&gt;\n&lt;div {% attrs class=\"card\" %}&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/migration-guide/#breaking-changes","title":"Breaking Changes","text":"<p>Version 2.0: - No breaking changes - fully backward compatible - Template tag syntax continues to work - Existing components work without modification</p>"},{"location":"reference/migration-guide/#testing-migration","title":"Testing Migration","text":""},{"location":"reference/migration-guide/#test-strategy","title":"Test Strategy","text":"<ol> <li> <p>Before migration: <pre><code># Run your test suite\npython manage.py test\n\n# Test key pages manually\npython manage.py runserver\n</code></pre></p> </li> <li> <p>During migration: <pre><code># Test each migrated template\npython manage.py test apps.tests.test_templates\n\n# Use Django's template debugging\n# settings.py\nTEMPLATES[0]['OPTIONS']['debug'] = True\n</code></pre></p> </li> <li> <p>After migration: <pre><code># Full test suite\npython manage.py test\n\n# Performance testing\npython manage.py test --debug-mode\n</code></pre></p> </li> </ol>"},{"location":"reference/migration-guide/#common-migration-issues","title":"Common Migration Issues","text":"<p>1. Missing component files: <pre><code>TemplateDoesNotExist: components/my-component.html\n</code></pre> - Solution: Ensure component files are in <code>templates/components/</code></p> <p>2. Context variables not available: <pre><code>&lt;!-- Component shows empty values --&gt;\n</code></pre> - Solution: Remember context isolation - pass variables explicitly</p> <p>3. Attribute parsing errors: <pre><code>TemplateSyntaxError: Invalid attribute syntax\n</code></pre> - Solution: Quote attribute values: <code>attribute=\"{{ value }}\"</code></p>"},{"location":"reference/migration-guide/#rollback-plan","title":"Rollback Plan","text":"<p>If you need to rollback the migration:</p>"},{"location":"reference/migration-guide/#rollback-html-components-to-template-tags","title":"Rollback HTML Components to Template Tags","text":"<p>1. Revert settings: <pre><code># settings.py\nTEMPLATES = [{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    # ... original settings\n}]\n</code></pre></p> <p>2. Add back load statements: <pre><code>{% load includecontents %}\n</code></pre></p> <p>3. Convert HTML syntax back: <pre><code>&lt;!-- From: --&gt;\n&lt;include:card title=\"Hello\"&gt;Content&lt;/include:card&gt;\n\n&lt;!-- To: --&gt;\n{% includecontents \"components/card.html\" title=\"Hello\" %}\n    Content\n{% endincludecontents %}\n</code></pre></p>"},{"location":"reference/migration-guide/#migration-checklist","title":"Migration Checklist","text":""},{"location":"reference/migration-guide/#pre-migration","title":"Pre-Migration","text":"<ul> <li>[ ] Backup your templates directory</li> <li>[ ] Document current component usage</li> <li>[ ] Test current functionality thoroughly</li> <li>[ ] Plan component organization structure</li> </ul>"},{"location":"reference/migration-guide/#during-migration","title":"During Migration","text":"<ul> <li>[ ] Update Django settings (if using HTML syntax)</li> <li>[ ] Migrate components file by file</li> <li>[ ] Test each migrated component</li> <li>[ ] Update internal documentation</li> </ul>"},{"location":"reference/migration-guide/#post-migration","title":"Post-Migration","text":"<ul> <li>[ ] Run full test suite</li> <li>[ ] Test all user-facing pages</li> <li>[ ] Update team documentation</li> <li>[ ] Plan future component development</li> </ul>"},{"location":"reference/migration-guide/#template-engine-migrations","title":"Template Engine Migrations","text":""},{"location":"reference/migration-guide/#migrating-from-jinja2-to-django-templates","title":"Migrating from Jinja2 to Django Templates","text":"<p>If you're currently using Jinja2 and want to adopt Django IncludeContents, you'll need to migrate your templates to Django's template syntax:</p> <p>Common Jinja2 to Django conversions:</p> Jinja2 Django Templates <code>{{ variable \\| filter }}</code> <code>{{ variable\\|filter }}</code> (no spaces around pipe) <code>{% if condition %}</code> <code>{% if condition %}</code> (same) <code>{% for item in items %}</code> <code>{% for item in items %}</code> (same) <code>{{ loop.index }}</code> <code>{{ forloop.counter }}</code> <code>{{ loop.first }}</code> <code>{{ forloop.first }}</code> <code>{% macro name() %}</code> No direct equivalent - use <code>{% includecontents %}</code> <p>Jinja2 alternatives within Django:</p> <p>Instead of migrating from Jinja2, consider: 1. Dual template setup: Use Django templates for components, Jinja2 for main templates 2. Macro-based approach: Implement component-like functionality with Jinja2 macros 3. Custom Jinja2 extension: See the Jinja2 Setup Guide for implementation details</p>"},{"location":"reference/migration-guide/#considerations-for-mixed-environments","title":"Considerations for Mixed Environments","text":"<p>Option 1: Dual template engines <pre><code># settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',  # For components\n        'DIRS': [BASE_DIR / 'templates/components'],\n        'APP_DIRS': False,\n    },\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',  # For main templates\n        'DIRS': [BASE_DIR / 'templates/jinja2'],\n        'APP_DIRS': True,\n    },\n]\n</code></pre></p> <p>Option 2: Bridge pattern Use Django's <code>render_to_string()</code> from within Jinja2 templates to render Django components:</p> <pre><code>{# Jinja2 template #}\n{{ django_component('components/card.html', title='Hello', content=content_var) }}\n</code></pre> <p>For detailed implementation, see the Jinja2 Setup Guide.</p>"},{"location":"reference/migration-guide/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during migration:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review component examples in the documentation</li> <li>Test with minimal examples first</li> <li>For Jinja2 questions, see the Jinja2 Setup Guide</li> <li>Ask for help on GitHub Issues</li> </ol>"},{"location":"reference/migration-guide/#next-steps","title":"Next Steps","text":"<p>After successful migration: - Learn advanced component patterns - Set up IDE integration - Explore CSS styling features</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions when working with Django IncludeContents.</p>"},{"location":"reference/troubleshooting/#template-errors","title":"Template Errors","text":""},{"location":"reference/troubleshooting/#templatedoesnotexist","title":"TemplateDoesNotExist","text":"<p>Error: <pre><code>TemplateDoesNotExist: components/my-component.html\n</code></pre></p> <p>Causes and Solutions:</p> <ol> <li> <p>Component file doesn't exist: <pre><code># Check if the file exists\nls templates/components/my-component.html\n</code></pre> Solution: Create the component file in the correct location.</p> </li> <li> <p>Incorrect file path: <pre><code>&lt;!-- \u274c Wrong --&gt;\n&lt;include:my_component&gt;\n\n&lt;!-- \u2705 Correct --&gt;\n&lt;include:my-component&gt;\n</code></pre> Solution: Use kebab-case and ensure the filename matches.</p> </li> <li> <p>Missing components directory: <pre><code># Create the directory\nmkdir -p templates/components\n</code></pre></p> </li> <li> <p>Template engine not configured: <pre><code># settings.py - Ensure you have the right backend\nTEMPLATES = [{\n    'BACKEND': 'includecontents.django.Engine',  # For HTML syntax\n    # OR\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',  # For template tags\n}]\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#templatesyntaxerror","title":"TemplateSyntaxError","text":"<p>Error: <pre><code>TemplateSyntaxError: Invalid block tag: 'includecontents'\n</code></pre></p> <p>Solution: Load the template tag library: <pre><code>{% load includecontents %}\n{% includecontents \"components/card.html\" %}\n    Content\n{% endincludecontents %}\n</code></pre></p> <p>Error: <pre><code>TemplateSyntaxError: Malformed template tag at token 'includecontents'\n</code></pre></p> <p>Common causes:</p> <ol> <li> <p>Missing template name: <pre><code>&lt;!-- \u274c Wrong --&gt;\n{% includecontents %}\n    Content\n{% endincludecontents %}\n\n&lt;!-- \u2705 Correct --&gt;\n{% includecontents \"components/card.html\" %}\n    Content\n{% endincludecontents %}\n</code></pre></p> </li> <li> <p>Incorrect attribute syntax: <pre><code>&lt;!-- \u274c Wrong --&gt;\n&lt;include:card title=Hello World&gt;\n\n&lt;!-- \u2705 Correct --&gt;\n&lt;include:card title=\"Hello World\"&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#enhanced-error-messages","title":"Enhanced Error Messages","text":"<p>Django IncludeContents provides enhanced error messages to help you quickly identify and fix issues:</p>"},{"location":"reference/troubleshooting/#props-definition-errors","title":"Props Definition Errors","text":"<p>Enhanced props error messages include: - Exact line number where the error occurs - Specific problematic token - Common issues and solutions - Concrete examples of correct syntax</p> <p>Example error: <pre><code>Props parsing error: Invalid prop name 'invalid name'. Prop names must be valid Python identifiers.\n  In template line 2: {# props \"invalid name\"=value #}\n  Problem with: 'invalid name=value'\n\nCommon issues:\n  - Prop names must be valid Python identifiers (no spaces, special chars)\n  - String values should be quoted: name=\"value\"\n  - Lists should use brackets: items=[1,2,3]\n  - Use commas or spaces to separate props: prop1=value1 prop2=value2\n\nExamples:\n  {# props title required_field=True items=[1,2,3] #}\n  {# props variant=primary,secondary,accent size=\"large\" #}\n</code></pre></p> <p>Common props definition errors:</p> <ol> <li> <p>Invalid prop names with spaces: <pre><code>&lt;!-- \u274c Wrong --&gt;\n{# props \"user name\"=default_value #}\n\n&lt;!-- \u2705 Correct --&gt;\n{# props user_name=default_value #}\n</code></pre></p> </li> <li> <p>Invalid prop names with special characters: <pre><code>&lt;!-- \u274c Wrong --&gt;\n{# props prop-name=value #}\n\n&lt;!-- \u2705 Correct --&gt;\n{# props prop_name=value #}\n</code></pre></p> </li> <li> <p>Malformed list syntax: <pre><code>&lt;!-- \u274c Wrong --&gt;\n{# props items=[1,2,3 #}\n\n&lt;!-- \u2705 Correct --&gt;\n{# props items=[1,2,3] #}\n</code></pre></p> </li> <li> <p>Unquoted string values with spaces: <pre><code>&lt;!-- \u274c Wrong --&gt;\n{# props title=hello world #}\n\n&lt;!-- \u2705 Correct --&gt;\n{# props title=\"hello world\" #}\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#enum-validation-errors","title":"Enum Validation Errors","text":"<p>Enhanced enum error messages with suggestions:</p> <p>Example error: <pre><code>Invalid value \"primari\" for attribute \"variant\".\nAllowed values: 'primary', 'secondary', 'accent'. Did you mean 'primary'?\nExample: &lt;include:button variant=\"primary\"&gt;\n</code></pre></p> <p>Common enum errors:</p> <ol> <li> <p>Typos in enum values: <pre><code>&lt;!-- \u274c Wrong --&gt;\n&lt;include:button variant=\"primari\"&gt;  &lt;!-- typo --&gt;\n\n&lt;!-- \u2705 Correct --&gt;\n&lt;include:button variant=\"primary\"&gt;\n</code></pre></p> </li> <li> <p>Case sensitivity issues: <pre><code>&lt;!-- \u274c Wrong --&gt;\n&lt;include:button variant=\"PRIMARY\"&gt;  &lt;!-- wrong case --&gt;\n\n&lt;!-- \u2705 Correct --&gt;\n&lt;include:button variant=\"primary\"&gt;\n</code></pre></p> </li> <li> <p>Using underscores instead of hyphens: <pre><code>&lt;!-- \u274c Wrong --&gt;\n&lt;include:button variant=\"dark_mode\"&gt;  &lt;!-- underscore --&gt;\n\n&lt;!-- \u2705 Correct --&gt;\n&lt;include:button variant=\"dark-mode\"&gt;  &lt;!-- hyphen --&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#missing-template-errors","title":"Missing Template Errors","text":"<p>Enhanced template not found errors include: - Clear component identification - Specific template paths searched - Actionable suggestions for fixing</p> <p>Example error: <pre><code>Component template not found: &lt;include:my-component&gt;\nLooked for: components/my-component.html\n\nSuggestions:\n  1. Create template: templates/components/my-component.html\n  2. Check TEMPLATES['DIRS'] setting includes your template directory\n  3. For app-based components: create template in &lt;app&gt;/templates/components/\n</code></pre></p>"},{"location":"reference/troubleshooting/#component-issues","title":"Component Issues","text":""},{"location":"reference/troubleshooting/#empty-component-content","title":"Empty Component Content","text":"<p>Problem: Component renders but shows no content.</p> <p>Debug steps:</p> <ol> <li> <p>Check props are being passed: <pre><code>&lt;!-- Debug template: templates/components/debug-card.html --&gt;\n{# props title, content=\"\" #}\n&lt;div&gt;\n    &lt;p&gt;Title: \"{{ title }}\"&lt;/p&gt;\n    &lt;p&gt;Content: \"{{ content }}\"&lt;/p&gt;\n    &lt;p&gt;Contents: \"{{ contents }}\"&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p> </li> <li> <p>Verify context isolation: <pre><code>&lt;!-- Parent template --&gt;\n{% with message=\"Hello\" %}\n    &lt;!-- \u274c Wrong: message not passed --&gt;\n    &lt;include:greeting&gt;Welcome&lt;/include:greeting&gt;\n\n    &lt;!-- \u2705 Correct: message passed explicitly --&gt;\n    &lt;include:greeting message=\"{{ message }}\"&gt;Welcome&lt;/include:greeting&gt;\n{% endwith %}\n</code></pre></p> </li> <li> <p>Check for typos in variable names: <pre><code>&lt;!-- \u274c Wrong --&gt;\n&lt;include:card titel=\"Hello\"&gt;  &lt;!-- typo: titel --&gt;\n\n&lt;!-- \u2705 Correct --&gt;\n&lt;include:card title=\"Hello\"&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#missing-required-attributes","title":"Missing Required Attributes","text":"<p>Error: <pre><code>TemplateSyntaxError: Missing required attribute \"title\" in &lt;include:card&gt;\n</code></pre></p> <p>Solution: Provide all required attributes: <pre><code>&lt;!-- Component definition --&gt;\n{# props title, description=\"\" #}\n\n&lt;!-- \u274c Wrong: missing required title --&gt;\n&lt;include:card description=\"A card\"&gt;Content&lt;/include:card&gt;\n\n&lt;!-- \u2705 Correct: title provided --&gt;\n&lt;include:card title=\"My Card\" description=\"A card\"&gt;Content&lt;/include:card&gt;\n</code></pre></p>"},{"location":"reference/troubleshooting/#variable-not-found-in-component","title":"Variable Not Found in Component","text":"<p>Problem: Variables show as empty in component templates.</p> <p>Debugging:</p> <ol> <li> <p>Check context isolation: <pre><code>&lt;!-- Parent template --&gt;\n&lt;h1&gt;{{ page_title }}&lt;/h1&gt;  &lt;!-- Works in parent --&gt;\n\n&lt;include:card&gt;\n    &lt;h2&gt;{{ page_title }}&lt;/h2&gt;  &lt;!-- Empty in component! --&gt;\n&lt;/include:card&gt;\n</code></pre></p> </li> <li> <p>Solution - pass variables explicitly: <pre><code>&lt;include:card page-title=\"{{ page_title }}\"&gt;\n    &lt;h2&gt;{{ page_title }}&lt;/h2&gt;  &lt;!-- Still empty --&gt;\n    &lt;h2&gt;{{ page-title }}&lt;/h2&gt;  &lt;!-- Works! --&gt;\n&lt;/include:card&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#html-syntax-issues","title":"HTML Syntax Issues","text":""},{"location":"reference/troubleshooting/#html-components-not-working","title":"HTML Components Not Working","text":"<p>Problem: HTML component syntax doesn't work, shows as literal text.</p> <p>Check your template engine: <pre><code># settings.py\nTEMPLATES = [{\n    'BACKEND': 'includecontents.django.Engine',  # Required for HTML syntax\n    'DIRS': [BASE_DIR / 'templates'],\n    'APP_DIRS': True,\n    # ...\n}]\n</code></pre></p> <p>Common issues:</p> <ol> <li> <p>Wrong template engine: <pre><code># \u274c Won't work for HTML syntax\n'BACKEND': 'django.template.backends.django.DjangoTemplates'\n\n# \u2705 Required for HTML syntax\n'BACKEND': 'includecontents.django.Engine'\n</code></pre></p> </li> <li> <p>File not in components directory: <pre><code>templates/\n\u251c\u2500\u2500 my-card.html          # \u274c Won't work\n\u2514\u2500\u2500 components/\n    \u2514\u2500\u2500 my-card.html      # \u2705 Works\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#self-closing-tags-not-working","title":"Self-Closing Tags Not Working","text":"<p>Problem: <pre><code>&lt;include:icon name=\"star\" /&gt;  &lt;!-- Doesn't work --&gt;\n</code></pre></p> <p>Solution: Ensure proper self-closing syntax: <pre><code>&lt;!-- \u2705 Correct --&gt;\n&lt;include:icon name=\"star\" /&gt;\n\n&lt;!-- \u274c Wrong - missing space before / --&gt;\n&lt;include:icon name=\"star\"/&gt;\n</code></pre></p>"},{"location":"reference/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"reference/troubleshooting/#slow-template-rendering","title":"Slow Template Rendering","text":"<p>Problem: Templates render slowly with many components.</p> <p>Solutions:</p> <ol> <li> <p>Enable template caching: <pre><code># settings.py\nTEMPLATES = [{\n    'BACKEND': 'includecontents.django.Engine',\n    'OPTIONS': {\n        'loaders': [\n            ('django.template.loaders.cached.Loader', [\n                'django.template.loaders.filesystem.Loader',\n                'django.template.loaders.app_directories.Loader',\n            ]),\n        ],\n    },\n}]\n</code></pre></p> </li> <li> <p>Avoid heavy computation in components: <pre><code>&lt;!-- \u274c Slow: complex calculations in template --&gt;\n{# props user #}\n{% for post in user.posts.all %}\n    {% for comment in post.comments.select_related.all %}\n        &lt;!-- Complex nested queries --&gt;\n    {% endfor %}\n{% endfor %}\n\n&lt;!-- \u2705 Fast: pass computed data --&gt;\n{# props user, user_stats #}\n&lt;div&gt;Posts: {{ user_stats.post_count }}&lt;/div&gt;\n&lt;div&gt;Comments: {{ user_stats.comment_count }}&lt;/div&gt;\n</code></pre></p> </li> <li> <p>Use conditional rendering: <pre><code>{# props user, load_heavy_content=False #}\n&lt;div class=\"user-profile\"&gt;\n    &lt;h1&gt;{{ user.name }}&lt;/h1&gt;\n\n    {% if load_heavy_content %}\n        &lt;include:user-activity-feed user=\"{{ user }}\" /&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#development-issues","title":"Development Issues","text":""},{"location":"reference/troubleshooting/#component-changes-not-reflected","title":"Component Changes Not Reflected","text":"<p>Problem: Component template changes don't appear in browser.</p> <p>Solutions:</p> <ol> <li> <p>Disable template caching during development: <pre><code># settings.py (development only)\nif DEBUG:\n    TEMPLATES[0]['OPTIONS']['loaders'] = [\n        'django.template.loaders.filesystem.Loader',\n        'django.template.loaders.app_directories.Loader',\n    ]\n</code></pre></p> </li> <li> <p>Clear template cache: <pre><code># Restart development server\npython manage.py runserver\n\n# Or clear cache programmatically\npython manage.py shell\n&gt;&gt;&gt; from django.template.loader import get_template\n&gt;&gt;&gt; get_template.cache_clear()\n</code></pre></p> </li> <li> <p>Check file paths: <pre><code># Ensure you're editing the right file\nfind . -name \"my-component.html\" -type f\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#ide-not-recognizing-components","title":"IDE Not Recognizing Components","text":"<p>Problem: No syntax highlighting or autocomplete for components.</p> <p>Solutions:</p> <ol> <li> <p>VS Code setup: <pre><code>// .vscode/settings.json\n{\n    \"emmet.includeLanguages\": {\n        \"django-html\": \"html\"\n    },\n    \"files.associations\": {\n        \"*.html\": \"django-html\"\n    }\n}\n</code></pre></p> </li> <li> <p>Configure file associations:</p> </li> <li>Associate <code>.html</code> files with Django HTML language mode</li> <li>Install Django extensions for your IDE</li> </ol>"},{"location":"reference/troubleshooting/#error-debugging","title":"Error Debugging","text":""},{"location":"reference/troubleshooting/#enable-debug-mode","title":"Enable Debug Mode","text":"<p>Template debugging: <pre><code># settings.py\nDEBUG = True\nTEMPLATES[0]['OPTIONS']['debug'] = True\n</code></pre></p> <p>Verbose error output: <pre><code># Add to component template for debugging\n{# props title, description=\"\" #}\n&lt;div&gt;\n    &lt;h1&gt;DEBUG: title=\"{{ title }}\"&lt;/h1&gt;\n    &lt;p&gt;DEBUG: description=\"{{ description }}\"&lt;/p&gt;\n    &lt;div&gt;DEBUG: contents=\"{{ contents }}\"&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"reference/troubleshooting/#common-error-patterns","title":"Common Error Patterns","text":"<p>1. Context variable naming: <pre><code>&lt;!-- \u274c Wrong: underscore vs hyphen confusion --&gt;\n&lt;include:user-card user_name=\"{{ user.name }}\"&gt;  &lt;!-- prop: user_name --&gt;\n&lt;!-- Component expects: {{ user-name }} not {{ user_name }} --&gt;\n\n&lt;!-- \u2705 Correct: consistent naming --&gt;\n&lt;include:user-card user-name=\"{{ user.name }}\"&gt;  &lt;!-- prop: user-name --&gt;\n&lt;!-- Component uses: {{ user-name }} --&gt;\n</code></pre></p> <p>2. Quote handling: <pre><code>&lt;!-- \u274c Wrong: nested quotes --&gt;\n&lt;include:card title=\"Say \"Hello\"\"&gt;\n\n&lt;!-- \u2705 Correct: escaped quotes --&gt;\n&lt;include:card title=\"Say &amp;quot;Hello&amp;quot;\"&gt;\n\n&lt;!-- \u2705 Alternative: different quote types --&gt;\n&lt;include:card title='Say \"Hello\"'&gt;\n</code></pre></p>"},{"location":"reference/troubleshooting/#security-and-escaping-issues","title":"Security and Escaping Issues","text":""},{"location":"reference/troubleshooting/#understanding-escaping-behavior","title":"Understanding Escaping Behavior","text":"<p>If you're seeing unexpected escaping or lack of escaping in component attributes:</p> <p>Problem: Hard-coded strings are being escaped when they shouldn't be <pre><code>&lt;!-- Expected: text=\"Don't worry\" --&gt;\n&lt;!-- Getting: text=\"Don&amp;#x27;t worry\" --&gt;\n&lt;include:button text=\"Don't worry\" /&gt;\n</code></pre></p> <p>Solution: This indicates an older version behavior. Update to the latest version where hard-coded strings are not escaped.</p> <p>Problem: Template variables are not being escaped when they should be <pre><code>&lt;!-- User input with quotes shows unescaped --&gt;\n&lt;include:button text=\"{{ user_input }}\" /&gt;\n&lt;!-- Shows: text=\"Don't worry\" instead of text=\"Don&amp;#x27;t worry\" --&gt;\n</code></pre></p> <p>Solutions:</p> Django TemplatesJinja2 Templates <pre><code>&lt;!-- \u2705 Variables should be automatically escaped --&gt;\n&lt;include:button text=\"{{ user_input }}\" /&gt;\n\n&lt;!-- If not escaping, check your Django version and settings --&gt;\n</code></pre> <pre><code>&lt;!-- \u2705 For consistent escaping, use explicit escaping --&gt;\n&lt;include:button text=\"{{ user_input|e }}\" /&gt;\n\n&lt;!-- Or configure autoescape in your Jinja2 environment --&gt;\n</code></pre>"},{"location":"reference/troubleshooting/#xss-prevention","title":"XSS Prevention","text":"<p>Problem: Potential XSS vulnerabilities in component attributes</p> <p>Solution: Never mark user input as safe: <pre><code>&lt;!-- \u274c Dangerous --&gt;\n&lt;include:content html=\"{{ user_input|safe }}\" /&gt;\n\n&lt;!-- \u2705 Safe --&gt;\n&lt;include:content text=\"{{ user_input }}\" /&gt;  &lt;!-- Automatically escaped --&gt;\n\n&lt;!-- \u2705 Safe with sanitization --&gt;\n&lt;include:content html=\"{{ user_input|bleach|safe }}\" /&gt;\n</code></pre></p>"},{"location":"reference/troubleshooting/#security-best-practices","title":"Security Best Practices","text":"<p>For comprehensive security guidance, see the Security Best Practices section.</p> <p>Key principles: - Hard-coded strings in components are trusted (not escaped) - Template variables are automatically escaped for security - Always validate and sanitize user-provided URLs and content - Use CSRF protection for forms within components</p>"},{"location":"reference/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"reference/troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ol> <li>Check this troubleshooting guide</li> <li>Enable debug mode</li> <li>Create a minimal reproduction case</li> <li>Check recent changes to your templates</li> </ol>"},{"location":"reference/troubleshooting/#when-reporting-issues","title":"When Reporting Issues","text":"<p>Include this information:</p> <ol> <li> <p>Django IncludeContents version: <pre><code>pip show django-includecontents\n</code></pre></p> </li> <li> <p>Django version: <pre><code>python manage.py version\n</code></pre></p> </li> <li> <p>Template engine configuration: <pre><code># From settings.py\nTEMPLATES = [...]\n</code></pre></p> </li> <li> <p>Minimal code example: <pre><code>&lt;!-- Component template --&gt;\n{# props title #}\n&lt;div&gt;{{ title }}&lt;/div&gt;\n\n&lt;!-- Usage --&gt;\n&lt;include:my-component title=\"Test\"&gt;\n</code></pre></p> </li> <li> <p>Full error traceback: <pre><code>Traceback (most recent call last):\n...\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>Documentation: Complete feature documentation</li> <li>Examples: Working code examples</li> </ul>"},{"location":"reference/troubleshooting/#prevention-tips","title":"Prevention Tips","text":""},{"location":"reference/troubleshooting/#best-practices-to-avoid-issues","title":"Best Practices to Avoid Issues","text":"<ol> <li>Use consistent naming conventions</li> <li>Document component props clearly</li> <li>Test components in isolation</li> <li>Keep components simple and focused</li> <li>Use template debugging during development</li> </ol>"},{"location":"reference/troubleshooting/#regular-maintenance","title":"Regular Maintenance","text":"<ol> <li>Update Django IncludeContents regularly</li> <li>Run tests after updates</li> <li>Review component usage patterns</li> <li>Clean up unused components</li> </ol>"},{"location":"reference/troubleshooting/#still-having-issues","title":"Still Having Issues?","text":"<p>If this guide doesn't solve your problem:</p> <ol> <li>Search existing issues</li> <li>Create a new issue with:</li> <li>Clear problem description</li> <li>Minimal reproduction steps</li> <li>Environment details</li> <li>Error messages or unexpected behavior</li> </ol>"},{"location":"tooling-integration/custom-engine/","title":"Custom Template Engine","text":"<p>Django IncludeContents provides a custom template engine that extends Django's standard template functionality with additional features while maintaining full compatibility.</p>"},{"location":"tooling-integration/custom-engine/#engine-features","title":"Engine Features","text":"<p>The custom template engine (<code>includecontents.django.DjangoTemplates</code>) provides:</p> <ol> <li>HTML Component Syntax: <code>&lt;include:component&gt;</code> tags</li> <li>Multi-line Template Tags: Break long tags across lines</li> <li>Auto-loaded Template Tags: No need for <code>{% load includecontents %}</code></li> <li>All Standard Django Features: 100% compatibility with existing templates</li> </ol>"},{"location":"tooling-integration/custom-engine/#installation","title":"Installation","text":"<p>Replace Django's default template backend in your <code>settings.py</code>:</p> <pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#architecture","title":"Architecture","text":""},{"location":"tooling-integration/custom-engine/#template-processing-pipeline","title":"Template Processing Pipeline","text":"<ol> <li>Template Loading: Standard Django template loading</li> <li>Preprocessing: Convert HTML component syntax to Django tags</li> <li>Multi-line Processing: Handle multi-line template tags</li> <li>Standard Compilation: Use Django's standard template compiler</li> <li>Rendering: Standard Django template rendering</li> </ol>"},{"location":"tooling-integration/custom-engine/#component-discovery","title":"Component Discovery","text":"<p>The engine automatically discovers components from:</p> <pre><code>templates/\n\u2514\u2500\u2500 components/\n    \u251c\u2500\u2500 button.html          \u2192 &lt;include:button&gt;\n    \u251c\u2500\u2500 forms/\n    \u2502   \u2514\u2500\u2500 field.html       \u2192 &lt;include:forms:field&gt;\n    \u2514\u2500\u2500 ui/\n        \u251c\u2500\u2500 card.html        \u2192 &lt;include:ui:card&gt;\n        \u2514\u2500\u2500 icons/\n            \u2514\u2500\u2500 star.html    \u2192 &lt;include:ui:icons:star&gt;\n</code></pre>"},{"location":"tooling-integration/custom-engine/#template-tag-auto-loading","title":"Template Tag Auto-loading","text":"<p>These template tags are automatically available without <code>{% load %}</code>:</p> <ul> <li><code>includecontents</code> / <code>endincludecontents</code></li> <li><code>contents</code> / <code>endcontents</code></li> <li><code>wrapif</code> / <code>wrapelif</code> / <code>wrapelse</code> / <code>endwrapif</code></li> <li><code>attrs</code></li> <li><code>not</code> filter</li> </ul>"},{"location":"tooling-integration/custom-engine/#html-component-syntax-processing","title":"HTML Component Syntax Processing","text":""},{"location":"tooling-integration/custom-engine/#syntax-transformation","title":"Syntax Transformation","text":"<p>The engine transforms HTML component syntax to standard Django tags:</p> <pre><code>&lt;!-- Input: HTML component syntax --&gt;\n&lt;include:card title=\"Hello\" class=\"my-card\"&gt;\n    &lt;p&gt;Content&lt;/p&gt;\n    &lt;content:footer&gt;Footer content&lt;/content:footer&gt;\n&lt;/include:card&gt;\n\n&lt;!-- Transformed to: Django template tags --&gt;\n{% includecontents \"components/card.html\" title=\"Hello\" class=\"my-card\" %}\n    &lt;p&gt;Content&lt;/p&gt;\n    {% contents footer %}Footer content{% endcontents %}\n{% endincludecontents %}\n</code></pre>"},{"location":"tooling-integration/custom-engine/#attribute-processing","title":"Attribute Processing","text":"<p>Complex attribute processing handles:</p> <ul> <li>String literals: <code>title=\"Hello\"</code></li> <li>Template variables: <code>title=\"{{ title }}\"</code></li> <li>Template expressions: <code>href=\"{% url 'home' %}\"</code></li> <li>Shorthand syntax: <code>{title}</code> \u2192 <code>title=\"{{ title }}\"</code></li> <li>Conditional classes: <code>class:active=\"{{ is_active }}\"</code></li> <li>Boolean attributes: <code>disabled</code> \u2192 <code>disabled=\"True\"</code></li> </ul>"},{"location":"tooling-integration/custom-engine/#self-closing-components","title":"Self-closing Components","text":"<pre><code>&lt;!-- Self-closing syntax --&gt;\n&lt;include:icon name=\"star\" size=\"24\" /&gt;\n\n&lt;!-- Transformed to --&gt;\n{% includecontents \"components/icon.html\" name=\"star\" size=\"24\" %}{% endincludecontents %}\n</code></pre>"},{"location":"tooling-integration/custom-engine/#multi-line-tag-processing","title":"Multi-line Tag Processing","text":""},{"location":"tooling-integration/custom-engine/#line-continuation","title":"Line Continuation","text":"<p>The engine handles multi-line template tags by:</p> <ol> <li>Detecting unclosed tags: Tags that span multiple lines</li> <li>Concatenating lines: Join lines until tag is complete</li> <li>Preserving whitespace: Maintain proper spacing in output</li> <li>Error reporting: Accurate line numbers in error messages</li> </ol>"},{"location":"tooling-integration/custom-engine/#example-processing","title":"Example Processing","text":"<pre><code>&lt;!-- Input --&gt;\n{% if user.is_authenticated \n    and user.is_staff \n    and user.has_perm('admin')\n%}\n    Content\n{% endif %}\n\n&lt;!-- Processed as --&gt;\n{% if user.is_authenticated and user.is_staff and user.has_perm('admin') %}\n    Content\n{% endif %}\n</code></pre>"},{"location":"tooling-integration/custom-engine/#advanced-features","title":"Advanced Features","text":""},{"location":"tooling-integration/custom-engine/#context-processors","title":"Context Processors","text":"<p>The engine supports all standard Django context processors and custom ones:</p> <pre><code># settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'myapp.context_processors.custom_processor',\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#template-loaders","title":"Template Loaders","text":"<p>Works with all Django template loaders:</p> <pre><code># Custom loader configuration\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'OPTIONS': {\n            'loaders': [\n                'django.template.loaders.filesystem.Loader',\n                'django.template.loaders.app_directories.Loader',\n                ('django.template.loaders.cached.Loader', [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                ]),\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#custom-template-tags-integration","title":"Custom Template Tags Integration","text":"<p>Custom template tags work seamlessly:</p> <pre><code># myapp/templatetags/custom_tags.py\nfrom django import template\n\nregister = template.Library()\n\n@register.simple_tag\ndef custom_component(**kwargs):\n    return render_to_string('components/custom.html', kwargs)\n</code></pre> <pre><code>&lt;!-- In templates --&gt;\n{% load custom_tags %}\n&lt;include:card&gt;\n    {% custom_component data=my_data %}\n&lt;/include:card&gt;\n</code></pre>"},{"location":"tooling-integration/custom-engine/#performance-considerations","title":"Performance Considerations","text":""},{"location":"tooling-integration/custom-engine/#template-caching","title":"Template Caching","text":"<ul> <li>Preprocessing is cached: HTML component syntax transformation is cached</li> <li>Standard Django caching: All Django template caching mechanisms work</li> <li>Development vs Production: Use cached loader in production</li> </ul>"},{"location":"tooling-integration/custom-engine/#memory-usage","title":"Memory Usage","text":"<ul> <li>Minimal overhead: Engine adds minimal memory overhead</li> <li>Template parsing: Slightly more parsing for HTML components</li> <li>Context isolation: Each component gets isolated context (small overhead)</li> </ul>"},{"location":"tooling-integration/custom-engine/#optimization-tips","title":"Optimization Tips","text":"<pre><code># Production settings\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'OPTIONS': {\n            'loaders': [\n                ('django.template.loaders.cached.Loader', [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                ]),\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#debugging","title":"Debugging","text":""},{"location":"tooling-integration/custom-engine/#debug-information","title":"Debug Information","text":"<p>Enable template debugging for detailed error information:</p> <pre><code># settings.py\nDEBUG = True\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'OPTIONS': {\n            'debug': True,\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#error-messages","title":"Error Messages","text":"<p>The engine provides enhanced error messages:</p> <pre><code>TemplateSyntaxError: Invalid component syntax in template 'home.html' at line 15:\n&lt;include:card title=\"Hello&gt;\n              ^\nExpected closing quote for attribute 'title'\n</code></pre>"},{"location":"tooling-integration/custom-engine/#template-source-maps","title":"Template Source Maps","text":"<p>Line numbers in errors map to original template source:</p> <pre><code>TemplateSyntaxError at /\nMissing required prop 'title' for component 'card'\nTemplate: home.html\nLine: 23 (original: 23)\nComponent: components/card.html\n</code></pre>"},{"location":"tooling-integration/custom-engine/#compatibility","title":"Compatibility","text":""},{"location":"tooling-integration/custom-engine/#django-versions","title":"Django Versions","text":"<ul> <li>\u2705 Django 3.2 LTS</li> <li>\u2705 Django 4.0</li> <li>\u2705 Django 4.1</li> <li>\u2705 Django 4.2 LTS</li> <li>\u2705 Django 5.0</li> </ul>"},{"location":"tooling-integration/custom-engine/#template-engine-compatibility","title":"Template Engine Compatibility","text":"<p>Django Template Engine Specific</p> <p>This custom template engine is designed specifically for Django templates. For Jinja2 users, similar functionality is provided through the IncludeContentsExtension which offers:</p> <ul> <li>HTML component syntax via preprocessing</li> <li>Multi-line tag support (native in Jinja2)</li> <li>Context isolation and props system</li> <li>Template tag functionality</li> </ul> <p>Both engines provide equivalent features with different implementation approaches.</p>"},{"location":"tooling-integration/custom-engine/#third-party-packages","title":"Third-party Packages","text":"<p>The engine works with popular Django packages:</p> <ul> <li>Django REST Framework: API serialization with component templates</li> <li>Django Crispy Forms: Form rendering in components</li> <li>Django Compressor: Asset compression with component assets</li> <li>Django Debug Toolbar: Full debugging support</li> <li>Django Extensions: Template debugging tools</li> </ul>"},{"location":"tooling-integration/custom-engine/#migration-from-standard-engine","title":"Migration from Standard Engine","text":"<p>Migrating is seamless - all existing templates work unchanged:</p> <pre><code># Before\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # ... rest of config\n    },\n]\n\n# After\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        # ... same config - everything else unchanged\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#customization","title":"Customization","text":""},{"location":"tooling-integration/custom-engine/#engine-subclassing","title":"Engine Subclassing","text":"<p>Extend the engine for custom behavior:</p> <pre><code># myapp/engine.py\nfrom includecontents.django import DjangoTemplates\n\nclass CustomEngine(DjangoTemplates):\n    def __init__(self, params):\n        super().__init__(params)\n        # Custom initialization\n\n    def get_template(self, template_name):\n        # Custom template loading logic\n        return super().get_template(template_name)\n</code></pre> <pre><code># settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'myapp.engine.CustomEngine',\n        # ... config\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#custom-component-discovery","title":"Custom Component Discovery","text":"<p>Override component path resolution:</p> <pre><code>class CustomEngine(DjangoTemplates):\n    def resolve_component_template(self, component_name):\n        # Custom component resolution logic\n        if component_name.startswith('admin:'):\n            return f'admin/components/{component_name[6:]}.html'\n        return super().resolve_component_template(component_name)\n</code></pre>"},{"location":"tooling-integration/custom-engine/#testing","title":"Testing","text":""},{"location":"tooling-integration/custom-engine/#unit-testing-templates","title":"Unit Testing Templates","text":"<p>Test templates using Django's test client:</p> <pre><code>from django.test import TestCase\nfrom django.template import Template, Context\n\nclass TemplateTest(TestCase):\n    def test_component_rendering(self):\n        template = Template('&lt;include:card title=\"Test\"&gt;Content&lt;/include:card&gt;')\n        html = template.render(Context({}))\n        self.assertIn('Test', html)\n        self.assertIn('Content', html)\n</code></pre>"},{"location":"tooling-integration/custom-engine/#integration-testing","title":"Integration Testing","text":"<p>Test full template rendering:</p> <pre><code>from django.test import TestCase, Client\n\nclass ComponentIntegrationTest(TestCase):\n    def setUp(self):\n        self.client = Client()\n\n    def test_page_with_components(self):\n        response = self.client.get('/page-with-components/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'expected-component-output')\n</code></pre>"},{"location":"tooling-integration/custom-engine/#best-practices","title":"Best Practices","text":""},{"location":"tooling-integration/custom-engine/#1-gradual-migration","title":"1. Gradual Migration","text":"<p>Start using HTML components in new templates:</p> <pre><code>&lt;!-- New templates: Use HTML component syntax --&gt;\n&lt;include:card title=\"New Feature\"&gt;\n    Modern component syntax\n&lt;/include:card&gt;\n\n&lt;!-- Existing templates: Keep working as-is --&gt;\n{% load includecontents %}\n{% includecontents \"components/card.html\" title=\"Existing\" %}\n    Legacy syntax still works\n{% endincludecontents %}\n</code></pre>"},{"location":"tooling-integration/custom-engine/#2-component-organization","title":"2. Component Organization","text":"<p>Organize components logically:</p> <pre><code>templates/components/\n\u251c\u2500\u2500 ui/              # UI components\n\u2502   \u251c\u2500\u2500 button.html\n\u2502   \u251c\u2500\u2500 card.html\n\u2502   \u2514\u2500\u2500 modal.html\n\u251c\u2500\u2500 forms/           # Form components\n\u2502   \u251c\u2500\u2500 field.html\n\u2502   \u2514\u2500\u2500 fieldset.html\n\u251c\u2500\u2500 layout/          # Layout components\n\u2502   \u251c\u2500\u2500 header.html\n\u2502   \u251c\u2500\u2500 footer.html\n\u2502   \u2514\u2500\u2500 sidebar.html\n\u2514\u2500\u2500 content/         # Content components\n    \u251c\u2500\u2500 article.html\n    \u2514\u2500\u2500 summary.html\n</code></pre>"},{"location":"tooling-integration/custom-engine/#3-development-workflow","title":"3. Development Workflow","text":"<pre><code># Development settings\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'OPTIONS': {\n            'debug': True,\n            'string_if_invalid': 'INVALID_VARIABLE_%s',\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#4-production-configuration","title":"4. Production Configuration","text":"<pre><code># Production settings\nTEMPLATES = [\n    {\n        'BACKEND': 'includecontents.django.DjangoTemplates',\n        'OPTIONS': {\n            'debug': False,\n            'loaders': [\n                ('django.template.loaders.cached.Loader', [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                ]),\n            ],\n        },\n    },\n]\n</code></pre>"},{"location":"tooling-integration/custom-engine/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tooling-integration/custom-engine/#common-issues","title":"Common Issues","text":"<p>Issue: Components not found <pre><code>TemplateSyntaxError: Template 'components/button.html' does not exist\n</code></pre> Solution: Ensure component files are in <code>templates/components/</code> directory.</p> <p>Issue: Multi-line tags not parsing <pre><code>TemplateSyntaxError: Unclosed tag 'if'\n</code></pre> Solution: Check for missing closing tags or unbalanced parentheses.</p> <p>Issue: HTML syntax not working <pre><code>TemplateSyntaxError: Invalid block tag 'include:card'\n</code></pre> Solution: Verify you're using the custom engine, not standard Django engine.</p>"},{"location":"tooling-integration/custom-engine/#performance-issues","title":"Performance Issues","text":"<p>Monitor template rendering performance:</p> <pre><code># Add to middleware for debugging\nimport time\nfrom django.template.response import TemplateResponse\n\nclass TemplateTimingMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        start_time = time.time()\n        response = self.get_response(request)\n\n        if isinstance(response, TemplateResponse):\n            render_time = time.time() - start_time\n            print(f\"Template render time: {render_time:.3f}s\")\n\n        return response\n</code></pre>"},{"location":"tooling-integration/custom-engine/#next-steps","title":"Next Steps","text":"<ul> <li>Learn Component Patterns for advanced usage</li> <li>Explore Integration Guides for tooling setup</li> <li>Check the API Reference for complete engine details</li> </ul>"},{"location":"tooling-integration/multiline-tags/","title":"Multi-line Template Tags","text":"<p>The custom Django template engine supports multi-line template tags, allowing you to break long tags across multiple lines for better readability and maintainability.</p> <p>Template Engine Support</p> <p>Multi-line template tag support:</p> <ul> <li>Django: Requires the custom template engine (<code>includecontents.django.DjangoTemplates</code>)</li> <li>Jinja2: Native support built-in (no configuration needed!)</li> </ul> <p>Standard Django template engine does not support multi-line tags.</p>"},{"location":"tooling-integration/multiline-tags/#basic-multi-line-support","title":"Basic Multi-line Support","text":""},{"location":"tooling-integration/multiline-tags/#standard-django-tags","title":"Standard Django Tags","text":"<p>Break any Django template tag across multiple lines:</p> <pre><code>{% if \n    user.is_authenticated \n    and user.is_staff \n    and user.has_perm('myapp.view_admin')\n%}\n    Admin content here\n{% endif %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#complex-conditionals","title":"Complex Conditionals","text":"<pre><code>{% if \n    article.is_published \n    and article.publication_date &lt;= today\n    and not article.is_archived\n    or user.is_superuser\n%}\n    &lt;article&gt;{{ article.content }}&lt;/article&gt;\n{% endif %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#for-loops-with-complex-conditions","title":"For Loops with Complex Conditions","text":"<pre><code>{% for item in items \n    if item.is_active \n    and item.category in allowed_categories\n%}\n    &lt;div&gt;{{ item.name }}&lt;/div&gt;\n{% empty %}\n    &lt;p&gt;No active items found&lt;/p&gt;\n{% endfor %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#includecontents-multi-line","title":"IncludeContents Multi-line","text":""},{"location":"tooling-integration/multiline-tags/#long-component-calls","title":"Long Component Calls","text":"<pre><code>{% includecontents \"components/complex-card.html\"\n    title=\"Very Long Title That Would Make This Line Too Long\"\n    subtitle=\"An equally long subtitle with lots of descriptive text\"\n    author=article.author\n    publication_date=article.created_at\n    category=article.category\n    is_featured=article.featured\n    show_meta=True\n    show_actions=user.can_edit\n%}\n    &lt;p&gt;Component content goes here&lt;/p&gt;\n\n    {% contents sidebar %}\n        &lt;h3&gt;Related Articles&lt;/h3&gt;\n        &lt;ul&gt;\n            {% for related in article.related_articles.all %}\n                &lt;li&gt;&lt;a href=\"{{ related.get_absolute_url }}\"&gt;{{ related.title }}&lt;/a&gt;&lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#multi-line-wrapif","title":"Multi-line Wrapif","text":"<pre><code>{% wrapif \n    user.is_authenticated \n    and user.profile.is_complete\n    and user.has_perm('articles.view_article'\n    then \"div\" \n    class=\"authenticated-content\"\n    data-user-id=user.pk\n%}\n    Welcome back, {{ user.get_full_name }}!\n{% endwrapif %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#formatting-guidelines","title":"Formatting Guidelines","text":""},{"location":"tooling-integration/multiline-tags/#indentation","title":"Indentation","text":"<p>Use consistent indentation to show the structure:</p> <pre><code>{% if complex_condition_one\n    and complex_condition_two\n    and complex_condition_three\n%}\n    {% for item in long_queryset_name.filter(\n        status='published'\n    ).select_related(\n        'author', 'category'\n    ).prefetch_related(\n        'tags'\n    ) %}\n        &lt;div class=\"item\"&gt;\n            {{ item.title }}\n        &lt;/div&gt;\n    {% endfor %}\n{% endif %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#line-breaks","title":"Line Breaks","text":"<p>Break at logical points:</p> <pre><code>&lt;!-- \u2705 Good: Break at logical operators --&gt;\n{% if user.is_authenticated \n    and user.is_active \n    and user.profile.is_complete\n%}\n\n&lt;!-- \u2705 Good: Break at parameter boundaries --&gt;\n{% includecontents \"template.html\"\n    param_one=\"value_one\"\n    param_two=\"value_two\"\n    param_three=\"value_three\"\n%}\n\n&lt;!-- \u274c Avoid: Random line breaks --&gt;\n{% if user.is_authenticated and user.\n    is_active and user.profile.is_complete\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#real-world-examples","title":"Real-world Examples","text":""},{"location":"tooling-integration/multiline-tags/#complex-form-rendering","title":"Complex Form Rendering","text":"<pre><code>{% for field in form.visible_fields %}\n    {% includecontents \"components/form-field.html\"\n        field=field\n        label=field.label\n        help_text=field.help_text\n        required=field.field.required\n        widget_type=field.widget.__class__.__name__\n        css_classes=field.css_classes\n        show_label=True\n        show_help=True\n        show_errors=True\n    %}\n        {% if field.errors %}\n            {% contents errors %}\n                {% for error in field.errors %}\n                    &lt;div class=\"error\"&gt;{{ error }}&lt;/div&gt;\n                {% endfor %}\n            {% endcontents %}\n        {% endif %}\n\n        {% if field.help_text %}\n            {% contents help %}\n                &lt;small&gt;{{ field.help_text }}&lt;/small&gt;\n            {% endcontents %}\n        {% endif %}\n    {% endincludecontents %}\n{% endfor %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#permission-based-content","title":"Permission-Based Content","text":"<pre><code>{% wrapif \n    user.is_authenticated\n    and user.has_perm('articles.change_article'\n    and article.author == user\n    or user.is_superuser\n    then \"div\"\n    class=\"editable-content\"\n    data-edit-url=\"{% url 'edit_article' article.pk %}\"\n    data-can-delete=\"{{ user.has_perm('articles.delete_article')|yesno:'true,false' }}\"\n%}\n    &lt;article&gt;\n        &lt;h1&gt;{{ article.title }}&lt;/h1&gt;\n        &lt;div class=\"content\"&gt;{{ article.content|safe }}&lt;/div&gt;\n\n        &lt;div class=\"edit-controls\"&gt;\n            &lt;a href=\"{% url 'edit_article' article.pk %}\"&gt;Edit&lt;/a&gt;\n            {% if user.has_perm('articles.delete_article') %}\n                &lt;a href=\"{% url 'delete_article' article.pk %}\" class=\"danger\"&gt;Delete&lt;/a&gt;\n            {% endif %}\n        &lt;/div&gt;\n    &lt;/article&gt;\n{% endwrapif %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#complex-data-processing","title":"Complex Data Processing","text":"<pre><code>{% with processed_items=items|dictsort:\"priority\"|slice:\":10\" %}\n    {% if processed_items %}\n        {% for item in processed_items %}\n            {% includecontents \"components/priority-item.html\"\n                item=item\n                show_priority=True\n                show_date=item.created_date\n                show_author=item.author.get_full_name\n                css_class=\"priority-{{ item.priority|default:'normal' }}\"\n                is_urgent=item.priority|default:0|add:0|divisibleby:1|yesno:\"true,false\"\n            %}\n                {{ item.description|truncatewords:20 }}\n\n                {% contents metadata %}\n                    &lt;span class=\"priority\"&gt;Priority: {{ item.priority }}&lt;/span&gt;\n                    &lt;span class=\"date\"&gt;{{ item.created_date|date:\"M d, Y\" }}&lt;/span&gt;\n                    &lt;span class=\"author\"&gt;{{ item.author.get_full_name }}&lt;/span&gt;\n                {% endcontents %}\n            {% endincludecontents %}\n        {% endfor %}\n    {% else %}\n        &lt;p class=\"empty-state\"&gt;No priority items found.&lt;/p&gt;\n    {% endif %}\n{% endwith %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#integration-with-formatters","title":"Integration with Formatters","text":""},{"location":"tooling-integration/multiline-tags/#prettier-integration","title":"Prettier Integration","text":"<p>The multi-line syntax works well with Prettier's Django template formatting:</p> <pre><code>&lt;!-- Before formatting --&gt;\n{% if user.is_authenticated and user.is_staff and user.has_perm('myapp.view_admin') %}Content{% endif %}\n\n&lt;!-- After Prettier formatting --&gt;\n{% if\n  user.is_authenticated and\n  user.is_staff and\n  user.has_perm('myapp.view_admin')\n%}\n  Content\n{% endif %}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#custom-formatting-rules","title":"Custom Formatting Rules","text":"<p>Configure your editor to format multi-line tags consistently:</p> <pre><code>// .prettierrc for Django templates\n{\n  \"plugins\": [\"prettier-plugin-jinja-template\"],\n  \"overrides\": [\n    {\n      \"files\": [\"**/{templates,jinja2}/**/*.html\"],\n      \"options\": {\n        \"parser\": \"jinja-template\",\n        \"printWidth\": 100,\n        \"tabWidth\": 2\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#benefits","title":"Benefits","text":""},{"location":"tooling-integration/multiline-tags/#readability","title":"Readability","text":"<pre><code>&lt;!-- \u274c Hard to read: Single line --&gt;\n{% includecontents \"components/complex-card.html\" title=\"Long title here\" subtitle=\"Long subtitle here\" author=article.author publication_date=article.created_at category=article.category is_featured=article.featured %}\n\n&lt;!-- \u2705 Easy to read: Multi-line --&gt;\n{% includecontents \"components/complex-card.html\"\n    title=\"Long title here\"\n    subtitle=\"Long subtitle here\"\n    author=article.author\n    publication_date=article.created_at\n    category=article.category\n    is_featured=article.featured\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#maintainability","title":"Maintainability","text":"<pre><code>&lt;!-- Easy to add/remove/modify parameters --&gt;\n{% includecontents \"components/user-card.html\"\n    user=user\n    show_avatar=True\n    show_bio=True\n    show_contact=user.profile.show_contact\n    show_social=user.profile.show_social\n    &lt;!-- Easy to add: show_badges=True --&gt;\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#code-reviews","title":"Code Reviews","text":"<p>Multi-line tags make it easier to review changes:</p> <pre><code>{% includecontents \"components/article.html\"\n    title=article.title\n    author=article.author\n+   publication_date=article.created_at\n    content=article.content\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#limitations","title":"Limitations","text":""},{"location":"tooling-integration/multiline-tags/#parser-constraints","title":"Parser Constraints","text":"<p>Some complex expressions may need parentheses:</p> <pre><code>&lt;!-- \u2705 Works --&gt;\n{% if (user.is_authenticated and user.is_staff)\n    or user.is_superuser\n%}\n\n&lt;!-- \u274c May not parse correctly --&gt;\n{% if user.is_authenticated and user.is_staff\n    or user.is_superuser\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#template-loader-compatibility","title":"Template Loader Compatibility","text":"<p>Multi-line tags work with: - \u2705 File system loader - \u2705 App directories loader - \u2705 Cached loader - \u2705 Custom loaders (usually)</p>"},{"location":"tooling-integration/multiline-tags/#best-practices","title":"Best Practices","text":""},{"location":"tooling-integration/multiline-tags/#1-use-consistent-indentation","title":"1. Use Consistent Indentation","text":"<pre><code>&lt;!-- \u2705 Good: Consistent 4-space indentation --&gt;\n{% includecontents \"template.html\"\n    param_one=\"value\"\n    param_two=\"value\"\n    param_three=\"value\"\n%}\n\n&lt;!-- \u274c Inconsistent indentation --&gt;\n{% includecontents \"template.html\"\n  param_one=\"value\"\n    param_two=\"value\"\n      param_three=\"value\"\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#2-group-related-parameters","title":"2. Group Related Parameters","text":"<pre><code>&lt;!-- \u2705 Good: Logical grouping --&gt;\n{% includecontents \"components/user-profile.html\"\n    user=user\n\n    show_avatar=True\n    show_bio=True\n    show_contact=True\n\n    avatar_size=\"large\"\n    theme=\"dark\"\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#3-break-long-conditions-logically","title":"3. Break Long Conditions Logically","text":"<pre><code>&lt;!-- \u2705 Good: Break at logical operators --&gt;\n{% if user.is_authenticated \n    and user.profile.is_verified\n    and user.has_perm('content.view')\n%}\n\n&lt;!-- \u2705 Good: Group related conditions --&gt;\n{% if (user.is_authenticated and user.profile.is_verified)\n    and (article.is_published or user.is_author)\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#4-align-similar-elements","title":"4. Align Similar Elements","text":"<pre><code>&lt;!-- \u2705 Good: Aligned parameters --&gt;\n{% includecontents \"template.html\"\n    title      = \"Article Title\"\n    author     = article.author\n    date       = article.created_at\n    category   = article.category\n%}\n</code></pre>"},{"location":"tooling-integration/multiline-tags/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Custom Engine features</li> <li>Explore Component Patterns for advanced usage</li> <li>Check out Integration Guides for formatting setup</li> </ul>"},{"location":"tooling-integration/prettier-formatting/","title":"Prettier Integration","text":"<p>Django IncludeContents works excellently with Prettier for consistent template formatting. The HTML component syntax integrates seamlessly with Prettier's formatting capabilities.</p>"},{"location":"tooling-integration/prettier-formatting/#installation","title":"Installation","text":"<p>Install the Prettier plugin for Django/Jinja templates:</p> <pre><code>npm install --save-dev prettier prettier-plugin-jinja-template\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#configuration","title":"Configuration","text":""},{"location":"tooling-integration/prettier-formatting/#basic-configuration","title":"Basic Configuration","text":"<p>Create a <code>.prettierrc</code> file in your project root:</p> <pre><code>{\n  \"plugins\": [\"prettier-plugin-jinja-template\"],\n  \"overrides\": [\n    {\n      \"files\": [\"**/{templates,jinja2}/**/*.html\"],\n      \"options\": {\n        \"parser\": \"jinja-template\",\n        \"printWidth\": 100,\n        \"tabWidth\": 2,\n        \"useTabs\": false\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#advanced-configuration","title":"Advanced Configuration","text":"<p>For more control over formatting:</p> <pre><code>{\n  \"plugins\": [\"prettier-plugin-jinja-template\"],\n  \"overrides\": [\n    {\n      \"files\": [\"**/{templates,jinja2}/**/*.html\"],\n      \"options\": {\n        \"parser\": \"jinja-template\",\n        \"printWidth\": 100,\n        \"tabWidth\": 2,\n        \"useTabs\": false,\n        \"singleQuote\": false,\n        \"htmlWhitespaceSensitivity\": \"css\",\n        \"endOfLine\": \"lf\"\n      }\n    },\n    {\n      \"files\": [\"**/components/**/*.html\"],\n      \"options\": {\n        \"parser\": \"jinja-template\",\n        \"printWidth\": 80,\n        \"tabWidth\": 2\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#component-formatting","title":"Component Formatting","text":""},{"location":"tooling-integration/prettier-formatting/#before-and-after-examples","title":"Before and After Examples","text":"<p>Before formatting: <pre><code>&lt;include:card title=\"Long Title Here\" subtitle=\"An equally long subtitle\" class=\"my-card\"&gt;&lt;p&gt;Content here&lt;/p&gt;&lt;content:footer&gt;&lt;button&gt;Action&lt;/button&gt;&lt;/content:footer&gt;&lt;/include:card&gt;\n</code></pre></p> <p>After Prettier formatting: <pre><code>&lt;include:card\n  title=\"Long Title Here\"\n  subtitle=\"An equally long subtitle\"\n  class=\"my-card\"\n&gt;\n  &lt;p&gt;Content here&lt;/p&gt;\n  &lt;content:footer&gt;\n    &lt;button&gt;Action&lt;/button&gt;\n  &lt;/content:footer&gt;\n&lt;/include:card&gt;\n</code></pre></p>"},{"location":"tooling-integration/prettier-formatting/#multi-line-template-tags","title":"Multi-line Template Tags","text":"<p>Before: <pre><code>{% includecontents \"components/complex.html\" title=\"Title\" author=article.author date=article.created_at featured=article.is_featured %}Content{% endincludecontents %}\n</code></pre></p> <p>After: <pre><code>{% includecontents \"components/complex.html\"\n  title=\"Title\"\n  author=article.author\n  date=article.created_at\n  featured=article.is_featured\n%}\n  Content\n{% endincludecontents %}\n</code></pre></p>"},{"location":"tooling-integration/prettier-formatting/#formatting-features","title":"Formatting Features","text":""},{"location":"tooling-integration/prettier-formatting/#attribute-formatting","title":"Attribute Formatting","text":"<p>Prettier automatically formats component attributes:</p> <pre><code>&lt;!-- Input --&gt;\n&lt;include:button variant=\"primary\" size=\"large\" disabled class=\"my-button\" data-action=\"submit\"&gt;Submit&lt;/include:button&gt;\n\n&lt;!-- Formatted --&gt;\n&lt;include:button\n  variant=\"primary\"\n  size=\"large\"\n  disabled\n  class=\"my-button\"\n  data-action=\"submit\"\n&gt;\n  Submit\n&lt;/include:button&gt;\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#content-block-formatting","title":"Content Block Formatting","text":"<pre><code>&lt;!-- Input --&gt;\n&lt;include:article&gt;&lt;content:header&gt;&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Subtitle&lt;/p&gt;&lt;/content:header&gt;&lt;p&gt;Main content&lt;/p&gt;&lt;/include:article&gt;\n\n&lt;!-- Formatted --&gt;\n&lt;include:article&gt;\n  &lt;content:header&gt;\n    &lt;h1&gt;Title&lt;/h1&gt;\n    &lt;p&gt;Subtitle&lt;/p&gt;\n  &lt;/content:header&gt;\n  &lt;p&gt;Main content&lt;/p&gt;\n&lt;/include:article&gt;\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#template-expression-formatting","title":"Template Expression Formatting","text":"<pre><code>&lt;!-- Input --&gt;\n&lt;include:user-card user=\"{{ user }}\" avatar-url=\"{% if user.avatar %}{{ user.avatar.url }}{% endif %}\" active=\"{{ user.is_active|yesno:'true,false' }}\"&gt;\n\n&lt;!-- Formatted --&gt;\n&lt;include:user-card\n  user=\"{{ user }}\"\n  avatar-url=\"{% if user.avatar %}{{ user.avatar.url }}{% endif %}\"\n  active=\"{{ user.is_active|yesno:'true,false' }}\"\n&gt;\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#editor-integration","title":"Editor Integration","text":""},{"location":"tooling-integration/prettier-formatting/#vs-code","title":"VS Code","text":"<p>Install the Prettier VS Code extension:</p> <pre><code>code --install-extension esbenp.prettier-vscode\n</code></pre> <p>Add to your VS Code settings (<code>settings.json</code>):</p> <pre><code>{\n  \"[django-html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[jinja-html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"prettier.documentSelectors\": [\n    \"**/*.html\"\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#sublime-text","title":"Sublime Text","text":"<p>Install Package Control, then install: - SublimeJsPrettier - Django</p> <p>Configure in Preferences &gt; Package Settings &gt; JsPrettier &gt; Settings:</p> <pre><code>{\n  \"prettier_cli_path\": \"/usr/local/bin/prettier\",\n  \"node_path\": \"/usr/local/bin/node\",\n  \"auto_format_on_save\": true,\n  \"custom_file_extensions\": [\"html\"]\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#vimneovim","title":"Vim/Neovim","text":"<p>Using vim-prettier plugin:</p> <pre><code>\" Install vim-prettier\nPlug 'prettier/vim-prettier', { 'do': 'yarn install' }\n\n\" Configure for Django templates\nlet g:prettier#autoformat = 1\nlet g:prettier#autoformat_require_pragma = 0\nautocmd BufWritePre *.html PrettierAsync\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#script-integration","title":"Script Integration","text":""},{"location":"tooling-integration/prettier-formatting/#packagejson-scripts","title":"Package.json Scripts","text":"<p>Add formatting scripts to your <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"format\": \"prettier --write \\\"**/{templates,jinja2}/**/*.html\\\"\",\n    \"format:check\": \"prettier --check \\\"**/{templates,jinja2}/**/*.html\\\"\",\n    \"format:components\": \"prettier --write \\\"**/components/**/*.html\\\"\"\n  },\n  \"devDependencies\": {\n    \"prettier\": \"^3.0.0\",\n    \"prettier-plugin-jinja-template\": \"^1.0.0\"\n  }\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Using pre-commit framework, add to <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v3.0.0\n    hooks:\n      - id: prettier\n        files: \\.(html)$\n        additional_dependencies:\n          - prettier@3.0.0\n          - prettier-plugin-jinja-template@1.0.0\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#github-actions","title":"GitHub Actions","text":"<p>Add to your CI workflow:</p> <pre><code>name: Format Check\non: [push, pull_request]\n\njobs:\n  format-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n      - run: npm install\n      - run: npm run format:check\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#configuration-tips","title":"Configuration Tips","text":""},{"location":"tooling-integration/prettier-formatting/#handling-django-template-tags","title":"Handling Django Template Tags","text":"<p>Configure to preserve Django template tag formatting:</p> <pre><code>{\n  \"overrides\": [\n    {\n      \"files\": [\"**/*.html\"],\n      \"options\": {\n        \"parser\": \"jinja-template\",\n        \"htmlWhitespaceSensitivity\": \"strict\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#component-specific-settings","title":"Component-Specific Settings","text":"<p>Different formatting for different component types:</p> <pre><code>{\n  \"overrides\": [\n    {\n      \"files\": [\"**/components/ui/**/*.html\"],\n      \"options\": {\n        \"printWidth\": 80,\n        \"tabWidth\": 2\n      }\n    },\n    {\n      \"files\": [\"**/components/layout/**/*.html\"],\n      \"options\": {\n        \"printWidth\": 120,\n        \"tabWidth\": 4\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#ignore-patterns","title":"Ignore Patterns","text":"<p>Use <code>.prettierignore</code> to exclude certain files:</p> <pre><code># .prettierignore\nnode_modules/\nvenv/\nstatic/\ndist/\n*.min.html\nthird_party/\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"tooling-integration/prettier-formatting/#issue-prettier-breaking-django-template-tags","title":"Issue: Prettier Breaking Django Template Tags","text":"<p>Problem: <pre><code>&lt;!-- Before --&gt;\n{% if user.is_authenticated and user.is_staff %}\n\n&lt;!-- Prettier breaks it to --&gt;\n{% if user.is_authenticated and user.is_staff %}\n</code></pre></p> <p>Solution: Use the jinja-template parser in your config:</p> <pre><code>{\n  \"parser\": \"jinja-template\"\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#issue-long-attribute-values","title":"Issue: Long Attribute Values","text":"<p>Problem: Long template expressions in attributes get awkwardly formatted.</p> <p>Solution: Use shorter variable names or break into multiple steps:</p> <pre><code>&lt;!-- Before --&gt;\n&lt;include:card title=\"{% if article.is_featured %}Featured: {{ article.title }}{% else %}{{ article.title }}{% endif %}\"&gt;\n\n&lt;!-- Better --&gt;\n{% with display_title=article.get_display_title %}\n  &lt;include:card title=\"{{ display_title }}\"&gt;\n{% endwith %}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#issue-alpinejs-attributes","title":"Issue: AlpineJS Attributes","text":"<p>Problem: Prettier removes quotes from AlpineJS attributes:</p> <pre><code>&lt;!-- Input --&gt;\n&lt;div x-data=\"{ open: false }\"&gt;\n\n&lt;!-- Prettier removes quotes --&gt;\n&lt;div x-data={ open: false }&gt;\n</code></pre> <p>Solution: Use template variables:</p> <pre><code>&lt;!-- Workaround --&gt;\n&lt;div x-data=\"{{ '{ open: false }' }}\"&gt;\n</code></pre> <p>Or configure Prettier to preserve certain attributes:</p> <pre><code>{\n  \"htmlWhitespaceSensitivity\": \"strict\"\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#advanced-configuration_1","title":"Advanced Configuration","text":""},{"location":"tooling-integration/prettier-formatting/#custom-prettier-plugin","title":"Custom Prettier Plugin","text":"<p>Create a custom configuration for your project:</p> <pre><code>// prettier.config.js\nmodule.exports = {\n  plugins: ['prettier-plugin-jinja-template'],\n  overrides: [\n    {\n      files: ['**/*.html'],\n      options: {\n        parser: 'jinja-template',\n        printWidth: 100,\n        tabWidth: 2,\n        useTabs: false,\n        singleQuote: false,\n        // Custom formatting for components\n        htmlWhitespaceSensitivity: 'css',\n        endOfLine: 'lf',\n      },\n    },\n  ],\n  // Custom rules for different directories\n  ...(process.env.NODE_ENV === 'development' &amp;&amp; {\n    overrides: [\n      ...module.exports.overrides,\n      {\n        files: ['**/components/**/*.html'],\n        options: {\n          printWidth: 80,\n          tabWidth: 2,\n        },\n      },\n    ],\n  }),\n};\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#team-configuration","title":"Team Configuration","text":"<p>Share configuration across your team:</p> <pre><code>{\n  \"name\": \"myproject\",\n  \"prettier\": {\n    \"plugins\": [\"prettier-plugin-jinja-template\"],\n    \"overrides\": [\n      {\n        \"files\": [\"**/*.html\"],\n        \"options\": {\n          \"parser\": \"jinja-template\",\n          \"printWidth\": 100,\n          \"tabWidth\": 2\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#best-practices","title":"Best Practices","text":""},{"location":"tooling-integration/prettier-formatting/#1-consistent-configuration","title":"1. Consistent Configuration","text":"<p>Use the same Prettier configuration across all developers:</p> <pre><code># Install exact versions\nnpm install --save-dev --save-exact prettier@3.0.0 prettier-plugin-jinja-template@1.0.0\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#2-format-on-save","title":"2. Format on Save","text":"<p>Enable format-on-save in your editor for consistent formatting.</p>"},{"location":"tooling-integration/prettier-formatting/#3-pre-commit-formatting","title":"3. Pre-commit Formatting","text":"<p>Always format before committing:</p> <pre><code># Add to git hooks\nnpm run format &amp;&amp; git add .\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#4-component-guidelines","title":"4. Component Guidelines","text":"<p>Follow consistent patterns in components:</p> <pre><code>&lt;!-- \u2705 Good: Consistent attribute ordering --&gt;\n&lt;include:button\n  variant=\"primary\"\n  size=\"large\"\n  disabled=\"{{ is_disabled }}\"\n  class=\"my-button\"\n  data-action=\"submit\"\n&gt;\n  Submit\n&lt;/include:button&gt;\n\n&lt;!-- \u274c Avoid: Inconsistent formatting --&gt;\n&lt;include:button variant=\"primary\" size=\"large\"\ndisabled=\"{{ is_disabled }}\"\nclass=\"my-button\" data-action=\"submit\"&gt;Submit&lt;/include:button&gt;\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#5-documentation","title":"5. Documentation","text":"<p>Document your Prettier configuration:</p> <pre><code>## Code Formatting\n\nThis project uses Prettier for consistent code formatting.\n\n### Setup\n1. Install dependencies: `npm install`\n2. Format all templates: `npm run format`\n3. Check formatting: `npm run format:check`\n\n### Editor Setup\n- VS Code: Install Prettier extension and enable format-on-save\n- Other editors: See docs/prettier-setup.md\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tooling-integration/prettier-formatting/#debug-prettier-issues","title":"Debug Prettier Issues","text":"<pre><code># Check what files Prettier will format\nnpx prettier --find-config-path templates/\n\n# Test formatting a specific file\nnpx prettier --write templates/components/button.html\n\n# Debug parser issues\nnpx prettier --parser jinja-template --write templates/test.html\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#performance-tips","title":"Performance Tips","text":"<p>For large codebases:</p> <pre><code># Format only changed files\nnpx prettier --write $(git diff --name-only --diff-filter=ACMRTUXB | grep '\\.html$')\n\n# Use ignore patterns\necho \"node_modules/\" &gt;&gt; .prettierignore\necho \"static/\" &gt;&gt; .prettierignore\n</code></pre>"},{"location":"tooling-integration/prettier-formatting/#next-steps","title":"Next Steps","text":"<ul> <li>Set up VS Code Integration for the complete development experience</li> <li>Configure Tailwind CSS for utility-first styling</li> <li>Check the Component Patterns guide for formatting examples</li> </ul>"},{"location":"tooling-integration/tailwind-css/","title":"Tailwind CSS Integration","text":"<p>Django IncludeContents works excellently with Tailwind CSS, providing powerful utilities for building styled components. The conditional class system integrates seamlessly with Tailwind's utility-first approach.</p>"},{"location":"tooling-integration/tailwind-css/#setup","title":"Setup","text":""},{"location":"tooling-integration/tailwind-css/#installation","title":"Installation","text":"<p>Install Tailwind CSS in your Django project:</p> <pre><code># Install via npm\nnpm install -D tailwindcss @tailwindcss/forms @tailwindcss/typography\nnpx tailwindcss init\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#configuration","title":"Configuration","text":"<p>Configure <code>tailwind.config.js</code> to work with Django IncludeContents:</p> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: {\n    files: [\n      './templates/**/*.html',\n      './static/js/**/*.js',\n      './*/templates/**/*.html',  // App templates\n      '!./node_modules',\n    ],\n    transform: {\n      // Handle Django IncludeContents class: syntax\n      html: (content) =&gt; {\n        return content.replace(/class:([\\w-]+)/g, '$1');\n      },\n    },\n  },\n  theme: {\n    extend: {\n      // Custom colors for your components\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8',\n        },\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#css-file","title":"CSS File","text":"<p>Create <code>static/css/tailwind.css</code>:</p> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom component styles */\n@layer components {\n  .btn {\n    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50;\n  }\n\n  .btn-primary {\n    @apply bg-primary-600 text-white hover:bg-primary-700;\n  }\n\n  .btn-secondary {\n    @apply bg-gray-100 text-gray-900 hover:bg-gray-200;\n  }\n\n  .btn-sm {\n    @apply h-8 px-3 text-xs;\n  }\n\n  .btn-md {\n    @apply h-10 px-4 py-2;\n  }\n\n  .btn-lg {\n    @apply h-12 px-8 text-base;\n  }\n}\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#build-process","title":"Build Process","text":"<p>Add to <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"build-css\": \"tailwindcss -i ./static/css/tailwind.css -o ./static/css/output.css --watch\",\n    \"build-css-prod\": \"tailwindcss -i ./static/css/tailwind.css -o ./static/css/output.css --minify\"\n  }\n}\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#component-examples","title":"Component Examples","text":""},{"location":"tooling-integration/tailwind-css/#button-component","title":"Button Component","text":"<p>templates/components/button.html <pre><code>{# props variant=primary,secondary,danger, size=sm,md,lg, disabled=False #}\n&lt;button {% attrs\n  class=\"btn\"\n  class:btn-primary=variantPrimary\n  class:btn-secondary=variantSecondary\n  class:btn-danger=variantDanger\n  class:btn-sm=sizeSm\n  class:btn-md=sizeMd\n  class:btn-lg=sizeLg\n  class:opacity-50=disabled\n  class:cursor-not-allowed=disabled\n  disabled=disabled\n%}&gt;\n  {{ contents }}\n&lt;/button&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:button variant=\"primary\" size=\"lg\"&gt;\n  Large Primary Button\n&lt;/include:button&gt;\n\n&lt;include:button variant=\"danger\" disabled=\"true\"&gt;\n  Disabled Danger Button\n&lt;/include:button&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#card-component","title":"Card Component","text":"<p>templates/components/card.html <pre><code>{# props title=\"\", shadow=sm,md,lg,xl, rounded=md,lg,xl #}\n&lt;div {% attrs\n  class=\"bg-white border border-gray-200\"\n  class:shadow-sm=shadowSm\n  class:shadow-md=shadowMd\n  class:shadow-lg=shadowLg\n  class:shadow-xl=shadowXl\n  class:rounded-md=roundedMd\n  class:rounded-lg=roundedLg\n  class:rounded-xl=roundedXl\n%}&gt;\n  {% if title %}\n    &lt;div class=\"px-6 py-4 border-b border-gray-200\"&gt;\n      &lt;h3 class=\"text-lg font-medium text-gray-900\"&gt;{{ title }}&lt;/h3&gt;\n    &lt;/div&gt;\n  {% endif %}\n\n  &lt;div class=\"px-6 py-4\"&gt;\n    {{ contents }}\n  &lt;/div&gt;\n\n  {% if contents.footer %}\n    &lt;div class=\"px-6 py-4 bg-gray-50 border-t border-gray-200\"&gt;\n      {{ contents.footer }}\n    &lt;/div&gt;\n  {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#form-field-component","title":"Form Field Component","text":"<p>templates/components/forms/field.html <pre><code>{# props \n  name, \n  label=\"\", \n  type=text,email,password,\n  required=False,\n  error=\"\",\n  help_text=\"\",\n  size=sm,md,lg\n#}\n&lt;div class=\"space-y-1\"&gt;\n  {% if label %}\n    &lt;label for=\"{{ name }}\" class=\"block text-sm font-medium text-gray-700\"&gt;\n      {{ label }}\n      {% if required %}\n        &lt;span class=\"text-red-500\"&gt;*&lt;/span&gt;\n      {% endif %}\n    &lt;/label&gt;\n  {% endif %}\n\n  &lt;input {% attrs.input\n    type=type\n    name=name\n    id=name\n    required=required\n    class=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500\"\n    class:text-sm=sizeSm\n    class:text-base=sizeMd\n    class:text-lg=sizeLg\n    class:border-red-300=error\n    class:focus:ring-red-500=error\n    class:focus:border-red-500=error\n  %}&gt;\n\n  {% if help_text %}\n    &lt;p class=\"text-sm text-gray-500\"&gt;{{ help_text }}&lt;/p&gt;\n  {% endif %}\n\n  {% if error %}\n    &lt;p class=\"text-sm text-red-600\"&gt;{{ error }}&lt;/p&gt;\n  {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"tooling-integration/tailwind-css/#responsive-components","title":"Responsive Components","text":"<p>templates/components/grid.html <pre><code>{# props cols_sm=1, cols_md=2, cols_lg=3, cols_xl=4, gap=4 #}\n&lt;div {% attrs\n  class=\"grid gap-{{ gap }}\"\n  class:grid-cols-{{ cols_sm }}=True\n  class:md:grid-cols-{{ cols_md }}=True\n  class:lg:grid-cols-{{ cols_lg }}=True\n  class:xl:grid-cols-{{ cols_xl }}=True\n%}&gt;\n  {{ contents }}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#dynamic-color-components","title":"Dynamic Color Components","text":"<p>templates/components/badge.html <pre><code>{# props \n  variant=gray,red,yellow,green,blue,indigo,purple,pink,\n  size=sm,md,lg\n#}\n&lt;span {% attrs\n  class=\"inline-flex items-center rounded-full font-medium\"\n  class:px-2=sizeSm\n  class:py-1=sizeSm\n  class:text-xs=sizeSm\n  class:px-2.5=sizeMd\n  class:py-0.5=sizeMd\n  class:text-sm=sizeMd\n  class:px-3=sizeLg\n  class:py-1=sizeLg\n  class:text-base=sizeLg\n  class:bg-gray-100=variantGray\n  class:text-gray-800=variantGray\n  class:bg-red-100=variantRed\n  class:text-red-800=variantRed\n  class:bg-yellow-100=variantYellow\n  class:text-yellow-800=variantYellow\n  class:bg-green-100=variantGreen\n  class:text-green-800=variantGreen\n  class:bg-blue-100=variantBlue\n  class:text-blue-800=variantBlue\n  class:bg-indigo-100=variantIndigo\n  class:text-indigo-800=variantIndigo\n  class:bg-purple-100=variantPurple\n  class:text-purple-800=variantPurple\n  class:bg-pink-100=variantPink\n  class:text-pink-800=variantPink\n%}&gt;\n  {{ contents }}\n&lt;/span&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#interactive-components","title":"Interactive Components","text":"<p>templates/components/dropdown.html <pre><code>{# props trigger_text=\"Options\", align=left,right #}\n&lt;div class=\"relative inline-block text-left\" x-data=\"{ open: false }\"&gt;\n  &lt;button\n    @click=\"open = !open\"\n    class=\"inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\n  &gt;\n    {{ trigger_text }}\n    &lt;svg class=\"-mr-1 h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"&gt;\n      &lt;path fill-rule=\"evenodd\" d=\"M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z\" clip-rule=\"evenodd\" /&gt;\n    &lt;/svg&gt;\n  &lt;/button&gt;\n\n  &lt;div\n    x-show=\"open\"\n    @click.outside=\"open = false\"\n    x-transition\n    {% attrs\n      class=\"absolute z-10 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\"\n      class:right-0=alignRight\n      class:left-0=alignLeft\n    %}\n  &gt;\n    &lt;div class=\"py-1\"&gt;\n      {{ contents }}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#dark-mode-support","title":"Dark Mode Support","text":""},{"location":"tooling-integration/tailwind-css/#theme-aware-components","title":"Theme-Aware Components","text":"<p>templates/components/themed-card.html <pre><code>{# props #}\n&lt;div {% attrs\n  class=\"border rounded-lg p-6 transition-colors\"\n  class=\"bg-white dark:bg-gray-800\"\n  class=\"border-gray-200 dark:border-gray-700\"\n  class=\"text-gray-900 dark:text-gray-100\"\n%}&gt;\n  {{ contents }}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#theme-toggle-component","title":"Theme Toggle Component","text":"<p>templates/components/theme-toggle.html <pre><code>{# props #}\n&lt;button\n  @click=\"toggleTheme()\"\n  class=\"p-2 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n  aria-label=\"Toggle theme\"\n&gt;\n  &lt;svg x-show=\"theme === 'light'\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\"&gt;\n    &lt;path fill-rule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;\n  &lt;/svg&gt;\n  &lt;svg x-show=\"theme === 'dark'\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\"&gt;\n    &lt;path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\"&gt;&lt;/path&gt;\n  &lt;/svg&gt;\n&lt;/button&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#build-integration","title":"Build Integration","text":""},{"location":"tooling-integration/tailwind-css/#django-integration","title":"Django Integration","text":"<p>settings.py <pre><code># Static files\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n\n# For development\nif DEBUG:\n    STATICFILES_DIRS += [\n        BASE_DIR / \"node_modules\",\n    ]\n</code></pre></p> <p>base.html <pre><code>{% load static %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" class=\"h-full bg-gray-50\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{% block title %}My Site{% endblock %}&lt;/title&gt;\n    &lt;link href=\"{% static 'css/output.css' %}\" rel=\"stylesheet\"&gt;\n    &lt;script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body class=\"h-full\" x-data=\"{ theme: 'light' }\"&gt;\n    &lt;div class=\"min-h-full\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#production-build","title":"Production Build","text":"<p>Docker configuration: <pre><code># Install Node.js for Tailwind CSS\nFROM node:18-alpine AS css-builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build-css-prod\n\n# Django build\nFROM python:3.11-alpine\n# ... Django setup\nCOPY --from=css-builder /app/static/css/output.css /app/static/css/\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#vs-code-integration","title":"VS Code Integration","text":""},{"location":"tooling-integration/tailwind-css/#tailwind-intellisense","title":"Tailwind IntelliSense","text":"<p>Add to <code>.vscode/settings.json</code>:</p> <pre><code>{\n  \"tailwindCSS.includeLanguages\": {\n    \"django-html\": \"html\"\n  },\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"class\\\\s*[=:]\\\\s*['\\\"]([^'\\\"]*)['\\\"]\", \"['\\\"]([^'\\\"]*)['\\\"]\"],\n    [\"class:[\\\\w-]+\\\\s*=\\\\s*['\\\"]([^'\\\"]*)['\\\"]\", \"['\\\"]([^'\\\"]*)['\\\"]\"],\n    [\"class:[\\\\w-]+=[\\\\w-]+\", \"class:[\\\\w-]+=([\\\\w-]+)\"]\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#custom-css-classes","title":"Custom CSS Classes","text":"<p>IntelliSense for component classes: <pre><code>{\n  \"tailwindCSS.classAttributes\": [\n    \"class\",\n    \"className\",\n    \"class:.*\"\n  ]\n}\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#performance-optimization","title":"Performance Optimization","text":""},{"location":"tooling-integration/tailwind-css/#purge-configuration","title":"Purge Configuration","text":"<p>Ensure unused classes are removed:</p> <pre><code>module.exports = {\n  content: {\n    files: [\n      './templates/**/*.html',\n      './static/js/**/*.js',\n    ],\n    safelist: [\n      // Classes generated dynamically\n      {\n        pattern: /btn-(primary|secondary|danger)/,\n      },\n      {\n        pattern: /(text|bg)-(red|green|blue)-(100|800)/,\n      },\n    ],\n  },\n  // ... rest of config\n}\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#component-library","title":"Component Library","text":"<p>Create a comprehensive Tailwind component library:</p> <p>templates/components/ui/alert.html <pre><code>{# props \n  variant=info,success,warning,error,\n  dismissible=False,\n  title=\"\"\n#}\n&lt;div {% attrs\n  class=\"rounded-md p-4\"\n  class:bg-blue-50=variantInfo\n  class:border-blue-200=variantInfo\n  class:bg-green-50=variantSuccess\n  class:border-green-200=variantSuccess\n  class:bg-yellow-50=variantWarning\n  class:border-yellow-200=variantWarning\n  class:bg-red-50=variantError\n  class:border-red-200=variantError\n%}&gt;\n  &lt;div class=\"flex\"&gt;\n    &lt;div class=\"flex-shrink-0\"&gt;\n      {% if variantInfo %}\n        &lt;svg class=\"h-5 w-5 text-blue-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"&gt;\n          &lt;path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" /&gt;\n        &lt;/svg&gt;\n      {% elif variantSuccess %}\n        &lt;svg class=\"h-5 w-5 text-green-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"&gt;\n          &lt;path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" /&gt;\n        &lt;/svg&gt;\n      {% elif variantWarning %}\n        &lt;svg class=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"&gt;\n          &lt;path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" /&gt;\n        &lt;/svg&gt;\n      {% elif variantError %}\n        &lt;svg class=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\"&gt;\n          &lt;path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" /&gt;\n        &lt;/svg&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=\"ml-3\"&gt;\n      {% if title %}\n        &lt;h3 {% attrs\n          class=\"text-sm font-medium\"\n          class:text-blue-800=variantInfo\n          class:text-green-800=variantSuccess\n          class:text-yellow-800=variantWarning\n          class:text-red-800=variantError\n        %}&gt;\n          {{ title }}\n        &lt;/h3&gt;\n      {% endif %}\n      &lt;div {% attrs\n        class=\"text-sm\"\n        class:text-blue-700=variantInfo\n        class:text-green-700=variantSuccess\n        class:text-yellow-700=variantWarning\n        class:text-red-700=variantError\n        class:mt-2=title\n      %}&gt;\n        {{ contents }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    {% if dismissible %}\n      &lt;div class=\"ml-auto pl-3\"&gt;\n        &lt;div class=\"-mx-1.5 -my-1.5\"&gt;\n          &lt;button class=\"inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2\"&gt;\n            &lt;span class=\"sr-only\"&gt;Dismiss&lt;/span&gt;\n            &lt;svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"&gt;\n              &lt;path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" /&gt;\n            &lt;/svg&gt;\n          &lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    {% endif %}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"tooling-integration/tailwind-css/#best-practices","title":"Best Practices","text":""},{"location":"tooling-integration/tailwind-css/#1-component-first-design","title":"1. Component-First Design","text":"<p>Design components with Tailwind utilities:</p> <pre><code>&lt;!-- \u2705 Good: Utility-first component --&gt;\n&lt;include:card class=\"max-w-md mx-auto\"&gt;\n  &lt;include:button variant=\"primary\" class=\"w-full\"&gt;\n    Full Width Button\n  &lt;/include:button&gt;\n&lt;/include:card&gt;\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#2-consistent-spacing","title":"2. Consistent Spacing","text":"<p>Use Tailwind's spacing scale consistently:</p> <pre><code>{# props #}\n&lt;div class=\"space-y-4\"&gt;  &lt;!-- Consistent 1rem spacing --&gt;\n  &lt;div class=\"p-4\"&gt;{{ contents.header }}&lt;/div&gt;\n  &lt;div class=\"p-4\"&gt;{{ contents }}&lt;/div&gt;\n  &lt;div class=\"p-4\"&gt;{{ contents.footer }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#3-responsive-design","title":"3. Responsive Design","text":"<p>Build mobile-first responsive components:</p> <pre><code>{# props #}\n&lt;div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n  {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#4-accessibility","title":"4. Accessibility","text":"<p>Include accessibility classes:</p> <pre><code>{# props label, required=False #}\n&lt;label class=\"block text-sm font-medium text-gray-700\"&gt;\n  {{ label }}\n  {% if required %}\n    &lt;span class=\"text-red-500 ml-1\" aria-label=\"required\"&gt;*&lt;/span&gt;\n  {% endif %}\n&lt;/label&gt;\n</code></pre>"},{"location":"tooling-integration/tailwind-css/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Component Patterns for advanced Tailwind usage</li> <li>Set up VS Code Integration for Tailwind IntelliSense</li> <li>Check Prettier Integration for consistent formatting</li> </ul>"},{"location":"tooling-integration/vscode-setup/","title":"VS Code Integration","text":"<p>Visual Studio Code provides excellent support for Django IncludeContents through extensions and configuration. This guide covers setting up the optimal development environment.</p>"},{"location":"tooling-integration/vscode-setup/#required-extensions","title":"Required Extensions","text":"<p>Install these essential extensions for the best Django IncludeContents experience:</p>"},{"location":"tooling-integration/vscode-setup/#core-extensions","title":"Core Extensions","text":"<pre><code># Install via command line\ncode --install-extension ms-python.python\ncode --install-extension batisteo.vscode-django\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension bradlc.vscode-tailwindcss\n</code></pre> <p>Or install manually from the VS Code marketplace:</p> <ol> <li>Python - Python language support</li> <li>Django - Django template syntax highlighting</li> <li>Prettier - Code formatting</li> <li>Tailwind CSS IntelliSense - Tailwind CSS support</li> </ol>"},{"location":"tooling-integration/vscode-setup/#optional-but-helpful","title":"Optional But Helpful","text":"<pre><code># Additional extensions\ncode --install-extension ms-python.black-formatter\ncode --install-extension charliermarsh.ruff\ncode --install-extension streetsidesoftware.code-spell-checker\ncode --install-extension formulahendry.auto-rename-tag\ncode --install-extension christian-kohler.path-intellisense\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#vs-code-configuration","title":"VS Code Configuration","text":""},{"location":"tooling-integration/vscode-setup/#workspace-settings","title":"Workspace Settings","text":"<p>Create <code>.vscode/settings.json</code> in your project root:</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n  \"python.terminal.activateEnvironment\": true,\n\n  // Django template settings\n  \"[django-html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true,\n    \"editor.quickSuggestions\": {\n      \"other\": true,\n      \"comments\": false,\n      \"strings\": true\n    }\n  },\n\n  // HTML settings for components\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n\n  // File associations\n  \"files.associations\": {\n    \"**/templates/**/*.html\": \"django-html\",\n    \"**/components/**/*.html\": \"django-html\"\n  },\n\n  // Emmet support\n  \"emmet.includeLanguages\": {\n    \"django-html\": \"html\"\n  },\n\n  // Prettier configuration\n  \"prettier.requireConfig\": true,\n  \"prettier.documentSelectors\": [\"**/*.html\"],\n\n  // Tailwind CSS\n  \"tailwindCSS.includeLanguages\": {\n    \"django-html\": \"html\"\n  },\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"class\\\\s*[=:]\\\\s*['\\\"]([^'\\\"]*)['\\\"]\", \"['\\\"]([^'\\\"]*)['\\\"]\"],\n    [\"class:[\\\\w-]+\\\\s*=\\\\s*['\\\"]([^'\\\"]*)['\\\"]\", \"['\\\"]([^'\\\"]*)['\\\"]\"]\n  ],\n\n  // Editor behavior\n  \"editor.tabSize\": 2,\n  \"editor.insertSpaces\": true,\n  \"editor.rulers\": [80, 100],\n  \"editor.wordWrap\": \"bounded\",\n  \"editor.wordWrapColumn\": 100\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#user-settings","title":"User Settings","text":"<p>Add to your global VS Code settings:</p> <pre><code>{\n  // File explorer\n  \"explorer.fileNesting.enabled\": true,\n  \"explorer.fileNesting.patterns\": {\n    \"*.html\": \"${capture}.css, ${capture}.js\"\n  },\n\n  // Search\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/venv\": true,\n    \"**/.git\": true,\n    \"**/static\": true,\n    \"**/media\": true\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#code-snippets","title":"Code Snippets","text":""},{"location":"tooling-integration/vscode-setup/#django-includecontents-snippets","title":"Django IncludeContents Snippets","text":"<p>Create <code>.vscode/django-includecontents.code-snippets</code>:</p> <pre><code>{\n  \"Include Component\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"inc\", \"include\"],\n    \"body\": [\n      \"&lt;include:${1:component-name}${2: ${3:prop}=\\\"${4:value}\\\"}&gt;\",\n      \"\\t$0\",\n      \"&lt;/include:${1:component-name}&gt;\"\n    ],\n    \"description\": \"Include component with props\"\n  },\n\n  \"Self-closing Component\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"incs\", \"include-self\"],\n    \"body\": [\n      \"&lt;include:${1:component-name}${2: ${3:prop}=\\\"${4:value}\\\"} /&gt;\"\n    ],\n    \"description\": \"Self-closing component\"\n  },\n\n  \"Content Block\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"content\", \"cb\"],\n    \"body\": [\n      \"&lt;content:${1:block-name}&gt;\",\n      \"\\t$0\",\n      \"&lt;/content:${1:block-name}&gt;\"\n    ],\n    \"description\": \"Named content block\"\n  },\n\n  \"Component Props Definition\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"props\"],\n    \"body\": [\n      \"{# props ${1:prop1}, ${2:prop2}=${3:default} #}\"\n    ],\n    \"description\": \"Component props definition\"\n  },\n\n  \"Attrs Tag\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"attrs\"],\n    \"body\": [\n      \"{% attrs ${1:class}=\\\"${2:default-class}\\\" %}\"\n    ],\n    \"description\": \"Attrs template tag\"\n  },\n\n  \"Conditional Class\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"class-if\"],\n    \"body\": [\n      \"class:${1:class-name}=${2:condition}\"\n    ],\n    \"description\": \"Conditional class attribute\"\n  },\n\n  \"IncludeContents Tag\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"ict\", \"includecontents\"],\n    \"body\": [\n      \"{% includecontents \\\"${1:template-path}\\\"${2: ${3:prop}=${4:value}} %}\",\n      \"\\t$0\",\n      \"{% endincludecontents %}\"\n    ],\n    \"description\": \"Traditional includecontents tag\"\n  },\n\n  \"Wrapif Tag\": {\n    \"scope\": \"django-html,html\", \n    \"prefix\": [\"wrapif\"],\n    \"body\": [\n      \"{% wrapif ${1:condition} then \\\"${2:tag}\\\"${3: ${4:attr}=\\\"${5:value}\\\"} %}\",\n      \"\\t$0\",\n      \"{% endwrapif %}\"\n    ],\n    \"description\": \"Wrapif conditional wrapper\"\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#html-snippets","title":"HTML Snippets","text":"<p>Create <code>.vscode/html-components.code-snippets</code>:</p> <pre><code>{\n  \"Button Component\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"btn\", \"button\"],\n    \"body\": [\n      \"&lt;include:button variant=\\\"${1|primary,secondary,danger}\\\" ${2:size=\\\"${3|small,medium,large}\\\"}&gt;\",\n      \"\\t${4:Button Text}\",\n      \"&lt;/include:button&gt;\"\n    ],\n    \"description\": \"Button component\"\n  },\n\n  \"Card Component\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"card\"],\n    \"body\": [\n      \"&lt;include:card title=\\\"${1:Card Title}\\\"&gt;\",\n      \"\\t${2:Card content}\",\n      \"\\t&lt;content:footer&gt;\",\n      \"\\t\\t${3:Footer content}\",\n      \"\\t&lt;/content:footer&gt;\",\n      \"&lt;/include:card&gt;\"\n    ],\n    \"description\": \"Card component with footer\"\n  },\n\n  \"Form Field\": {\n    \"scope\": \"django-html,html\",\n    \"prefix\": [\"field\", \"form-field\"],\n    \"body\": [\n      \"&lt;include:forms:field\",\n      \"\\tname=\\\"${1:field-name}\\\"\",\n      \"\\tlabel=\\\"${2:Field Label}\\\"\",\n      \"\\ttype=\\\"${3|text,email,password,number}\\\"\",\n      \"\\t${4:required=\\\"true\\\"}\",\n      \"/&gt;\"\n    ],\n    \"description\": \"Form field component\"\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#intellisense-configuration","title":"IntelliSense Configuration","text":""},{"location":"tooling-integration/vscode-setup/#custom-intellisense","title":"Custom IntelliSense","text":"<p>Create <code>.vscode/html.json</code> for component autocomplete:</p> <pre><code>{\n  \"html\": {\n    \"customData\": [\n      {\n        \"version\": \"1.0\",\n        \"tags\": [\n          {\n            \"name\": \"include:button\",\n            \"description\": \"Button component\",\n            \"attributes\": [\n              {\n                \"name\": \"variant\",\n                \"description\": \"Button variant\",\n                \"values\": [\n                  { \"name\": \"primary\" },\n                  { \"name\": \"secondary\" },\n                  { \"name\": \"danger\" }\n                ]\n              },\n              {\n                \"name\": \"size\", \n                \"description\": \"Button size\",\n                \"values\": [\n                  { \"name\": \"small\" },\n                  { \"name\": \"medium\" },\n                  { \"name\": \"large\" }\n                ]\n              },\n              {\n                \"name\": \"disabled\",\n                \"description\": \"Disabled state\",\n                \"valueSet\": \"v\"\n              }\n            ]\n          },\n          {\n            \"name\": \"include:card\",\n            \"description\": \"Card component\",\n            \"attributes\": [\n              {\n                \"name\": \"title\",\n                \"description\": \"Card title\"\n              },\n              {\n                \"name\": \"subtitle\",\n                \"description\": \"Card subtitle\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#django-template-intellisense","title":"Django Template IntelliSense","text":"<p>For better Django template support, add to settings:</p> <pre><code>{\n  \"django.snippets.exclude\": [],\n  \"django.snippets.use\": true,\n  \"emmet.variables\": {\n    \"lang\": \"en\",\n    \"charset\": \"UTF-8\"\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#tasks-and-debugging","title":"Tasks and Debugging","text":""},{"location":"tooling-integration/vscode-setup/#tasks-configuration","title":"Tasks Configuration","text":"<p>Create <code>.vscode/tasks.json</code>:</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Django: Run Server\",\n      \"type\": \"shell\",\n      \"command\": \"${workspaceFolder}/venv/bin/python\",\n      \"args\": [\"manage.py\", \"runserver\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"new\"\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"Format Templates\",\n      \"type\": \"shell\",\n      \"command\": \"npm\",\n      \"args\": [\"run\", \"format\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"silent\"\n      }\n    },\n    {\n      \"label\": \"Build Docs\",\n      \"type\": \"shell\",\n      \"command\": \"mkdocs\",\n      \"args\": [\"build\"],\n      \"group\": \"build\"\n    },\n    {\n      \"label\": \"Serve Docs\",\n      \"type\": \"shell\", \n      \"command\": \"mkdocs\",\n      \"args\": [\"serve\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#launch-configuration","title":"Launch Configuration","text":"<p>Create <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Django: Debug Server\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/manage.py\",\n      \"args\": [\"runserver\", \"--noreload\"],\n      \"django\": true,\n      \"justMyCode\": false,\n      \"env\": {\n        \"DJANGO_DEBUG\": \"True\"\n      }\n    },\n    {\n      \"name\": \"Django: Test\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/manage.py\",\n      \"args\": [\"test\"],\n      \"django\": true,\n      \"justMyCode\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#key-bindings","title":"Key Bindings","text":""},{"location":"tooling-integration/vscode-setup/#custom-keybindings","title":"Custom Keybindings","text":"<p>Add to your <code>keybindings.json</code>:</p> <pre><code>[\n  {\n    \"key\": \"ctrl+shift+f\",\n    \"command\": \"editor.action.formatDocument\",\n    \"when\": \"editorHasDocumentFormattingProvider &amp;&amp; !editorReadonly &amp;&amp; resourceExtname == .html\"\n  },\n  {\n    \"key\": \"ctrl+k ctrl+c\",\n    \"command\": \"editor.action.insertSnippet\",\n    \"when\": \"editorTextFocus &amp;&amp; resourceExtname == .html\",\n    \"args\": {\n      \"snippet\": \"&lt;include:${1:component}&gt;$0&lt;/include:${1:component}&gt;\"\n    }\n  }\n]\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#workspace-recommendations","title":"Workspace Recommendations","text":""},{"location":"tooling-integration/vscode-setup/#extensions-recommendations","title":"Extensions Recommendations","text":"<p>Create <code>.vscode/extensions.json</code>:</p> <pre><code>{\n  \"recommendations\": [\n    \"ms-python.python\",\n    \"batisteo.vscode-django\", \n    \"esbenp.prettier-vscode\",\n    \"bradlc.vscode-tailwindcss\",\n    \"ms-python.black-formatter\",\n    \"charliermarsh.ruff\"\n  ],\n  \"unwantedRecommendations\": [\n    \"ms-python.pylint\"\n  ]\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#workspace-file","title":"Workspace File","text":"<p>Create a <code>.code-workspace</code> file:</p> <pre><code>{\n  \"folders\": [\n    {\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n    \"files.associations\": {\n      \"**/templates/**/*.html\": \"django-html\"\n    }\n  },\n  \"extensions\": {\n    \"recommendations\": [\n      \"ms-python.python\",\n      \"batisteo.vscode-django\",\n      \"esbenp.prettier-vscode\"\n    ]\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#productivity-tips","title":"Productivity Tips","text":""},{"location":"tooling-integration/vscode-setup/#1-template-navigation","title":"1. Template Navigation","text":"<p>Quick navigation between templates:</p> <ul> <li>Ctrl+P: Quick file open</li> <li>Ctrl+Shift+F: Search across templates</li> <li>F12: Go to definition (for included templates)</li> </ul>"},{"location":"tooling-integration/vscode-setup/#2-component-development","title":"2. Component Development","text":"<p>Efficient component development workflow:</p> <ol> <li>Create component file in <code>templates/components/</code></li> <li>Use snippets for quick component structure</li> <li>Format on save with Prettier</li> <li>Test component in browser with hot reload</li> </ol>"},{"location":"tooling-integration/vscode-setup/#3-multi-cursor-editing","title":"3. Multi-Cursor Editing","text":"<p>Use multi-cursor for repetitive edits:</p> <ul> <li>Ctrl+D: Select next occurrence</li> <li>Ctrl+Shift+L: Select all occurrences</li> <li>Alt+Click: Add cursor at position</li> </ul>"},{"location":"tooling-integration/vscode-setup/#4-folding","title":"4. Folding","text":"<p>Fold component blocks for better overview:</p> <pre><code>&lt;!-- Foldable region --&gt;\n&lt;include:complex-component&gt;\n  &lt;!-- This content can be folded --&gt;\n  &lt;content:header&gt;...&lt;/content:header&gt;\n  &lt;content:body&gt;...&lt;/content:body&gt;\n  &lt;content:footer&gt;...&lt;/content:footer&gt;\n&lt;/include:complex-component&gt;\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tooling-integration/vscode-setup/#common-issues","title":"Common Issues","text":"<p>Issue: Django templates not highlighting correctly</p> <p>Solution: Check file associations in settings:</p> <pre><code>{\n  \"files.associations\": {\n    \"**/templates/**/*.html\": \"django-html\"\n  }\n}\n</code></pre> <p>Issue: Prettier not formatting templates</p> <p>Solution: Ensure parser is set correctly:</p> <pre><code>{\n  \"[django-html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  }\n}\n</code></pre> <p>Issue: Emmet not working in Django templates</p> <p>Solution: Add emmet language support:</p> <pre><code>{\n  \"emmet.includeLanguages\": {\n    \"django-html\": \"html\"\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#performance-optimization","title":"Performance Optimization","text":"<p>For large Django projects:</p> <pre><code>{\n  \"files.watcherExclude\": {\n    \"**/node_modules/**\": true,\n    \"**/venv/**\": true,\n    \"**/.git/**\": true,\n    \"**/static/**\": true,\n    \"**/media/**\": true\n  },\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/venv\": true,\n    \"**/static\": true,\n    \"**/media\": true\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#team-setup","title":"Team Setup","text":""},{"location":"tooling-integration/vscode-setup/#shared-configuration","title":"Shared Configuration","text":"<p>Commit these files to share configuration:</p> <pre><code>.vscode/\n\u251c\u2500\u2500 settings.json          # Workspace settings\n\u251c\u2500\u2500 tasks.json            # Build tasks\n\u251c\u2500\u2500 launch.json           # Debug configuration\n\u251c\u2500\u2500 extensions.json       # Extension recommendations\n\u2514\u2500\u2500 *.code-snippets       # Custom snippets\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#project-readme","title":"Project README","text":"<p>Document VS Code setup in your project:</p> <pre><code>## VS Code Setup\n\nThis project includes VS Code configuration for optimal development experience.\n\n### Quick Setup\n1. Install recommended extensions when prompted\n2. Python interpreter should auto-detect virtual environment\n3. Templates will auto-format on save\n\n### Manual Setup\n1. Install extensions: `Ctrl+Shift+P` \u2192 \"Extensions: Show Recommended Extensions\"\n2. Select Python interpreter: `Ctrl+Shift+P` \u2192 \"Python: Select Interpreter\"\n3. Verify formatting: Open any .html file and save\n\n### Available Tasks\n- `Ctrl+Shift+P` \u2192 \"Tasks: Run Task\"\n  - Django: Run Server\n  - Format Templates\n  - Build Docs\n  - Serve Docs\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"tooling-integration/vscode-setup/#custom-theme-for-components","title":"Custom Theme for Components","text":"<p>Create a custom VS Code theme for better component visibility:</p> <pre><code>{\n  \"editor.tokenColorCustomizations\": {\n    \"textMateRules\": [\n      {\n        \"scope\": \"entity.name.tag.include\",\n        \"settings\": {\n          \"foreground\": \"#61AFEF\",\n          \"fontStyle\": \"bold\"\n        }\n      },\n      {\n        \"scope\": \"entity.name.tag.content\",\n        \"settings\": {\n          \"foreground\": \"#98C379\",\n          \"fontStyle\": \"italic\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#integrated-terminal-setup","title":"Integrated Terminal Setup","text":"<p>Configure terminal for Django development:</p> <pre><code>{\n  \"terminal.integrated.profiles.linux\": {\n    \"Django\": {\n      \"path\": \"/bin/bash\",\n      \"args\": [\"-c\", \"source venv/bin/activate &amp;&amp; exec bash\"]\n    }\n  },\n  \"terminal.integrated.defaultProfile.linux\": \"Django\"\n}\n</code></pre>"},{"location":"tooling-integration/vscode-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Set up Prettier Integration for consistent formatting</li> <li>Configure Tailwind CSS for utility-first styling</li> <li>Explore Component Patterns for development best practices</li> </ul>"},{"location":"using-components/html-syntax/","title":"HTML Component Syntax","text":"<p>The HTML component syntax provides a modern, HTML-like way to use components in your templates.</p> <p>Template Engine Support</p> <p>HTML component syntax works with both template engines:</p> <ul> <li>Django: Requires the custom template engine</li> <li>Jinja2: Automatic preprocessing via extension (see Jinja2 Setup)</li> </ul>"},{"location":"using-components/html-syntax/#basic-syntax","title":"Basic Syntax","text":"<pre><code>&lt;include:component-name attribute=\"value\"&gt;\n    Content goes here\n&lt;/include:component-name&gt;\n</code></pre> <p>Components use HTML-like tags that feel natural and familiar. The component name maps directly to a template file in your <code>components/</code> directory.</p>"},{"location":"using-components/html-syntax/#component-discovery","title":"Component Discovery","text":"<p>Components are automatically discovered from your <code>templates/components/</code> directory:</p> Component File HTML Syntax <code>components/card.html</code> <code>&lt;include:card&gt;</code> <code>components/user-profile.html</code> <code>&lt;include:user-profile&gt;</code> <code>components/forms/field.html</code> <code>&lt;include:forms:field&gt;</code> <code>components/ui/buttons/primary.html</code> <code>&lt;include:ui:buttons:primary&gt;</code>"},{"location":"using-components/html-syntax/#directory-structure-example","title":"Directory Structure Example","text":"<pre><code>templates/\n\u2514\u2500\u2500 components/\n    \u251c\u2500\u2500 card.html\n    \u251c\u2500\u2500 user-profile.html\n    \u251c\u2500\u2500 forms/\n    \u2502   \u251c\u2500\u2500 field.html\n    \u2502   \u2514\u2500\u2500 select.html\n    \u2514\u2500\u2500 ui/\n        \u251c\u2500\u2500 button.html\n        \u2514\u2500\u2500 icons/\n            \u2514\u2500\u2500 chevron.html\n</code></pre> <p>Usage: <pre><code>&lt;include:card title=\"Welcome\"&gt;\n    &lt;p&gt;Main content&lt;/p&gt;\n&lt;/include:card&gt;\n\n&lt;include:user-profile user=\"{{ user }}\"&gt;\n    &lt;p&gt;Additional info&lt;/p&gt;\n&lt;/include:user-profile&gt;\n\n&lt;include:forms:field label=\"Email\" type=\"email\" /&gt;\n\n&lt;include:ui:button variant=\"primary\"&gt;Submit&lt;/include:ui:button&gt;\n\n&lt;include:ui:icons:chevron direction=\"right\" /&gt;\n</code></pre></p>"},{"location":"using-components/html-syntax/#self-closing-components","title":"Self-Closing Components","text":"<p>Components without content can use self-closing syntax:</p> <pre><code>&lt;include:icon name=\"star\" size=\"24\" /&gt;\n&lt;include:divider /&gt;\n&lt;include:loading-spinner color=\"blue\" /&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#attribute-handling","title":"Attribute Handling","text":""},{"location":"using-components/html-syntax/#string-attributes","title":"String Attributes","text":"<pre><code>&lt;include:button type=\"submit\" class=\"btn-primary\"&gt;Save&lt;/include:button&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#variable-attributes","title":"Variable Attributes","text":"<pre><code>&lt;include:button type=\"{{ form_type }}\" class=\"{{ css_class }}\"&gt;\n    {{ button_text }}\n&lt;/include:button&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#template-expressions","title":"Template Expressions","text":"<p>All Django template syntax is supported in attributes:</p> <pre><code>&lt;include:user-card \n    name=\"{{ user.get_full_name }}\"\n    avatar=\"{% if user.avatar %}{{ user.avatar.url }}{% endif %}\"\n    is-online=\"{{ user.is_active|yesno:'true,false' }}\"\n    href=\"{% url 'user_profile' user.pk %}\"\n/&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#javascript-framework-attributes","title":"JavaScript Framework Attributes","text":"<p>Components fully support modern JavaScript framework attributes for both Django and Jinja2:</p>"},{"location":"using-components/html-syntax/#vuejs-integration","title":"Vue.js Integration","text":"<pre><code>&lt;!-- Vue.js event handlers --&gt;\n&lt;include:button @click=\"handleClick()\" @keyup.enter=\"submitForm()\"&gt;\n    Submit\n&lt;/include:button&gt;\n\n&lt;!-- Vue.js directives --&gt;\n&lt;include:form\n    v-on:submit=\"onSubmit\"\n    v-model=\"formData\"\n    v-bind:class=\"{ 'loading': isLoading }\"\n&gt;\n    Form content\n&lt;/include:form&gt;\n\n&lt;!-- Vue.js bind shorthand --&gt;\n&lt;include:card :class=\"dynamicClasses\" :disabled=\"isDisabled\"&gt;\n    Dynamic card\n&lt;/include:card&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#alpinejs-integration","title":"Alpine.js Integration","text":"<pre><code>&lt;!-- Alpine.js event handlers and directives --&gt;\n&lt;include:modal\n    x-on:click=\"open = false\"\n    x-show=\"open\"\n    x-data=\"{ open: false }\"\n    x-transition\n&gt;\n    Modal content\n&lt;/include:modal&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#nested-attributes","title":"Nested Attributes","text":"<p>Pass attributes to nested elements within components:</p> <pre><code>&lt;!-- Attributes for nested elements --&gt;\n&lt;include:form-with-button\n    inner.class=\"form-control\"\n    button.type=\"submit\"\n    button.@click=\"handleSubmit()\"\n    button.disabled=\"isSubmitting\"\n&gt;\n    Form content\n&lt;/include:form-with-button&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#advanced-class-manipulation","title":"Advanced Class Manipulation","text":"<pre><code>&lt;!-- Conditional classes --&gt;\n&lt;include:card class:not=\"disabled ? 'active'\" variant=\"primary\"&gt;\n    Conditional styling\n&lt;/include:card&gt;\n\n&lt;!-- Class append/prepend --&gt;\n&lt;include:button class=\"&amp; btn-primary\" size=\"large\"&gt;\n    Extended base classes\n&lt;/include:button&gt;\n\n&lt;include:alert class=\"custom-alert &amp;\" type=\"warning\"&gt;\n    Custom classes with base\n&lt;/include:alert&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#shorthand-attribute-syntax","title":"Shorthand Attribute Syntax","text":"<p>When the attribute name matches a variable name, use shorthand:</p> <pre><code>&lt;!-- Instead of: --&gt;\n&lt;include:card title=\"{{ title }}\" author=\"{{ author }}\"&gt;\n\n&lt;!-- Use shorthand: --&gt;\n&lt;include:card {title} {author}&gt;\n</code></pre> <p>This is equivalent to: <pre><code>&lt;include:card title=\"{{ title }}\" author=\"{{ author }}\"&gt;\n</code></pre></p>"},{"location":"using-components/html-syntax/#named-content-blocks","title":"Named Content Blocks","text":"<p>Use HTML-style content tags for named content blocks:</p> <pre><code>&lt;include:article&gt;\n    &lt;content:header&gt;\n        &lt;h1&gt;{{ article.title }}&lt;/h1&gt;\n        &lt;p&gt;By {{ article.author }}&lt;/p&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;This is the main article content...&lt;/p&gt;\n\n    &lt;content:sidebar&gt;\n        &lt;h3&gt;Related Articles&lt;/h3&gt;\n        &lt;ul&gt;\n            {% for related in article.related_articles %}\n                &lt;li&gt;&lt;a href=\"{{ related.url }}\"&gt;{{ related.title }}&lt;/a&gt;&lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    &lt;/content:sidebar&gt;\n\n    &lt;content:footer&gt;\n        &lt;div class=\"social-sharing\"&gt;...&lt;/div&gt;\n    &lt;/content:footer&gt;\n&lt;/include:article&gt;\n</code></pre> <p>Component template (templates/components/article.html): <pre><code>&lt;article class=\"article\"&gt;\n    {% if contents.header %}\n        &lt;header class=\"article-header\"&gt;\n            {{ contents.header }}\n        &lt;/header&gt;\n    {% endif %}\n\n    &lt;div class=\"article-body\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n\n    {% if contents.sidebar %}\n        &lt;aside class=\"article-sidebar\"&gt;\n            {{ contents.sidebar }}\n        &lt;/aside&gt;\n    {% endif %}\n\n    {% if contents.footer %}\n        &lt;footer class=\"article-footer\"&gt;\n            {{ contents.footer }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/article&gt;\n</code></pre></p>"},{"location":"using-components/html-syntax/#mixing-syntaxes","title":"Mixing Syntaxes","text":"<p>You can mix HTML content syntax with traditional <code>{% contents %}</code> blocks:</p> <pre><code>&lt;include:card&gt;\n    &lt;content:header&gt;\n        &lt;h2&gt;Mixed Syntax Example&lt;/h2&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;Main content here&lt;/p&gt;\n\n    {% contents footer %}\n        &lt;button&gt;Traditional syntax footer&lt;/button&gt;\n    {% endcontents %}\n&lt;/include:card&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#template-syntax-in-attributes","title":"Template Syntax in Attributes","text":"<p>Component attributes now support the full Django template language, including variables, filters, and template tags:</p> <pre><code>&lt;include:ui-button \n    variant=\"primary\"\n    href=\"{% url 'user_settings' %}\"\n    class=\"btn {% if user.is_premium %}btn-premium{% endif %}\"\n    data-user-id=\"{{ user.pk }}\"\n&gt;\n    {% if user.is_premium %}\n        Premium Settings\n    {% else %}\n        Basic Settings\n    {% endif %}\n&lt;/include:ui-button&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#template-variables-and-filters","title":"Template Variables and Filters","text":"<p>Use Django template variables and filters in any attribute:</p> <pre><code>&lt;include:card \n    title=\"{{ product.name }}\"\n    price=\"{{ product.price|floatformat:2 }}\"\n    url=\"{{ product.get_absolute_url }}\"\n    active=\"{{ user.is_premium|yesno:'true,false' }}\"\n    count=\"{{ items|length|add:1 }}\"\n/&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#mixed-content","title":"Mixed Content","text":"<p>Combine static text with template variables for dynamic attributes:</p> <pre><code>&lt;include:button \n    class=\"btn btn-{{ variant }} {{ 'active' if is_active }}\"\n    href=\"/products/{{ product.id }}/details/\"\n    data-info=\"Count: {{ total }} of {{ maximum }}\"\n    title=\"{{ product.name }} - ${{ product.price }}\"\n/&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#template-tags","title":"Template Tags","text":"<p>Use any Django template tag including <code>{% if %}</code>, <code>{% for %}</code>, and <code>{% url %}</code>:</p> <pre><code>&lt;!-- Conditional classes --&gt;\n&lt;include:card \n    class=\"card {% if featured %}featured{% endif %} {% if new %}new{% endif %}\"\n&gt;\n\n&lt;!-- Dynamic lists --&gt;\n&lt;include:select\n    data-options=\"{% for opt in options %}{{ opt.value }}:{{ opt.label }}{% if not forloop.last %},{% endif %}{% endfor %}\"\n&gt;\n\n&lt;!-- URL generation --&gt;\n&lt;include:link \n    href=\"{% url 'product_detail' pk=product.pk %}\"\n    class=\"link {% if product.on_sale %}sale{% endif %}\"\n&gt;\n    View Product\n&lt;/include:link&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#object-passing","title":"Object Passing","text":"<p>When using pure variable syntax (just a variable with no other content), objects are passed directly without string conversion:</p> <pre><code>&lt;!-- Object is passed directly, not converted to string --&gt;\n&lt;include:user-detail user=\"{{ current_user }}\" /&gt;\n&lt;include:product-list products=\"{{ queryset }}\" /&gt;\n&lt;include:data-table data=\"{{ complex_object }}\" /&gt;\n</code></pre> <p>This allows components to access object properties and methods:</p> <pre><code>{# props user #}\n&lt;div class=\"user-detail\"&gt;\n    &lt;h3&gt;{{ user.get_full_name }}&lt;/h3&gt;\n    &lt;p&gt;Email: {{ user.email }}&lt;/p&gt;\n    &lt;p&gt;Joined: {{ user.date_joined|date:\"F j, Y\" }}&lt;/p&gt;\n    {% if user.is_staff %}\n        &lt;span class=\"badge\"&gt;Staff&lt;/span&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre> <p>String Conversion</p> <p>Objects are only preserved with pure variable syntax. Mixed content is always rendered as a string:</p> <pre><code>&lt;!-- Object passed directly --&gt;\n&lt;include:card data=\"{{ my_object }}\" /&gt;\n\n&lt;!-- String representation --&gt;\n&lt;include:card title=\"Object: {{ my_object }}\" /&gt;\n&lt;include:card info=\"{{ my_object.name }} ({{ my_object.id }})\" /&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#complex-example","title":"Complex Example","text":"<p>Here's a real-world example combining multiple template features:</p> <pre><code>&lt;include:product-card \n    title=\"{{ product.name }}\"\n    price=\"{{ product.price|floatformat:2 }}\"\n    href=\"{% url 'product_detail' product.slug %}\"\n    class=\"product-card {% if product.on_sale %}on-sale{% endif %}\"\n    data-category=\"{{ product.category.slug }}\"\n    stock-status=\"{{ product.stock|yesno:'in-stock,out-of-stock' }}\"\n&gt;\n    {% if product.is_featured %}\n        &lt;content:badge&gt;Featured&lt;/content:badge&gt;\n    {% endif %}\n\n    {{ product.description|truncatewords:20 }}\n\n    &lt;content:footer&gt;\n        &lt;p class=\"reviews\"&gt;{{ product.review_count }} review{{ product.review_count|pluralize }}&lt;/p&gt;\n    &lt;/content:footer&gt;\n&lt;/include:product-card&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#component-naming-conventions","title":"Component Naming Conventions","text":""},{"location":"using-components/html-syntax/#valid-component-names","title":"Valid Component Names","text":"<p>Components must follow HTML custom element naming rules:</p> <ul> <li>\u2705 <code>card</code>, <code>user-profile</code>, <code>my-component</code></li> <li>\u2705 <code>forms:field</code>, <code>ui:button</code></li> <li>\u274c <code>Card</code> (uppercase not allowed)</li> <li>\u274c <code>123-component</code> (can't start with number)</li> <li>\u274c <code>div</code> (conflicts with HTML elements)</li> </ul>"},{"location":"using-components/html-syntax/#recommended-patterns","title":"Recommended Patterns","text":"<pre><code>&lt;!-- \u2705 Good: Descriptive and specific --&gt;\n&lt;include:user-avatar size=\"large\" /&gt;\n&lt;include:product-price value=\"{{ product.price }}\" /&gt;\n&lt;include:forms:text-field label=\"Username\" /&gt;\n\n&lt;!-- \u274c Avoid: Too generic --&gt;\n&lt;include:component /&gt;\n&lt;include:item /&gt;\n&lt;include:thing /&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#error-handling","title":"Error Handling","text":""},{"location":"using-components/html-syntax/#component-not-found","title":"Component Not Found","text":"<pre><code>&lt;include:nonexistent-component&gt;\n    Content\n&lt;/include:nonexistent-component&gt;\n</code></pre> <p>Raises <code>TemplateDoesNotExist: components/nonexistent-component.html</code></p>"},{"location":"using-components/html-syntax/#invalid-syntax","title":"Invalid Syntax","text":"<pre><code>&lt;include:my-component attribute=&gt;  &lt;!-- Missing value --&gt;\n    Content\n&lt;/include:my-component&gt;\n</code></pre> <p>Raises <code>TemplateSyntaxError</code> with details about the syntax error.</p>"},{"location":"using-components/html-syntax/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Template Resolution: Component templates are cached by Django's template system</li> <li>Attribute Parsing: Attributes are parsed once per template compilation</li> <li>Content Rendering: Similar performance to equivalent <code>{% includecontents %}</code> tags</li> </ul>"},{"location":"using-components/html-syntax/#comparison-with-template-tags","title":"Comparison with Template Tags","text":"Feature Template Tag Syntax HTML Syntax Readability Django-specific HTML-like, familiar IDE Support Limited Better (HTML tooling) Formatting Manual Prettier/formatter support Nesting Verbose Clean and intuitive Learning Curve Django knowledge needed HTML knowledge sufficient"},{"location":"using-components/html-syntax/#template-tag-syntax","title":"Template Tag Syntax","text":"<pre><code>{% load includecontents %}\n{% includecontents \"components/card.html\" title=\"Hello\" %}\n    {% includecontents \"components/button.html\" variant=\"primary\" %}\n        Click me\n    {% endincludecontents %}\n{% endincludecontents %}\n</code></pre>"},{"location":"using-components/html-syntax/#html-syntax","title":"HTML Syntax","text":"<pre><code>&lt;include:card title=\"Hello\"&gt;\n    &lt;include:button variant=\"primary\"&gt;\n        Click me\n    &lt;/include:button&gt;\n&lt;/include:card&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#ide-and-tooling-support","title":"IDE and Tooling Support","text":""},{"location":"using-components/html-syntax/#vs-code","title":"VS Code","text":"<p>The HTML syntax works well with VS Code's HTML language features:</p> <ul> <li>Syntax highlighting: Components appear as HTML elements</li> <li>Auto-completion: Attribute completion works</li> <li>Folding: Component blocks can be collapsed</li> <li>Formatting: Works with Prettier and other HTML formatters</li> </ul>"},{"location":"using-components/html-syntax/#prettier-integration","title":"Prettier Integration","text":"<p>HTML components format beautifully with Prettier:</p> <pre><code>&lt;!-- Before formatting --&gt;\n&lt;include:card title=\"Hello\" class=\"my-card\"&gt;&lt;p&gt;Content&lt;/p&gt;&lt;content:footer&gt;Footer&lt;/content:footer&gt;&lt;/include:card&gt;\n\n&lt;!-- After prettier --&gt;\n&lt;include:card title=\"Hello\" class=\"my-card\"&gt;\n  &lt;p&gt;Content&lt;/p&gt;\n  &lt;content:footer&gt;Footer&lt;/content:footer&gt;\n&lt;/include:card&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#migration-from-template-tags","title":"Migration from Template Tags","text":"<p>Converting existing <code>{% includecontents %}</code> usage to HTML syntax:</p> Before (Template Tags)After (HTML Syntax) <pre><code>{% load includecontents %}\n{% includecontents \"components/user-card.html\" user=user show_email=True %}\n    &lt;p&gt;Welcome back!&lt;/p&gt;\n    {% contents actions %}\n        &lt;a href=\"{% url 'profile' %}\"&gt;Edit Profile&lt;/a&gt;\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre> <pre><code>&lt;include:user-card user=\"{{ user }}\" show-email=\"true\"&gt;\n    &lt;p&gt;Welcome back!&lt;/p&gt;\n    &lt;content:actions&gt;\n        &lt;a href=\"{% url 'profile' %}\"&gt;Edit Profile&lt;/a&gt;\n    &lt;/content:actions&gt;\n&lt;/include:user-card&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#best-practices","title":"Best Practices","text":""},{"location":"using-components/html-syntax/#1-use-semantic-component-names","title":"1. Use Semantic Component Names","text":"<pre><code>&lt;!-- \u2705 Good: Clear purpose --&gt;\n&lt;include:article-summary article=\"{{ article }}\" /&gt;\n&lt;include:user-avatar user=\"{{ user }}\" size=\"small\" /&gt;\n\n&lt;!-- \u274c Avoid: Generic names --&gt;\n&lt;include:widget data=\"{{ data }}\" /&gt;\n&lt;include:component type=\"user\" /&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#2-keep-components-focused","title":"2. Keep Components Focused","text":"<pre><code>&lt;!-- \u2705 Good: Single responsibility --&gt;\n&lt;include:product-image product=\"{{ product }}\" /&gt;\n&lt;include:product-price product=\"{{ product }}\" /&gt;\n&lt;include:product-rating product=\"{{ product }}\" /&gt;\n\n&lt;!-- \u274c Avoid: Too many responsibilities --&gt;\n&lt;include:product-everything product=\"{{ product }}\" /&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#3-use-consistent-naming","title":"3. Use Consistent Naming","text":"<pre><code>&lt;!-- \u2705 Good: Consistent pattern --&gt;\n&lt;include:forms:text-field /&gt;\n&lt;include:forms:email-field /&gt;\n&lt;include:forms:password-field /&gt;\n\n&lt;!-- \u274c Inconsistent --&gt;\n&lt;include:forms:text-field /&gt;\n&lt;include:email-input /&gt;\n&lt;include:password-form /&gt;\n</code></pre>"},{"location":"using-components/html-syntax/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Props &amp; Attrs for component attribute handling</li> <li>Explore Advanced Props for validation and enum props</li> <li>Check out CSS Classes for advanced styling features</li> </ul>"},{"location":"using-components/named-content-blocks/","title":"Named Contents Blocks","text":"<p>Named contents blocks allow you to pass multiple content sections to a single component, enabling more complex and flexible component designs.</p>"},{"location":"using-components/named-content-blocks/#basic-syntax","title":"Basic Syntax","text":"<pre><code>{% load includecontents %}\n{% includecontents \"template.html\" %}\n    Default content goes here\n    {% contents section_name %}Named content goes here{% endcontents %}\n{% endincludecontents %}\n</code></pre> <p>In the included template, access the content using: - <code>{{ contents }}</code> for the default content - <code>{{ contents.section_name }}</code> for named sections</p>"},{"location":"using-components/named-content-blocks/#simple-example","title":"Simple Example","text":"<p>templates/components/card.html <pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-body\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n    {% if contents.footer %}\n        &lt;div class=\"card-footer\"&gt;\n            {{ contents.footer }}\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p> <p>Usage: <pre><code>{% load includecontents %}\n{% includecontents \"components/card.html\" %}\n    &lt;p&gt;This is the main card content.&lt;/p&gt;\n    {% contents footer %}\n        &lt;button class=\"btn\"&gt;Action&lt;/button&gt;\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre></p> <p>Result: <pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-body\"&gt;\n        &lt;p&gt;This is the main card content.&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"card-footer\"&gt;\n        &lt;button class=\"btn\"&gt;Action&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/named-content-blocks/#multiple-named-sections","title":"Multiple Named Sections","text":"<p>You can define multiple named content sections:</p> <p>templates/components/article.html <pre><code>&lt;article class=\"article\"&gt;\n    {% if contents.header %}\n        &lt;header class=\"article-header\"&gt;\n            {{ contents.header }}\n        &lt;/header&gt;\n    {% endif %}\n\n    &lt;main class=\"article-body\"&gt;\n        {{ contents }}\n    &lt;/main&gt;\n\n    {% if contents.sidebar %}\n        &lt;aside class=\"article-sidebar\"&gt;\n            {{ contents.sidebar }}\n        &lt;/aside&gt;\n    {% endif %}\n\n    {% if contents.footer %}\n        &lt;footer class=\"article-footer\"&gt;\n            {{ contents.footer }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/article&gt;\n</code></pre></p> <p>Usage: <pre><code>{% includecontents \"components/article.html\" %}\n    {% contents header %}\n        &lt;h1&gt;Article Title&lt;/h1&gt;\n        &lt;p class=\"meta\"&gt;Published on {{ article.date }}&lt;/p&gt;\n    {% endcontents %}\n\n    &lt;p&gt;This is the main article content...&lt;/p&gt;\n    &lt;p&gt;Multiple paragraphs are supported.&lt;/p&gt;\n\n    {% contents sidebar %}\n        &lt;h3&gt;Related Articles&lt;/h3&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;Article 1&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;Article 2&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    {% endcontents %}\n\n    {% contents footer %}\n        &lt;p&gt;Share this article:&lt;/p&gt;\n        &lt;div class=\"social-buttons\"&gt;...&lt;/div&gt;\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre></p>"},{"location":"using-components/named-content-blocks/#conditional-content-blocks","title":"Conditional Content Blocks","text":"<p>Use Django's template conditionals to handle optional content blocks:</p> <p>templates/components/modal.html <pre><code>&lt;div class=\"modal\"&gt;\n    {% if contents.header %}\n        &lt;div class=\"modal-header\"&gt;\n            {{ contents.header }}\n            &lt;button class=\"close\"&gt;&amp;times;&lt;/button&gt;\n        &lt;/div&gt;\n    {% endif %}\n\n    &lt;div class=\"modal-body\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n\n    {% if contents.footer %}\n        &lt;div class=\"modal-footer\"&gt;\n            {{ contents.footer }}\n        &lt;/div&gt;\n    {% else %}\n        &lt;div class=\"modal-footer\"&gt;\n            &lt;button class=\"btn btn-default\"&gt;Close&lt;/button&gt;\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/named-content-blocks/#html-content-syntax-alternative","title":"HTML Content Syntax Alternative","text":"<p>If you're using the custom template engine, you can use HTML-style syntax for named content blocks:</p> HTML Content SyntaxTraditional Syntax <pre><code>&lt;include:article&gt;\n    &lt;content:header&gt;\n        &lt;h1&gt;Article Title&lt;/h1&gt;\n        &lt;p class=\"meta\"&gt;Published on {{ article.date }}&lt;/p&gt;\n    &lt;/content:header&gt;\n\n    &lt;p&gt;This is the main article content...&lt;/p&gt;\n\n    &lt;content:sidebar&gt;\n        &lt;h3&gt;Related Articles&lt;/h3&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;Article 1&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/content:sidebar&gt;\n&lt;/include:article&gt;\n</code></pre> <pre><code>{% includecontents \"components/article.html\" %}\n    {% contents header %}\n        &lt;h1&gt;Article Title&lt;/h1&gt;\n        &lt;p class=\"meta\"&gt;Published on {{ article.date }}&lt;/p&gt;\n    {% endcontents %}\n\n    &lt;p&gt;This is the main article content...&lt;/p&gt;\n\n    {% contents sidebar %}\n        &lt;h3&gt;Related Articles&lt;/h3&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#\"&gt;Article 1&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre> <p>Both syntaxes are equivalent and can be mixed within the same project.</p>"},{"location":"using-components/named-content-blocks/#nested-content-blocks","title":"Nested Content Blocks","text":"<p>Content blocks can contain Django template logic and even other components:</p> <pre><code>{% includecontents \"components/dashboard.html\" %}\n    &lt;h1&gt;Welcome, {{ user.name }}!&lt;/h1&gt;\n\n    {% contents widgets %}\n        {% for widget in user.widgets %}\n            {% includecontents \"components/widget.html\" widget=widget %}\n                {{ widget.content }}\n            {% endincludecontents %}\n        {% endfor %}\n    {% endcontents %}\n\n    {% contents footer %}\n        Last login: {{ user.last_login|date:\"M d, Y\" }}\n    {% endcontents %}\n{% endincludecontents %}\n</code></pre>"},{"location":"using-components/named-content-blocks/#best-practices","title":"Best Practices","text":""},{"location":"using-components/named-content-blocks/#1-document-expected-content-blocks","title":"1. Document Expected Content Blocks","text":"<p>Add comments to your component templates to document expected content blocks:</p> <pre><code>&lt;!-- \nComponent: Article Layout\nExpected content blocks:\n- header (optional): Article title and meta information\n- contents (required): Main article content\n- sidebar (optional): Related links or additional info\n- footer (optional): Social sharing buttons\n--&gt;\n&lt;article class=\"article\"&gt;\n    &lt;!-- ... component template ... --&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"using-components/named-content-blocks/#2-provide-sensible-defaults","title":"2. Provide Sensible Defaults","text":"<p>Always provide fallbacks for optional content blocks:</p> <pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-header\"&gt;\n        {% if contents.header %}\n            {{ contents.header }}\n        {% else %}\n            &lt;h3&gt;Default Title&lt;/h3&gt;\n        {% endif %}\n    &lt;/div&gt;\n    &lt;div class=\"card-body\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/named-content-blocks/#3-keep-block-names-semantic","title":"3. Keep Block Names Semantic","text":"<p>Use descriptive names that clearly indicate the purpose:</p> <pre><code>{% contents header %}...{% endcontents %}          &lt;!-- \u2705 Good --&gt;\n{% contents sidebar_content %}...{% endcontents %} &lt;!-- \u2705 Good --&gt;\n{% contents block1 %}...{% endcontents %}         &lt;!-- \u274c Avoid --&gt;\n{% contents x %}...{% endcontents %}              &lt;!-- \u274c Avoid --&gt;\n</code></pre>"},{"location":"using-components/named-content-blocks/#4-consider-order-and-layout","title":"4. Consider Order and Layout","text":"<p>The order of content blocks in your usage doesn't need to match the order in the component template:</p> <pre><code>{% includecontents \"card.html\" %}\n    {% contents footer %}Footer comes first in the code{% endcontents %}\n\n    Main content comes after, but renders first in the card\n\n    {% contents header %}Header comes last in code{% endcontents %}\n{% endincludecontents %}\n</code></pre>"},{"location":"using-components/named-content-blocks/#common-patterns","title":"Common Patterns","text":""},{"location":"using-components/named-content-blocks/#layout-components","title":"Layout Components","text":"<pre><code>&lt;!-- templates/components/two-column.html --&gt;\n&lt;div class=\"row\"&gt;\n    &lt;div class=\"col-md-8\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n    &lt;div class=\"col-md-4\"&gt;\n        {{ contents.sidebar }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/named-content-blocks/#form-components","title":"Form Components","text":"<pre><code>&lt;!-- templates/components/form-field.html --&gt;\n&lt;div class=\"form-group\"&gt;\n    {% if contents.label %}\n        &lt;label&gt;{{ contents.label }}&lt;/label&gt;\n    {% endif %}\n\n    {{ contents }}\n\n    {% if contents.help %}\n        &lt;small class=\"form-text\"&gt;{{ contents.help }}&lt;/small&gt;\n    {% endif %}\n\n    {% if contents.errors %}\n        &lt;div class=\"invalid-feedback\"&gt;{{ contents.errors }}&lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/named-content-blocks/#navigation-components","title":"Navigation Components","text":"<pre><code>&lt;!-- templates/components/nav-section.html --&gt;\n&lt;div class=\"nav-section\"&gt;\n    &lt;h3 class=\"nav-title\"&gt;{{ contents.title }}&lt;/h3&gt;\n    &lt;ul class=\"nav-list\"&gt;\n        {{ contents }}\n    &lt;/ul&gt;\n    {% if contents.footer %}\n        &lt;div class=\"nav-footer\"&gt;{{ contents.footer }}&lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/named-content-blocks/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the Wrapif Tag for conditional wrapping</li> <li>Explore HTML Component Syntax for a modern alternative</li> <li>Check out Component Patterns for advanced usage</li> </ul>"},{"location":"using-components/props-and-attrs/","title":"Props &amp; Attrs","text":"<p>Components can define props (properties) to specify which attributes they expect and how to handle undefined attributes. This system provides validation, defaults, and flexible attribute handling.</p> <p>Template Engine Support</p> <p>The props system works with both template engines:</p> <ul> <li>Django: Full support with template parsing and validation</li> <li>Jinja2: Full support via shared props registry system</li> </ul> <p>Props syntax is identical across both engines.</p>"},{"location":"using-components/props-and-attrs/#defining-props","title":"Defining Props","text":"<p>Define props in a comment at the top of your component template:</p> <pre><code>{# props title, description=\"\", show_icon=True #}\n&lt;div class=\"card\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    {% if description %}\n        &lt;p&gt;{{ description }}&lt;/p&gt;\n    {% endif %}\n    {% if show_icon %}\n        &lt;span class=\"icon\"&gt;\u2605&lt;/span&gt;\n    {% endif %}\n    &lt;div class=\"content\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#props-syntax","title":"Props Syntax","text":""},{"location":"using-components/props-and-attrs/#required-props","title":"Required Props","text":"<p>Props without default values are required:</p> <pre><code>{# props title, author #}\n</code></pre> <p>If you use the component without required props, a <code>TemplateSyntaxError</code> is raised:</p> <pre><code>&lt;!-- \u274c Error: Missing required props --&gt;\n&lt;include:article&gt;Content&lt;/include:article&gt;\n</code></pre> <pre><code>&lt;!-- \u2705 Correct: All required props provided --&gt;\n&lt;include:article title=\"My Article\" author=\"John Doe\"&gt;Content&lt;/include:article&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#optional-props-with-defaults","title":"Optional Props with Defaults","text":"<p>Props with default values are optional:</p> <pre><code>{# props title, show_date=True, priority=\"normal\" #}\n</code></pre> <p>Default value types: - String: <code>description=\"Default text\"</code> - Boolean: <code>visible=True</code>, <code>hidden=False</code> - Number: <code>count=0</code>, <code>rating=5.0</code> - None: <code>optional_value=None</code></p>"},{"location":"using-components/props-and-attrs/#usage-example","title":"Usage Example","text":"<pre><code>{# props title, subtitle=\"\", priority=\"normal\", show_meta=True #}\n&lt;article class=\"article priority-{{ priority }}\"&gt;\n    &lt;header&gt;\n        &lt;h1&gt;{{ title }}&lt;/h1&gt;\n        {% if subtitle %}\n            &lt;h2&gt;{{ subtitle }}&lt;/h2&gt;\n        {% endif %}\n    &lt;/header&gt;\n\n    &lt;div class=\"content\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n\n    {% if show_meta %}\n        &lt;footer class=\"meta\"&gt;\n            Priority: {{ priority }}\n        &lt;/footer&gt;\n    {% endif %}\n&lt;/article&gt;\n</code></pre> <p>Usage: <pre><code>&lt;!-- Using defaults --&gt;\n&lt;include:article title=\"Hello World\"&gt;\n    &lt;p&gt;Article content...&lt;/p&gt;\n&lt;/include:article&gt;\n\n&lt;!-- Overriding defaults --&gt;\n&lt;include:article \n    title=\"Important News\" \n    subtitle=\"Breaking Story\"\n    priority=\"high\"\n    show-meta=\"false\"\n&gt;\n    &lt;p&gt;Important content...&lt;/p&gt;\n&lt;/include:article&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#data-types-and-object-passing","title":"Data Types and Object Passing","text":""},{"location":"using-components/props-and-attrs/#passing-objects","title":"Passing Objects","text":"<p>When using pure variable syntax, objects are passed directly to components without string conversion:</p> <pre><code>&lt;!-- Objects passed directly --&gt;\n&lt;include:user-card user=\"{{ user_object }}\" /&gt;\n&lt;include:product-grid products=\"{{ product_queryset }}\" /&gt;\n&lt;include:data-viewer data=\"{{ complex_data }}\" /&gt;\n</code></pre> <p>In the component, you can access object properties and methods:</p> <pre><code>{# props user #}\n&lt;div class=\"user-card\"&gt;\n    &lt;h3&gt;{{ user.get_full_name }}&lt;/h3&gt;\n    &lt;p&gt;{{ user.email }}&lt;/p&gt;\n    &lt;ul&gt;\n    {% for group in user.groups.all %}\n        &lt;li&gt;{{ group.name }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#string-conversion","title":"String Conversion","text":"<p>Objects are only preserved with pure variable syntax. Any additional content causes string conversion:</p> <pre><code>&lt;!-- \u2705 Object passed directly --&gt;\n&lt;include:viewer data=\"{{ my_object }}\" /&gt;\n\n&lt;!-- \u274c Converted to string --&gt;\n&lt;include:viewer title=\"Data: {{ my_object }}\" /&gt;\n&lt;include:viewer info=\"{{ my_object.id }}: {{ my_object.name }}\" /&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#filters-with-objects","title":"Filters with Objects","text":"<p>Filters work correctly with object passing:</p> <pre><code>&lt;!-- Object or fallback object --&gt;\n&lt;include:profile user=\"{{ current_user|default:anonymous_user }}\" /&gt;\n\n&lt;!-- First item from queryset --&gt;\n&lt;include:featured product=\"{{ products|first }}\" /&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#the-attrs-variable","title":"The <code>attrs</code> Variable","text":"<p>Attributes not defined in props are collected in the <code>attrs</code> variable, which can be rendered as HTML attributes.</p>"},{"location":"using-components/props-and-attrs/#basic-usage","title":"Basic Usage","text":"<pre><code>{# props title #}\n&lt;div {{ attrs }}&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;div class=\"content\"&gt;{{ contents }}&lt;/div&gt; \n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:card title=\"Hello\" class=\"my-card\" data-id=\"123\"&gt;\n    Content\n&lt;/include:card&gt;\n</code></pre></p> <p>Output: <pre><code>&lt;div class=\"my-card\" data-id=\"123\"&gt;\n    &lt;h2&gt;Hello&lt;/h2&gt;\n    &lt;div class=\"content\"&gt;Content&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#accessing-individual-attributes","title":"Accessing Individual Attributes","text":"<p>You can access individual undefined attributes:</p> <pre><code>{# props title #}\n&lt;div class=\"card\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    {% if attrs.class %}\n        &lt;p&gt;Custom class: {{ attrs.class }}&lt;/p&gt;\n    {% endif %}\n    {% if attrs.dataId %}\n        &lt;p&gt;Data ID: {{ attrs.dataId }}&lt;/p&gt;\n    {% endif %}\n    &lt;div {{ attrs }}&gt;{{ contents }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Attribute Name Conversion</p> <p>Kebab-case attributes are converted to camelCase for access: - <code>data-id</code> becomes <code>attrs.dataId</code> - <code>my-custom-attr</code> becomes <code>attrs.myCustomAttr</code></p>"},{"location":"using-components/props-and-attrs/#the-attrs-tag-django-and-callable-attrs-jinja2","title":"The <code>{% attrs %}</code> Tag (Django) and Callable <code>attrs</code> (Jinja2)","text":"<p>Both template engines provide flexible attribute management with fallback values and class handling.</p>"},{"location":"using-components/props-and-attrs/#django-attrs-tag","title":"Django: <code>{% attrs %}</code> Tag","text":"<pre><code>{% attrs attribute=\"fallback_value\" %}\n</code></pre>"},{"location":"using-components/props-and-attrs/#jinja2-callable-attrs-object","title":"Jinja2: Callable <code>attrs</code> Object","text":"<pre><code>{{ attrs(attribute='fallback_value') }}\n\n{# For reserved or complex attribute names, use dict unpacking #}\n{{ attrs(**{'class': 'btn', 'data-id': item.id, '@click': 'handler'}) }}\n</code></pre>"},{"location":"using-components/props-and-attrs/#providing-defaults","title":"Providing Defaults","text":"<p>Django Template: <pre><code>{# props title #}\n&lt;div {% attrs class=\"card\" id=\"default-card\" %}&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;div class=\"content\"&gt;{{ contents }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Jinja2 Template: <pre><code>{# props title #}\n&lt;div {{ attrs(class_='card', id='default-card') }}&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;div class=\"content\"&gt;{{ contents }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Reserved Keywords</p> <p>Since <code>class</code> is a reserved keyword in Python, you can either: 1. Use trailing underscore (recommended): <code>attrs(class_='my-class')</code> - the underscore is automatically stripped 2. Use dict unpacking: <code>attrs(**{'class': 'my-class'})</code></p> <p>Both methods work identically, but the underscore syntax is cleaner for simple cases.</p> <p>Usage: <pre><code>&lt;!-- Uses defaults --&gt;\n&lt;include:card title=\"Hello\"&gt;Content&lt;/include:card&gt;\n&lt;!-- Output: &lt;div class=\"card\" id=\"default-card\"&gt; --&gt;\n\n&lt;!-- Overrides defaults --&gt;\n&lt;include:card title=\"Hello\" class=\"custom-card\" id=\"my-card\"&gt;Content&lt;/include:card&gt;\n&lt;!-- Output: &lt;div class=\"custom-card\" id=\"my-card\"&gt; --&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#class-handling","title":"Class Handling","text":"<p>Both template engines provide special handling for CSS classes:</p>"},{"location":"using-components/props-and-attrs/#extending-classes-append","title":"Extending Classes (Append)","text":"<p>Use <code>\"&amp; \"</code> prefix to append classes after user-provided classes:</p> <p>Django: <pre><code>{# props #}\n&lt;button {% attrs class=\"&amp; btn btn-default\" %}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre></p> <p>Jinja2: <pre><code>{# props #}\n&lt;button {{ attrs(**{'class': '&amp; btn btn-default'}) }}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:button class=\"my-button\"&gt;Click me&lt;/include:button&gt;\n</code></pre></p> <p>Output: <pre><code>&lt;button class=\"my-button btn btn-default\"&gt;Click me&lt;/button&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#prepending-classes","title":"Prepending Classes","text":"<p>Use <code>\" &amp;\"</code> suffix to prepend classes before user-provided classes:</p> <p>Django: <pre><code>{# props #}\n&lt;div {% attrs class=\"container &amp;\" %}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre></p> <p>Jinja2: <pre><code>{# props #}\n&lt;div {{ attrs(**{'class': 'container &amp;'}) }}&gt;\n    {{ contents }}\n&lt;/div&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:wrapper class=\"my-content\"&gt;Content&lt;/include:wrapper&gt;\n</code></pre></p> <p>Output: <pre><code>&lt;div class=\"container my-content\"&gt;Content&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#conditional-classes","title":"Conditional Classes","text":"<p>Use the <code>class:</code> prefix for conditional classes:</p> <p>Django: <pre><code>{# props active=False, disabled=False #}\n&lt;button {% attrs class=\"btn\" class:active=active class:disabled=disabled %}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre></p> <p>Jinja2: <pre><code>{# props active=False, disabled=False #}\n&lt;button {{ attrs(\n    class='btn',\n    **{'class:active': active, 'class:disabled': disabled}\n) }}&gt;\n    {{ contents }}\n&lt;/button&gt;\n</code></pre></p> <p>Usage: <pre><code>&lt;include:button active=\"true\" disabled=\"false\"&gt;Active Button&lt;/include:button&gt;\n</code></pre></p> <p>Output: <pre><code>&lt;button class=\"btn active\"&gt;Active Button&lt;/button&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#jinja2-specific-features","title":"Jinja2-Specific Features","text":"<p>The callable <code>attrs</code> object in Jinja2 templates supports additional patterns:</p>"},{"location":"using-components/props-and-attrs/#method-chaining","title":"Method Chaining","text":"<pre><code>{# Build attributes progressively #}\n{% set base_attrs = attrs(type='button', class_='btn') %}\n{% set final_attrs = base_attrs(class_='&amp; btn-primary') %}\n&lt;button {{ final_attrs }}&gt;Click me&lt;/button&gt;\n\n{# Or chain directly #}\n&lt;button {{ attrs(type='button')(class_='btn')(**{'@click': 'handler'}) }}&gt;\n    Click me\n&lt;/button&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#complex-attribute-names","title":"Complex Attribute Names","text":"<p>Use dict unpacking for attribute names with special characters:</p> <pre><code>{# JavaScript framework attributes #}\n{{ attrs(**{\n    '@click.prevent': 'handleSubmit',\n    ':disabled': 'isProcessing',\n    'v-model': 'inputValue',\n    'x-on:click': 'toggle()',\n    'hx-get': '/api/data'\n}) }}\n\n{# Data attributes #}\n{{ attrs(**{\n    'data-testid': 'submit-button',\n    'data-analytics': 'click:submit'\n}) }}\n</code></pre>"},{"location":"using-components/props-and-attrs/#conditional-building","title":"Conditional Building","text":"<pre><code>{# Build attrs based on conditions #}\n{% set component_attrs = attrs(class_='card') %}\n\n{% if is_elevated %}\n    {% set component_attrs = component_attrs(class_='&amp; elevated') %}\n{% endif %}\n\n{% if clickable %}\n    {% set component_attrs = component_attrs(tabindex='0', role='button') %}\n{% endif %}\n\n&lt;div {{ component_attrs }}&gt;{{ contents }}&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#grouped-attributes","title":"Grouped Attributes","text":"<p>For complex components, you can group attributes by prefix:</p>"},{"location":"using-components/props-and-attrs/#defining-groups","title":"Defining Groups","text":"<pre><code>{# props label, value #}\n&lt;div {% attrs class=\"field\" %}&gt;\n    &lt;label&gt;{{ label }}&lt;/label&gt;\n    &lt;input {% attrs.input type=\"text\" value=value %}&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#using-groups","title":"Using Groups","text":"<pre><code>&lt;include:form-field \n    label=\"Username\" \n    value=\"john\"\n    class=\"form-group\"\n    input.class=\"form-control\"\n    input.placeholder=\"Enter username\"\n    input.required=\"true\"\n&gt;\n&lt;/include:form-field&gt;\n</code></pre> <p>Output: <pre><code>&lt;div class=\"field form-group\"&gt;\n    &lt;label&gt;Username&lt;/label&gt;\n    &lt;input type=\"text\" value=\"john\" class=\"form-control\" placeholder=\"Enter username\" required&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#boolean-attributes","title":"Boolean Attributes","text":"<p>HTML boolean attributes are handled correctly:</p> <pre><code>{# props #}\n&lt;input {% attrs type=\"text\" %}&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:input required disabled readonly&gt;\n</code></pre></p> <p>Output: <pre><code>&lt;input type=\"text\" required disabled readonly&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#optional-attributes","title":"Optional Attributes","text":"<p>Attributes with <code>None</code> values are completely removed from the output. This is useful for conditionally including attributes:</p> <pre><code>{# props #}\n&lt;a {% attrs href=\"#\" target=\"_blank\" rel=\"noopener\" %}&gt;\n    {{ contents }}\n&lt;/a&gt;\n</code></pre> <p>Usage: <pre><code>&lt;!-- With all attributes --&gt;\n&lt;include:link href=\"/about\" target=\"_blank\"&gt;About&lt;/include:link&gt;\n&lt;!-- Output: &lt;a href=\"/about\" target=\"_blank\" rel=\"noopener\"&gt;About&lt;/a&gt; --&gt;\n\n&lt;!-- Removing attributes with None --&gt;\n&lt;include:link href=\"/home\" target=\"{{ None }}\" rel=\"{{ None }}\"&gt;Home&lt;/include:link&gt;\n&lt;!-- Output: &lt;a href=\"/home\"&gt;Home&lt;/a&gt; --&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#common-patterns-for-optional-attributes","title":"Common Patterns for Optional Attributes","text":"<pre><code>&lt;!-- Using conditional expressions --&gt;\n&lt;include:button \n    disabled=\"{{ is_loading or None }}\"\n    data-id=\"{{ object.id if object else None }}\"\n&gt;\n    Save\n&lt;/include:button&gt;\n\n&lt;!-- Using the yesno filter for boolean attributes --&gt;\n&lt;include:input \n    required=\"{{ is_required|yesno:'required,' }}\"\n    readonly=\"{{ is_readonly|yesno:'readonly,' }}\"\n/&gt;\n\n&lt;!-- Using template logic --&gt;\n&lt;include:link \n    href=\"/profile\"\n    target=\"{% if external %}_blank{% else %}{{ None }}{% endif %}\"\n&gt;\n    Profile\n&lt;/include:link&gt;\n</code></pre> <p>Falsy Values</p> <p>Only <code>None</code> removes attributes. Other falsy values are rendered as strings: - <code>False</code> renders as <code>attr=\"False\"</code> - <code>\"\"</code> (empty string) renders as <code>attr=\"\"</code> - <code>0</code> renders as <code>attr=\"0\"</code> - <code>True</code> renders as just <code>attr</code> (boolean attribute)</p>"},{"location":"using-components/props-and-attrs/#advanced-examples","title":"Advanced Examples","text":""},{"location":"using-components/props-and-attrs/#card-component-with-full-props-system","title":"Card Component with Full Props System","text":"<pre><code>{# props title, subtitle=\"\", variant=\"default\", collapsible=False #}\n&lt;div {% attrs class=\"card card-{{ variant }}\" class:collapsible=collapsible %}&gt;\n    &lt;div class=\"card-header\"&gt;\n        &lt;h3&gt;{{ title }}&lt;/h3&gt;\n        {% if subtitle %}\n            &lt;p class=\"subtitle\"&gt;{{ subtitle }}&lt;/p&gt;\n        {% endif %}\n        {% if collapsible %}\n            &lt;button class=\"collapse-toggle\"&gt;Toggle&lt;/button&gt;\n        {% endif %}\n    &lt;/div&gt;\n    &lt;div class=\"card-body\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n    {% if contents.footer %}\n        &lt;div class=\"card-footer\"&gt;\n            {{ contents.footer }}\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:card \n    title=\"User Profile\" \n    subtitle=\"Manage your account\"\n    variant=\"primary\"\n    collapsible=\"true\"\n    data-user-id=\"{{ user.pk }}\"\n    class=\"my-custom-card\"\n&gt;\n    &lt;p&gt;Profile content here...&lt;/p&gt;\n    &lt;content:footer&gt;\n        &lt;button&gt;Save Changes&lt;/button&gt;\n    &lt;/content:footer&gt;\n&lt;/include:card&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#form-field-component","title":"Form Field Component","text":"<pre><code>{# props name, label=\"\", type=\"text\", required=False #}\n&lt;div {% attrs class=\"form-field\" class:required=required %}&gt;\n    {% if label %}\n        &lt;label for=\"{{ name }}\"&gt;\n            {{ label }}\n            {% if required %}&lt;span class=\"required\"&gt;*&lt;/span&gt;{% endif %}\n        &lt;/label&gt;\n    {% endif %}\n    &lt;input {% attrs.input \n        type=type \n        name=name \n        id=name\n        required=required\n    %}&gt;\n    {% if contents.help %}\n        &lt;small class=\"help-text\"&gt;{{ contents.help }}&lt;/small&gt;\n    {% endif %}\n    {% if contents.errors %}\n        &lt;div class=\"error-messages\"&gt;{{ contents.errors }}&lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre> <p>Usage: <pre><code>&lt;include:form-field \n    name=\"email\" \n    label=\"Email Address\"\n    type=\"email\"\n    required=\"true\"\n    class=\"mb-3\"\n    input.class=\"form-control\"\n    input.placeholder=\"Enter your email\"\n&gt;\n    &lt;content:help&gt;We'll never share your email with anyone.&lt;/content:help&gt;\n&lt;/include:form-field&gt;\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"using-components/props-and-attrs/#missing-required-props","title":"Missing Required Props","text":"<pre><code>{# props title, author #}\n&lt;!-- Component definition --&gt;\n\n&lt;!-- \u274c This will raise TemplateSyntaxError --&gt;\n&lt;include:article author=\"John\"&gt;\n    Content without required title\n&lt;/include:article&gt;\n</code></pre> <p>Error message: <pre><code>TemplateSyntaxError: Missing required prop 'title' for component 'article'\n</code></pre></p>"},{"location":"using-components/props-and-attrs/#type-validation","title":"Type Validation","text":"<p>While Django templates don't enforce strict typing, you can add validation in your component:</p> <pre><code>{# props count=0 #}\n{% if count|add:0 != count %}\n    &lt;div class=\"error\"&gt;Count must be a number&lt;/div&gt;\n{% else %}\n    &lt;div class=\"counter\"&gt;Count: {{ count }}&lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"using-components/props-and-attrs/#best-practices","title":"Best Practices","text":""},{"location":"using-components/props-and-attrs/#1-document-your-props","title":"1. Document Your Props","text":"<pre><code>{# \nprops:\n  title (required): The main heading text\n  subtitle (optional): Secondary heading text  \n  variant (optional): Style variant - \"default\", \"primary\", \"success\", \"danger\"\n  collapsible (optional): Whether the card can be collapsed\n#}\n&lt;div class=\"card\"&gt;\n    &lt;!-- component template --&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#2-provide-sensible-defaults","title":"2. Provide Sensible Defaults","text":"<pre><code>{# props title, size=\"medium\", color=\"blue\", rounded=True #}\n</code></pre>"},{"location":"using-components/props-and-attrs/#3-use-descriptive-prop-names","title":"3. Use Descriptive Prop Names","text":"<pre><code>&lt;!-- \u2705 Good: Clear and descriptive --&gt;\n{# props user_name, show_avatar=True, avatar_size=\"medium\" #}\n\n&lt;!-- \u274c Avoid: Vague or abbreviated --&gt;\n{# props name, show=True, size=\"med\" #}\n</code></pre>"},{"location":"using-components/props-and-attrs/#4-group-related-attributes","title":"4. Group Related Attributes","text":"<pre><code>{# props label, value, help_text=\"\" #}\n&lt;div class=\"form-group\"&gt;\n    &lt;label&gt;{{ label }}&lt;/label&gt;\n    &lt;input {% attrs.input type=\"text\" value=value %}&gt;\n    &lt;button {% attrs.button type=\"button\" %}&gt;Helper&lt;/button&gt;\n    {% if help_text %}\n        &lt;small&gt;{{ help_text }}&lt;/small&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#5-handle-edge-cases","title":"5. Handle Edge Cases","text":"<pre><code>{# props items=[] #}\n{% if items %}\n    &lt;ul {{ attrs }}&gt;\n        {% for item in items %}\n            &lt;li&gt;{{ item }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% else %}\n    &lt;p class=\"empty-message\"&gt;No items to display&lt;/p&gt;\n{% endif %}\n</code></pre>"},{"location":"using-components/props-and-attrs/#common-patterns","title":"Common Patterns","text":""},{"location":"using-components/props-and-attrs/#wrapper-components","title":"Wrapper Components","text":"<pre><code>{# props tag=\"div\" #}\n&lt;{{ tag }} {% attrs class=\"wrapper\" %}&gt;\n    {{ contents }}\n&lt;/{{ tag }}&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#conditional-rendering","title":"Conditional Rendering","text":"<pre><code>{# props visible=True, title=\"\" #}\n{% if visible %}\n    &lt;div {{ attrs }}&gt;\n        {% if title %}&lt;h3&gt;{{ title }}&lt;/h3&gt;{% endif %}\n        {{ contents }}\n    &lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"using-components/props-and-attrs/#multi-variant-components","title":"Multi-Variant Components","text":"<pre><code>{# props variant=\"default\" #}\n&lt;div {% attrs class=\"alert alert-{{ variant }}\" %}&gt;\n    {% if variant == \"success\" %}\n        &lt;span class=\"icon\"&gt;\u2713&lt;/span&gt;\n    {% elif variant == \"error\" %}\n        &lt;span class=\"icon\"&gt;\u2717&lt;/span&gt;\n    {% endif %}\n    {{ contents }}\n&lt;/div&gt;\n</code></pre>"},{"location":"using-components/props-and-attrs/#spreading-attributes","title":"Spreading Attributes","text":"<p>You can use the <code>...attrs</code> syntax to forward undefined attributes from a parent component to its children:</p> <pre><code>{# components/wrapper.html #}\n{# props title #}\n&lt;div class=\"wrapper\"&gt;\n    &lt;h2&gt;{{ title }}&lt;/h2&gt;\n    &lt;!-- Forward all undefined attrs to the child --&gt;\n    &lt;include:card ...attrs&gt;\n        {{ contents }}\n    &lt;/include:card&gt;\n&lt;/div&gt;\n</code></pre> <p>This is particularly useful for creating flexible wrapper components. For detailed information about attribute spreading, see Advanced Props - Attribute Spreading.</p>"},{"location":"using-components/props-and-attrs/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Props for enum validation and complex prop handling</li> <li>Explore CSS Classes for advanced class management</li> <li>Check out Component Patterns for real-world examples</li> </ul>"},{"location":"using-components/template-tag-syntax/","title":"Basic Template Tag Usage","text":"<p>The <code>{% includecontents %}</code> tag is the foundation of Django IncludeContents. It works similarly to Django's built-in <code>{% include %}</code> tag, but allows you to pass content blocks to the included template.</p> <p>Template Engine Compatibility</p> <p>Template tag syntax (<code>{% includecontents %}</code>) works with both template engines:</p> <ul> <li>Django: Works with standard template engine (no custom backend needed)</li> <li>Jinja2: Full support via the IncludeContentsExtension (see Jinja2 Setup)</li> </ul>"},{"location":"using-components/template-tag-syntax/#basic-syntax","title":"Basic Syntax","text":"<pre><code>{% load includecontents %}\n{% includecontents \"template_name.html\" %}\n    Content to pass to the template\n{% endincludecontents %}\n</code></pre> <p>The content between the opening and closing tags becomes available as the <code>{{ contents }}</code> variable in the included template.</p> <p>HTML Syntax Equivalent: <pre><code>&lt;include:template-name&gt;\n    Content to pass to the template\n&lt;/include:template-name&gt;\n</code></pre></p> <p>Modern Alternative</p> <p>Consider using the HTML Component Syntax for a more modern, HTML-like experience that doesn't require loading template tags.</p>"},{"location":"using-components/template-tag-syntax/#simple-example","title":"Simple Example","text":"<p>templates/greeting.html <pre><code>&lt;div class=\"greeting\"&gt;\n    &lt;h1&gt;Hello!&lt;/h1&gt;\n    &lt;p&gt;{{ contents }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Usage: <pre><code>{% load includecontents %}\n{% includecontents \"greeting.html\" %}\n    Welcome to our website!\n{% endincludecontents %}\n</code></pre></p> <p>Result: <pre><code>&lt;div class=\"greeting\"&gt;\n    &lt;h1&gt;Hello!&lt;/h1&gt;\n    &lt;p&gt;Welcome to our website!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/template-tag-syntax/#passing-variables","title":"Passing Variables","text":"<p>You can pass variables to the included template just like with the standard <code>{% include %}</code> tag:</p> <pre><code>{% includecontents \"greeting.html\" name=\"John\" age=25 %}\n    It's great to have you here!\n{% endincludecontents %}\n</code></pre> <p>templates/greeting.html <pre><code>&lt;div class=\"greeting\"&gt;\n    &lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;\n    &lt;p&gt;Age: {{ age }}&lt;/p&gt;\n    &lt;p&gt;{{ contents }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"using-components/template-tag-syntax/#context-isolation","title":"Context Isolation","text":"<p>Unlike the standard <code>{% include %}</code> tag, the included template runs in an isolated context. This means:</p> <ol> <li>Only explicitly passed variables are available in the included template</li> <li>Parent template variables are not automatically inherited</li> <li>Components are self-contained and predictable</li> </ol>"},{"location":"using-components/template-tag-syntax/#example-of-isolation","title":"Example of Isolation","text":"<p>Parent template: <pre><code>{% load includecontents %}\n{% with message=\"Hello from parent\" %}\n    {% includecontents \"child.html\" %}\n        Child content\n    {% endincludecontents %}\n{% endwith %}\n</code></pre></p> <p>templates/child.html <pre><code>&lt;div&gt;\n    &lt;p&gt;Message: {{ message }}&lt;/p&gt;  &lt;!-- This will be empty! --&gt;\n    &lt;p&gt;Contents: {{ contents }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Result: <pre><code>&lt;div&gt;\n    &lt;p&gt;Message: &lt;/p&gt;  &lt;!-- Empty because message wasn't passed explicitly --&gt;\n    &lt;p&gt;Contents: Child content&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Correct usage: <pre><code>{% load includecontents %}\n{% with message=\"Hello from parent\" %}\n    {% includecontents \"child.html\" message=message %}\n        Child content\n    {% endincludecontents %}\n{% endwith %}\n</code></pre></p>"},{"location":"using-components/template-tag-syntax/#template-resolution","title":"Template Resolution","text":"<p>The <code>{% includecontents %}</code> tag follows Django's standard template resolution:</p> <ul> <li>Relative paths: <code>\"components/card.html\"</code> looks in your <code>DIRS</code> and app template directories</li> <li>App-specific: <code>\"myapp/card.html\"</code> for app-specific templates</li> <li>Absolute paths: Not recommended, but supported</li> </ul>"},{"location":"using-components/template-tag-syntax/#error-handling","title":"Error Handling","text":""},{"location":"using-components/template-tag-syntax/#template-not-found","title":"Template Not Found","text":"<p><pre><code>{% includecontents \"nonexistent.html\" %}\n    Content\n{% endincludecontents %}\n</code></pre> Raises <code>TemplateDoesNotExist</code> exception.</p>"},{"location":"using-components/template-tag-syntax/#syntax-errors","title":"Syntax Errors","text":"<p><pre><code>{% includecontents %}  &lt;!-- Missing template name --&gt;\n    Content\n{% endincludecontents %}\n</code></pre> Raises <code>TemplateSyntaxError</code>.</p>"},{"location":"using-components/template-tag-syntax/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Template caching: Included templates are cached by Django's template system</li> <li>Context creation: Each inclusion creates a new isolated context</li> <li>Rendering: Content blocks are rendered once and cached during the tag execution</li> </ul>"},{"location":"using-components/template-tag-syntax/#advanced-features","title":"Advanced Features","text":"<p>The basic <code>{% includecontents %}</code> tag supports several advanced features:</p> <ul> <li>Named Contents Blocks: Multiple content sections within a single component</li> <li>Dynamic Template Names: Use variables for template names</li> <li>Conditional Inclusion: Conditionally include templates</li> </ul>"},{"location":"using-components/template-tag-syntax/#comparison-with-standard-include","title":"Comparison with Standard Include","text":"Feature <code>{% include %}</code> <code>{% includecontents %}</code> Pass content blocks \u274c \u2705 Context inheritance \u2705 Full \u274c Isolated Performance Slightly faster Minimal overhead Reusability Limited High Component-like behavior \u274c \u2705"},{"location":"using-components/template-tag-syntax/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Named Contents Blocks for more complex components</li> <li>Explore the HTML Component Syntax for a more modern approach</li> <li>Check out Component Patterns for best practices</li> </ul>"},{"location":"using-components/wrapif-tag/","title":"Wrapif Tag","text":"<p>The <code>{% wrapif %}</code> tag provides a clean way to conditionally wrap content with HTML elements, eliminating the need to repeat opening and closing tags in conditional blocks. This tag solves the common problem where you need to wrap content in an element only under certain conditions - without it, you'd have to duplicate your content in both the \"if\" and \"else\" branches. With wrapif, you write your content once and the wrapping happens conditionally.</p> <p>Template Engine Support</p> <p>The <code>{% wrapif %}</code> tag is currently only available in Django templates. For Jinja2, you can achieve similar functionality with conditional macros or template inheritance.</p>"},{"location":"using-components/wrapif-tag/#standard-syntax","title":"Standard Syntax","text":"<pre><code>{% load includecontents %}\n{% wrapif condition %}\n    &lt;wrapper-element attribute=\"value\"&gt;\n        {% contents %}Default content{% endcontents %}\n    &lt;/wrapper-element&gt;\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#shorthand-syntax","title":"Shorthand Syntax","text":"<p>For simple cases, use the compact <code>then</code> syntax:</p> <pre><code>{% wrapif condition then \"element\" attribute=\"value\" %}\n    Content to wrap\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#simple-examples","title":"Simple Examples","text":""},{"location":"using-components/wrapif-tag/#basic-conditional-wrapping","title":"Basic Conditional Wrapping","text":"Standard SyntaxShorthand Syntax <pre><code>{% wrapif user.is_authenticated %}\n    &lt;a href=\"/dashboard\" class=\"user-link\"&gt;\n        {% contents %}Welcome, {{ user.name }}{% endcontents %}\n    &lt;/a&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif user.is_authenticated then \"a\" href=\"/dashboard\" class=\"user-link\" %}\n    Welcome, {{ user.name }}\n{% endwrapif %}\n</code></pre> <p>When <code>user.is_authenticated</code> is True: <pre><code>&lt;a href=\"/dashboard\" class=\"user-link\"&gt;Welcome, John&lt;/a&gt;\n</code></pre></p> <p>When <code>user.is_authenticated</code> is False: <pre><code>Welcome, John\n</code></pre></p>"},{"location":"using-components/wrapif-tag/#traditional-vs-wrapif","title":"Traditional vs Wrapif","text":"Without Wrapif (Repetitive)With Wrapif - Standard SyntaxWith Wrapif - Shorthand Syntax <pre><code>{% if show_link %}\n    &lt;a href=\"{{ url }}\" class=\"link\"&gt;\n        Click here for {{ title }}\n    &lt;/a&gt;\n{% else %}\n    Click here for {{ title }}\n{% endif %}\n</code></pre> <pre><code>{% wrapif show_link %}\n    &lt;a href=\"{{ url }}\" class=\"link\"&gt;\n        {% contents %}Click here for {{ title }}{% endcontents %}\n    &lt;/a&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif show_link then \"a\" href=url class=\"link\" %}\n    Click here for {{ title }}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#complex-wrappers","title":"Complex Wrappers","text":"<p>For complex wrappers that need more than a single element, use the standard syntax with full templates:</p> <pre><code>{% wrapif user.is_premium %}\n    &lt;div class=\"premium-content\"&gt;\n        &lt;div class=\"premium-badge\"&gt;Premium&lt;/div&gt;\n        &lt;div class=\"content\"&gt;\n            {% contents %}{{ article.content }}{% endcontents %}\n        &lt;/div&gt;\n        &lt;div class=\"premium-footer\"&gt;\n            {% contents footer %}Exclusive content{% endcontents %}\n        &lt;/div&gt;\n    &lt;/div&gt;\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#conditional-variants","title":"Conditional Variants","text":""},{"location":"using-components/wrapif-tag/#wrapelse","title":"Wrapelse","text":"<p>Provide an alternative wrapper when the condition is false:</p> Standard SyntaxShorthand Syntax <pre><code>{% wrapif user.is_active %}\n    &lt;a href=\"/profile\"&gt;\n        {% contents %}{{ user.name }}{% endcontents %}\n    &lt;/a&gt;\n{% wrapelse %}\n    &lt;span class=\"disabled\"&gt;\n        {{ contents }}\n    &lt;/span&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif user.is_active then \"a\" href=\"/profile\" %}\n    {{ user.name }}\n{% wrapelse \"span\" class=\"disabled\" %}\n{% endwrapif %}\n</code></pre> <p>Note: In shorthand syntax, the content comes before the <code>wrapelse</code> tag</p> <p>When active: <pre><code>&lt;a href=\"/profile\"&gt;John Doe&lt;/a&gt;\n</code></pre></p> <p>When inactive: <pre><code>&lt;span class=\"disabled\"&gt;John Doe&lt;/span&gt;\n</code></pre></p>"},{"location":"using-components/wrapif-tag/#wrapelif","title":"Wrapelif","text":"<p>Handle multiple conditions with <code>{% wrapelif %}</code>:</p> Standard SyntaxShorthand Syntax <pre><code>{% wrapif priority == \"high\" %}\n    &lt;strong class=\"text-red\"&gt;\n        {% contents %}{{ task.title }}{% endcontents %}\n    &lt;/strong&gt;\n{% wrapelif priority == \"medium\" %}\n    &lt;em class=\"text-yellow\"&gt;\n        {{ contents }}\n    &lt;/em&gt;\n{% wrapelif priority == \"low\" %}\n    &lt;span class=\"text-gray\"&gt;\n        {{ contents }}\n    &lt;/span&gt;\n{% wrapelse %}\n    &lt;span&gt;\n        {{ contents }}\n    &lt;/span&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif priority == \"high\" then \"strong\" class=\"text-red\" %}\n    {{ task.title }}\n{% wrapelif priority == \"medium\" then \"em\" class=\"text-yellow\" %}\n{% wrapelif priority == \"low\" then \"span\" class=\"text-gray\" %}\n{% wrapelse \"span\" %}\n{% endwrapif %}\n</code></pre> <p>Note: In shorthand syntax, the content is placed after the first condition and is reused for all conditions</p>"},{"location":"using-components/wrapif-tag/#complex-conditions","title":"Complex Conditions","text":"<p>The tag supports all Django template conditional operators:</p> Standard SyntaxShorthand Syntax <pre><code>{% wrapif user.is_authenticated and user.is_staff %}\n    &lt;div class=\"admin-panel\"&gt;\n        {% contents %}Admin controls{% endcontents %}\n    &lt;/div&gt;\n{% endwrapif %}\n\n{% wrapif price &gt; 100 %}\n    &lt;span class=\"expensive\"&gt;\n        {% contents %}${{ price }}{% endcontents %}\n    &lt;/span&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif user.is_authenticated and user.is_staff then \"div\" class=\"admin-panel\" %}\n    Admin controls\n{% endwrapif %}\n\n{% wrapif price &gt; 100 then \"span\" class=\"expensive\" %}\n    ${{ price }}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#advanced-usage","title":"Advanced Usage","text":""},{"location":"using-components/wrapif-tag/#dynamic-attributes","title":"Dynamic Attributes","text":"<p>Use template variables for dynamic attributes:</p> <pre><code>{% wrapif show_button then \"button\" type=\"button\" class=button_class data-action=action %}\n    {{ button_text }}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#nested-wrapif","title":"Nested Wrapif","text":"<p>Wrapif tags can be nested for complex conditional structures:</p> Standard SyntaxShorthand Syntax <pre><code>{% wrapif show_section %}\n    &lt;section class=\"main-content\"&gt;\n        {% contents %}\n            {% wrapif show_header %}\n                &lt;header class=\"section-header\"&gt;\n                    {% contents %}&lt;h1&gt;{{ section.title }}&lt;/h1&gt;{% endcontents %}\n                &lt;/header&gt;\n            {% endwrapif %}\n\n            &lt;div class=\"section-body\"&gt;\n                {{ section.content }}\n            &lt;/div&gt;\n\n            {% wrapif show_footer %}\n                &lt;footer class=\"section-footer\"&gt;\n                    {% contents %}&lt;p&gt;Updated: {{ section.updated_at|date }}&lt;/p&gt;{% endcontents %}\n                &lt;/footer&gt;\n            {% endwrapif %}\n        {% endcontents %}\n    &lt;/section&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif show_section then \"section\" class=\"main-content\" %}\n    {% wrapif show_header then \"header\" class=\"section-header\" %}\n        &lt;h1&gt;{{ section.title }}&lt;/h1&gt;\n    {% endwrapif %}\n\n    &lt;div class=\"section-body\"&gt;\n        {{ section.content }}\n    &lt;/div&gt;\n\n    {% wrapif show_footer then \"footer\" class=\"section-footer\" %}\n        &lt;p&gt;Updated: {{ section.updated_at|date }}&lt;/p&gt;\n    {% endwrapif %}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#multiple-named-contents","title":"Multiple Named Contents","text":"<p>When using standard syntax, you can have multiple named content blocks:</p> <pre><code>{% wrapif show_card %}\n    &lt;div class=\"card\"&gt;\n        {% if contents.header %}\n            &lt;div class=\"card-header\"&gt;\n                {{ contents.header }}\n            &lt;/div&gt;\n        {% endif %}\n\n        &lt;div class=\"card-body\"&gt;\n            {% contents %}Main content{% endcontents %}\n        &lt;/div&gt;\n\n        {% if contents.footer %}\n            &lt;div class=\"card-footer\"&gt;\n                {{ contents.footer }}\n            &lt;/div&gt;\n        {% endif %}\n    &lt;/div&gt;\n{% endwrapif %}\n</code></pre> <p>Usage: <pre><code>{% wrapif user.has_premium %}\n    {% contents header %}Premium Feature{% endcontents %}\n\n    This content is only shown to premium users.\n\n    {% contents footer %}\n        &lt;a href=\"/upgrade\"&gt;Upgrade your account&lt;/a&gt;\n    {% endcontents %}\n{% endwrapif %}\n</code></pre></p>"},{"location":"using-components/wrapif-tag/#example-use-cases","title":"Example Use Cases","text":""},{"location":"using-components/wrapif-tag/#conditional-links","title":"Conditional Links","text":"Standard SyntaxShorthand Syntax <pre><code>{% wrapif article.url %}\n    &lt;a href=\"{{ article.url }}\" target=\"_blank\"&gt;\n        {% contents %}{{ article.title }}{% endcontents %}\n    &lt;/a&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif article.url then \"a\" href=article.url target=\"_blank\" %}\n    {{ article.title }}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#dynamic-headings","title":"Dynamic Headings","text":"Standard SyntaxShorthand Syntax <pre><code>{% wrapif level == 1 %}\n    &lt;h1&gt;{% contents %}{{ heading_text }}{% endcontents %}&lt;/h1&gt;\n{% wrapelif level == 2 %}\n    &lt;h2&gt;{{ contents }}&lt;/h2&gt;\n{% wrapelif level == 3 %}\n    &lt;h3&gt;{{ contents }}&lt;/h3&gt;\n{% wrapelse %}\n    &lt;p&gt;{{ contents }}&lt;/p&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif level == 1 then \"h1\" %}\n    {{ heading_text }}\n{% wrapelif level == 2 then \"h2\" %}\n{% wrapelif level == 3 then \"h3\" %}\n{% wrapelse \"p\" %}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#responsive-containers","title":"Responsive Containers","text":"Standard SyntaxShorthand Syntax <pre><code>{% wrapif is_mobile %}\n    &lt;div class=\"mobile-container\"&gt;\n        {% contents %}{{ content }}{% endcontents %}\n    &lt;/div&gt;\n{% wrapelse %}\n    &lt;div class=\"desktop-container\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif is_mobile then \"div\" class=\"mobile-container\" %}\n    {{ content }}\n{% wrapelse \"div\" class=\"desktop-container\" %}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#permission-based-wrapping","title":"Permission-Based Wrapping","text":"Standard SyntaxShorthand Syntax <pre><code>{% wrapif user.can_edit %}\n    &lt;div class=\"editable\" data-edit-url=\"{{ edit_url }}\"&gt;\n        {% contents %}\n            {{ content }}\n            {% if user.can_edit %}\n                &lt;button class=\"edit-btn\"&gt;Edit&lt;/button&gt;\n            {% endif %}\n        {% endcontents %}\n    &lt;/div&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif user.can_edit then \"div\" class=\"editable\" data-edit-url=edit_url %}\n    {{ content }}\n    {% if user.can_edit %}\n        &lt;button class=\"edit-btn\"&gt;Edit&lt;/button&gt;\n    {% endif %}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#form-field-validation","title":"Form Field Validation","text":"Standard SyntaxShorthand Syntax <pre><code>{% wrapif field.errors %}\n    &lt;div class=\"field-group error\"&gt;\n        {% contents %}\n            &lt;label for=\"{{ field.id_for_label }}\"&gt;{{ field.label }}&lt;/label&gt;\n            {{ field }}\n            {% if field.errors %}\n                &lt;div class=\"error-messages\"&gt;\n                    {% for error in field.errors %}\n                        &lt;span class=\"error\"&gt;{{ error }}&lt;/span&gt;\n                    {% endfor %}\n                &lt;/div&gt;\n            {% endif %}\n        {% endcontents %}\n    &lt;/div&gt;\n{% wrapelse %}\n    &lt;div class=\"field-group\"&gt;\n        {{ contents }}\n    &lt;/div&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif field.errors then \"div\" class=\"field-group error\" %}\n    &lt;label for=\"{{ field.id_for_label }}\"&gt;{{ field.label }}&lt;/label&gt;\n    {{ field }}\n    {% if field.errors %}\n        &lt;div class=\"error-messages\"&gt;\n            {% for error in field.errors %}\n                &lt;span class=\"error\"&gt;{{ error }}&lt;/span&gt;\n            {% endfor %}\n        &lt;/div&gt;\n    {% endif %}\n{% wrapelse \"div\" class=\"field-group\" %}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#boolean-attributes","title":"Boolean Attributes","text":"<p>The wrapif tag properly handles boolean HTML attributes:</p> Standard SyntaxShorthand Syntax <pre><code>{% wrapif is_required %}\n    &lt;input type=\"text\" required&gt;\n        {% contents %}{% endcontents %}\n    &lt;/input&gt;\n{% endwrapif %}\n</code></pre> <pre><code>{% wrapif is_required then \"input\" type=\"text\" required %}\n{% endwrapif %}\n</code></pre> <p>When <code>is_required</code> is <code>True</code>, outputs: <pre><code>&lt;input type=\"text\" required&gt;\n</code></pre></p> <p>When <code>is_required</code> is <code>False</code>, the input element is not rendered at all (for standard syntax) or rendered without the wrapper (for shorthand with content).</p>"},{"location":"using-components/wrapif-tag/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Condition evaluation: Conditions are evaluated once per render</li> <li>Content rendering: Content is only rendered when the condition matches</li> <li>Template caching: Wrapper templates benefit from Django's template caching</li> </ul>"},{"location":"using-components/wrapif-tag/#error-handling","title":"Error Handling","text":""},{"location":"using-components/wrapif-tag/#invalid-syntax","title":"Invalid Syntax","text":"<p><pre><code>{% wrapif %}  &lt;!-- Missing condition --&gt;\n    Content\n{% endwrapif %}\n</code></pre> Raises <code>TemplateSyntaxError: wrapif tag requires a condition</code>.</p>"},{"location":"using-components/wrapif-tag/#malformed-elements","title":"Malformed Elements","text":"<p><pre><code>{% wrapif True then \"invalid-element-name\" %}\n    Content\n{% endwrapif %}\n</code></pre> Outputs HTML as-is, but may not be valid HTML.</p>"},{"location":"using-components/wrapif-tag/#best-practices","title":"Best Practices","text":""},{"location":"using-components/wrapif-tag/#1-use-descriptive-conditions","title":"1. Use Descriptive Conditions","text":"<pre><code>{% wrapif user.can_edit_article then \"div\" class=\"editable\" %}    &lt;!-- \u2705 Good --&gt;\n{% wrapif flag then \"div\" %}                                      &lt;!-- \u274c Unclear --&gt;\n</code></pre>"},{"location":"using-components/wrapif-tag/#2-keep-wrapper-logic-simple","title":"2. Keep Wrapper Logic Simple","text":"<p>For complex wrappers, consider creating a dedicated component instead:</p> <pre><code>&lt;!-- \u2705 Good: Simple wrapper --&gt;\n{% wrapif is_featured then \"mark\" class=\"featured\" %}\n    {{ title }}\n{% endwrapif %}\n\n&lt;!-- \u274c Consider a component: Too complex for wrapif --&gt;\n{% wrapif show_complex_layout %}\n    &lt;div class=\"complex\"&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;span class=\"icon\"&gt;&lt;/span&gt;\n            &lt;h3&gt;{{ title }}&lt;/h3&gt;\n        &lt;/div&gt;\n        &lt;div class=\"body\"&gt;\n            {% contents %}...{% endcontents %}\n        &lt;/div&gt;\n    &lt;/div&gt;\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#3-combine-with-other-tags","title":"3. Combine with Other Tags","text":"<p>Wrapif works well with other Django IncludeContents features:</p> <pre><code>{% wrapif show_container then \"div\" class=\"container\" %}\n    {% includecontents \"components/card.html\" title=title %}\n        {{ content }}\n    {% endincludecontents %}\n{% endwrapif %}\n</code></pre>"},{"location":"using-components/wrapif-tag/#next-steps","title":"Next Steps","text":"<ul> <li>Explore HTML Component Syntax for modern component development</li> <li>Learn about Props &amp; Attrs for component attributes</li> <li>Check out Component Patterns for advanced techniques</li> </ul>"}]}